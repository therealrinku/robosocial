[{"/home/rinku/codes/instaclone/client/src/index.js":"1","/home/rinku/codes/instaclone/client/src/components/App.js":"2","/home/rinku/codes/instaclone/client/src/redux/store.js":"3","/home/rinku/codes/instaclone/client/src/components/PostButton.js":"4","/home/rinku/codes/instaclone/client/src/components/AddPostModal.js":"5","/home/rinku/codes/instaclone/client/src/components/Backdrop.js":"6","/home/rinku/codes/instaclone/client/src/components/MessageViewer.js":"7","/home/rinku/codes/instaclone/client/src/redux/rootReducer.js":"8","/home/rinku/codes/instaclone/client/src/pages/ExplorePage.js":"9","/home/rinku/codes/instaclone/client/src/pages/Homepage.js":"10","/home/rinku/codes/instaclone/client/src/pages/Landingpage.js":"11","/home/rinku/codes/instaclone/client/src/pages/PostView.js":"12","/home/rinku/codes/instaclone/client/src/pages/Loginpage.js":"13","/home/rinku/codes/instaclone/client/src/pages/Profilepage.js":"14","/home/rinku/codes/instaclone/client/src/pages/Signuppage.js":"15","/home/rinku/codes/instaclone/client/src/pages/EditProfilePage.js":"16","/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage.js":"17","/home/rinku/codes/instaclone/client/src/redux/user/userActions.js":"18","/home/rinku/codes/instaclone/client/src/redux/post/postsActions.js":"19","/home/rinku/codes/instaclone/client/src/utilities/overflowToggler.js":"20","/home/rinku/codes/instaclone/client/src/components/Loader.js":"21","/home/rinku/codes/instaclone/client/src/redux/post/postsReducer.js":"22","/home/rinku/codes/instaclone/client/src/components/PostsGrid.js":"23","/home/rinku/codes/instaclone/client/src/redux/user/userReducer.js":"24","/home/rinku/codes/instaclone/client/src/components/SearchView.js":"25","/home/rinku/codes/instaclone/client/src/components/MobileNavbar.js":"26","/home/rinku/codes/instaclone/client/src/components/Recommended.js":"27","/home/rinku/codes/instaclone/client/src/components/Feed.js":"28","/home/rinku/codes/instaclone/client/src/components/PostOptModal.js":"29","/home/rinku/codes/instaclone/client/src/components/UserListModal.js":"30","/home/rinku/codes/instaclone/client/src/components/CommentBox.js":"31","/home/rinku/codes/instaclone/client/src/components/CommentsView.js":"32","/home/rinku/codes/instaclone/client/src/utilities/lazyLoadImage.js":"33","/home/rinku/codes/instaclone/client/src/components/LoginNeededPrompt.js":"34","/home/rinku/codes/instaclone/client/src/components/ProfileOptModal.js":"35","/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt.js":"36","/home/rinku/codes/instaclone/client/src/utilities/notificationPusher.js":"37","/home/rinku/codes/instaclone/client/src/redux/post/postsActionTypes.js":"38","/home/rinku/codes/instaclone/client/src/components/ProfileButtonLine.js":"39","/home/rinku/codes/instaclone/client/src/components/ProfileSummary.js":"40","/home/rinku/codes/instaclone/client/src/redux/user/userActionTypes.js":"41","/home/rinku/codes/instaclone/client/src/redux/profile/profileReducer.js":"42","/home/rinku/codes/instaclone/client/src/redux/profile/ProfileActions.js":"43","/home/rinku/codes/instaclone/client/src/redux/profile/profileActionTypes.js":"44","/home/rinku/codes/instaclone/client/src/Icons/CustomIcons.js":"45","/home/rinku/codes/instaclone/client/src/services/userServices.js":"46","/home/rinku/codes/instaclone/client/src/services/authServices.js":"47","/home/rinku/codes/instaclone/client/src/services/postsServices.js":"48","/home/rinku/codes/instaclone/client/src/services/commentServices.js":"49","/home/rinku/codes/instaclone/client/src/services/profileServices.js":"50","/home/rinku/codes/instaclone/client/src/firebase/storage.js":"51","/home/rinku/codes/instaclone/client/src/firebase/firestore.js":"52","/home/rinku/codes/instaclone/client/src/components/Post.js":"53","/home/rinku/codes/instaclone/client/src/components/Activity.js":"54","/home/rinku/codes/instaclone/client/src/components/Comment.js":"55","/home/rinku/codes/instaclone/client/src/firebase/firebase.js":"56","/home/rinku/codes/instaclone/client/src/server_url.js":"57","/home/rinku/codes/instaclone/client/src/utilities/clearNotification.js":"58","/home/rinku/codes/instaclone/client/src/components/Sidebar.js":"59"},{"size":358,"mtime":1625733920243,"results":"60","hashOfConfig":"61"},{"size":3983,"mtime":1625754203077,"results":"62","hashOfConfig":"61"},{"size":407,"mtime":1625733920243,"results":"63","hashOfConfig":"61"},{"size":895,"mtime":1625733920239,"results":"64","hashOfConfig":"61"},{"size":1863,"mtime":1625733920239,"results":"65","hashOfConfig":"61"},{"size":371,"mtime":1625733920239,"results":"66","hashOfConfig":"61"},{"size":163,"mtime":1625733920239,"results":"67","hashOfConfig":"61"},{"size":333,"mtime":1625733920243,"results":"68","hashOfConfig":"61"},{"size":1231,"mtime":1625737731647,"results":"69","hashOfConfig":"61"},{"size":1820,"mtime":1625737308074,"results":"70","hashOfConfig":"61"},{"size":149,"mtime":1625733920243,"results":"71","hashOfConfig":"61"},{"size":13702,"mtime":1625737684582,"results":"72","hashOfConfig":"61"},{"size":2010,"mtime":1625733920243,"results":"73","hashOfConfig":"61"},{"size":8328,"mtime":1625737328770,"results":"74","hashOfConfig":"61"},{"size":2867,"mtime":1625733920243,"results":"75","hashOfConfig":"61"},{"size":6417,"mtime":1625737227917,"results":"76","hashOfConfig":"61"},{"size":2828,"mtime":1625737347330,"results":"77","hashOfConfig":"61"},{"size":2885,"mtime":1625733920243,"results":"78","hashOfConfig":"61"},{"size":8397,"mtime":1625733920243,"results":"79","hashOfConfig":"61"},{"size":222,"mtime":1625733920259,"results":"80","hashOfConfig":"61"},{"size":395,"mtime":1625733920239,"results":"81","hashOfConfig":"61"},{"size":8473,"mtime":1625733920243,"results":"82","hashOfConfig":"61"},{"size":877,"mtime":1625733920239,"results":"83","hashOfConfig":"61"},{"size":2142,"mtime":1625733920243,"results":"84","hashOfConfig":"61"},{"size":1521,"mtime":1625733920243,"results":"85","hashOfConfig":"61"},{"size":3773,"mtime":1625733920239,"results":"86","hashOfConfig":"61"},{"size":1709,"mtime":1625733920243,"results":"87","hashOfConfig":"61"},{"size":981,"mtime":1625733920239,"results":"88","hashOfConfig":"61"},{"size":2127,"mtime":1625758990396,"results":"89","hashOfConfig":"61"},{"size":1029,"mtime":1625733920243,"results":"90","hashOfConfig":"61"},{"size":2036,"mtime":1625733920239,"results":"91","hashOfConfig":"61"},{"size":871,"mtime":1625733920239,"results":"92","hashOfConfig":"61"},{"size":461,"mtime":1625733920259,"results":"93","hashOfConfig":"61"},{"size":590,"mtime":1625733920239,"results":"94","hashOfConfig":"61"},{"size":1251,"mtime":1625733920239,"results":"95","hashOfConfig":"61"},{"size":529,"mtime":1625733920243,"results":"96","hashOfConfig":"61"},{"size":307,"mtime":1625733920259,"results":"97","hashOfConfig":"61"},{"size":994,"mtime":1625733920243,"results":"98","hashOfConfig":"61"},{"size":824,"mtime":1625733920239,"results":"99","hashOfConfig":"61"},{"size":4978,"mtime":1625733920243,"results":"100","hashOfConfig":"61"},{"size":418,"mtime":1625733920243,"results":"101","hashOfConfig":"61"},{"size":2906,"mtime":1625733920243,"results":"102","hashOfConfig":"61"},{"size":2909,"mtime":1625733920243,"results":"103","hashOfConfig":"61"},{"size":472,"mtime":1625733920243,"results":"104","hashOfConfig":"61"},{"size":10091,"mtime":1625733920231,"results":"105","hashOfConfig":"61"},{"size":1847,"mtime":1625733920259,"results":"106","hashOfConfig":"61"},{"size":943,"mtime":1625733920259,"results":"107","hashOfConfig":"61"},{"size":3650,"mtime":1625733920259,"results":"108","hashOfConfig":"61"},{"size":1702,"mtime":1625733920259,"results":"109","hashOfConfig":"61"},{"size":2327,"mtime":1625733920259,"results":"110","hashOfConfig":"61"},{"size":124,"mtime":1625733920243,"results":"111","hashOfConfig":"61"},{"size":362,"mtime":1625733920243,"results":"112","hashOfConfig":"61"},{"size":7561,"mtime":1625756686839,"results":"113","hashOfConfig":"61"},{"size":3273,"mtime":1625733920239,"results":"114","hashOfConfig":"61"},{"size":2874,"mtime":1625733920239,"results":"115","hashOfConfig":"61"},{"size":438,"mtime":1625733920243,"results":"116","hashOfConfig":"61"},{"size":84,"mtime":1625733920247,"results":"117","hashOfConfig":"61"},{"size":194,"mtime":1625733920259,"results":"118","hashOfConfig":"61"},{"size":2898,"mtime":1625759144053,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"1o123u4",{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"122"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"122"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"122"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"150","usedDeprecatedRules":"122"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"122"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"156","usedDeprecatedRules":"122"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"122"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"122"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"122"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"122"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rinku/codes/instaclone/client/src/index.js",[],["249","250"],"/home/rinku/codes/instaclone/client/src/components/App.js",["251","252"],"/home/rinku/codes/instaclone/client/src/redux/store.js",[],"/home/rinku/codes/instaclone/client/src/components/PostButton.js",[],"/home/rinku/codes/instaclone/client/src/components/AddPostModal.js",[],"/home/rinku/codes/instaclone/client/src/components/Backdrop.js",[],"/home/rinku/codes/instaclone/client/src/components/MessageViewer.js",[],"/home/rinku/codes/instaclone/client/src/redux/rootReducer.js",[],"/home/rinku/codes/instaclone/client/src/pages/ExplorePage.js",["253","254"],"import React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport Sidebar from \"../components/Sidebar\";\nimport PostsGrid from \"../components/PostsGrid\";\nimport * as PostsActions from \"../redux/post/postsActions\";\nimport MobileNavbar from \"../components/MobileNavbar\";\nimport SearchView from \"../components/SearchView\";\n\nconst ExplorePage = ({ loading, explorePosts, loadExplorePosts }) => {\n  useEffect(() => {\n    if (explorePosts.length <= 0) {\n      loadExplorePosts();\n    }\n  }, []);\n\n  return (\n    <Fragment>\n      <div className=\"navbar--pc\">\n        <Sidebar />\n      </div>\n\n      <MobileNavbar />\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"explore--page\">\n          <PostsGrid userPosts={explorePosts} />\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.posts.loading_explore_posts,\n    explorePosts: state.posts.explore_posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    loadExplorePosts: () => dispatch(PostsActions.LOAD_EXPLORE_POSTS()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorePage);\n","/home/rinku/codes/instaclone/client/src/pages/Homepage.js",["255"],"import Feed from \"../components/Feed\";\nimport Sidebar from \"../components/Sidebar\";\nimport { connect } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport MobileNavbar from \"../components/MobileNavbar\";\nimport Loader from \"../components/Loader\";\nimport * as postsActions from \"../redux/post/postsActions\";\nimport * as userActions from \"../redux/user/userActions\";\nimport Recommended from \"../components/Recommended\";\n\nconst Homepage = ({\n  currentUserUid,\n  feed,\n  GET_FEED,\n  loading,\n  recommendedUsers,\n  GET_RECOMMENDED_USERS,\n  feedLoaded,\n}) => {\n  useEffect(() => {\n    if (!feedLoaded) {\n      GET_FEED(currentUserUid);\n    }\n    if (feedLoaded && feed.length < 1) {\n      GET_RECOMMENDED_USERS(currentUserUid);\n    }\n  }, [currentUserUid, feedLoaded]);\n\n  return (\n    <div className=\"homepage\">\n      {loading ? <Loader /> : null}\n      <Sidebar />\n      {feed.length > 0 && !loading ? (\n        <Feed feed={feed} />\n      ) : !loading && feedLoaded ? (\n        <Recommended recommendedUsers={recommendedUsers} />\n      ) : null}\n      <MobileNavbar />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    feedLoaded: state.posts.feed_loaded,\n    recommendedUsers: state.user.recommendedUsers,\n    loading: state.posts.loading_feed,\n    feed: state.posts.posts.filter((post) => post.infeed === true),\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    currentUserProfileImage: state.user.currentUserData.profile_image_url,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    GET_RECOMMENDED_USERS: (uid) => dispatch(userActions.GET_RECOMMENDED(uid)),\n    GET_FEED: (user_uid) => dispatch(postsActions.GET_FEED(user_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);\n","/home/rinku/codes/instaclone/client/src/pages/Landingpage.js",[],"/home/rinku/codes/instaclone/client/src/pages/PostView.js",["256","257","258","259","260"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport { BiDotsHorizontal } from \"react-icons/bi\";\nimport { Link } from \"react-router-dom\";\nimport * as Icons from \"../Icons/CustomIcons\";\nimport Sidebar from \"../components/Sidebar\";\nimport MobileNavbar from \"../components/MobileNavbar\";\nimport * as PostsActions from \"../redux/post/postsActions\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport Backdrop from \"../components/Backdrop\";\nimport PostOptModal from \"../components/PostOptModal\";\nimport UsersListModal from \"../components/UserListModal\";\nimport CommentBox from \"../components/CommentBox\";\nimport CommentsView from \"../components/CommentsView\";\nimport { deleteComment, getCommentLikers } from \"../services/commentServices\";\nimport LoginNeededPrompt from \"../components/LoginNeededPrompt\";\nimport ProfilePicPlaceholder from \"../assets/avatar.jpg\";\nimport lazyLoadImage from \"../utilities/lazyLoadImage\";\n\nconst PostView = ({\n  currentUsername,\n  currentUserUid,\n  posts,\n  match,\n  history,\n  LOAD_POST,\n  loading,\n  LIKE_POST,\n  UNLIKE_POST,\n  SAVE_POST,\n  UNSAVE_POST,\n  GET_LIKERS,\n  loadingLikers,\n  DELETE_POST,\n  GET_COMMENTS,\n  LIKE_COMMENT,\n  UNLIKE_COMMENT,\n  DELETE_COMMENT,\n  GET_COMMENT_LIKERS,\n  gettingCommentLikers,\n  userDataLoaded,\n  ADD_MESSAGE,\n  token,\n}) => {\n  //modal\n  const [showPostOptionsModal, setShowPostOptionsModal] = useState(false);\n  const [showLikersModal, setShowLikersModal] = useState(false);\n  const [showLoginNeededPrompt, setShowLoginNeededPrompt] = useState(false);\n\n  //checking image is loaded\n  const [imageIsLoaded, setImageIsLoaded] = useState(false);\n\n  const toggleModal = (setModal) => {\n    setModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  const post_id = match.params.post_id;\n  const currentPost = posts.filter((post) => post.post_id === post_id);\n\n  const thisPostLikers = currentPost[0]?.post_likers;\n  const thisPostComments = currentPost[0]?.comments;\n\n  const post_uid = currentPost[0]?.post_uid;\n  const haveILiked = currentPost[0]?.liked_by_me;\n  const haveISaved = currentPost[0]?.i_have_saved;\n\n  const likeUnlikePost = () => {\n    if (currentUserUid) {\n      if (haveILiked) {\n        UNLIKE_POST(post_uid, currentUserUid, currentPost[0]?.poster_uid);\n      } else {\n        LIKE_POST(post_uid, currentUserUid, currentPost[0]?.poster_uid);\n      }\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  const saveUnsavePost = () => {\n    if (currentUserUid) {\n      if (haveISaved) {\n        UNSAVE_POST(post_uid, currentUsername);\n      } else {\n        SAVE_POST(post_uid, currentUsername);\n      }\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  const getLikers = () => {\n    toggleModal(setShowLikersModal);\n    if (!thisPostLikers) {\n      GET_LIKERS(post_uid);\n    }\n  };\n\n  const getComments = () => {\n    if (!thisPostComments) {\n      GET_COMMENTS(post_uid, currentUserUid);\n    }\n  };\n\n  const deletePost = () => {\n    toggleModal(setShowPostOptionsModal);\n    DELETE_POST(post_uid);\n    history.goBack();\n  };\n\n  const likeUnlikeComment = (likeOrUnlike, comment_uid) => {\n    if (currentUserUid) {\n      if (likeOrUnlike === \"like\") {\n        LIKE_COMMENT(comment_uid, currentUserUid, post_uid);\n      } else {\n        UNLIKE_COMMENT(comment_uid, currentUserUid, post_uid);\n      }\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  const deleteComment = (comment_uid) => {\n    DELETE_COMMENT(comment_uid, post_uid);\n  };\n\n  const getCommentLikers = (comment_uid) => {\n    GET_COMMENT_LIKERS(comment_uid, post_uid);\n  };\n\n  useEffect(() => {\n    if (post_uid) {\n      getComments();\n    }\n  }, [post_uid]);\n\n  useEffect(() => {\n    document.body.style.overflow = \"auto\";\n    if (token) {\n      if (currentUserUid && currentPost.length < 1) {\n        LOAD_POST(post_id, currentUserUid);\n      }\n    } else {\n      LOAD_POST(post_id, currentUserUid);\n    }\n  }, [token, currentUserUid, post_id]);\n\n  return (\n    <Fragment>\n      {showLikersModal ? (\n        <Fragment>\n          <UsersListModal\n            users={thisPostLikers || []}\n            title=\"Likers\"\n            toggle={() => toggleModal(setShowLikersModal)}\n            loading={loadingLikers}\n          />\n          <Backdrop\n            show={showLikersModal}\n            toggle={() => toggleModal(setShowLikersModal)}\n          />\n        </Fragment>\n      ) : null}\n\n      {showPostOptionsModal ? (\n        <Fragment>\n          <Backdrop\n            show={showPostOptionsModal}\n            toggle={() => toggleModal(setShowPostOptionsModal)}\n          />\n          <PostOptModal\n            isMyPost={currentPost[0].poster_username === currentUsername}\n            toggle={() => toggleModal(setShowPostOptionsModal)}\n            post_id={post_id}\n            deletePost={deletePost}\n            AddMessage={ADD_MESSAGE}\n          />\n        </Fragment>\n      ) : null}\n\n      <Sidebar />\n      <MobileNavbar />\n      {loading ? (\n        <Loader />\n      ) : //checking if post exiists\n      !loading && !currentPost[0]?.post_image ? (\n        <p\n          style={{ marginTop: \"100px\", textAlign: \"center\", fontSize: \"15px\" }}\n        >\n          Post deleted or something went wrong!\n        </p>\n      ) : (\n        <Fragment>\n          <div className=\"post--card post--card-mobile\">\n            <div>\n              <ul>\n                <img\n                  className=\"lazy-image\"\n                  src={ProfilePicPlaceholder}\n                  onLoad={lazyLoadImage}\n                  data-src={currentPost[0].poster_profileimage}\n                  alt=\"post_user_image\"\n                />\n                <Link to={`/${currentPost[0]?.poster_username}`}>\n                  {currentPost[0]?.poster_username}\n                </Link>\n              </ul>\n\n              <ul>\n                <button onClick={() => toggleModal(setShowPostOptionsModal)}>\n                  <BiDotsHorizontal />\n                </button>\n              </ul>\n            </div>\n\n            <div>\n              <img src={currentPost[0]?.post_image} alt=\"post_main_img\" />\n            </div>\n\n            <div>\n              <div>\n                <button onClick={likeUnlikePost}>\n                  {haveILiked ? <Icons.LovedIcon /> : <Icons.LoveIcon />}\n                </button>\n\n                <button onClick={() => history.push(`/p/${post_id}`)}>\n                  <Icons.CommentIcon />\n                </button>\n\n                <button>\n                  <Icons.ShareIcon />\n                </button>\n              </div>\n\n              <div>\n                <button onClick={saveUnsavePost}>\n                  {haveISaved ? <Icons.SavedIcon /> : <Icons.SaveIcon />}\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <p>{currentPost[0]?.post_status}</p>\n            </div>\n\n            <div>\n              <button onClick={getLikers}>\n                {currentPost[0]?.post_likes_count || \"No\"}{\" \"}\n                {currentPost[0]?.post_likes_count === 1 ? \"like\" : \"likes\"}\n              </button>\n              <button onClick={() => history.push(`/p/${post_id}`)}>\n                {currentPost[0]?.post_comments_count}{\" \"}\n                {currentPost[0]?.post_comments_count === 1\n                  ? \"comment\"\n                  : \"comments\"}\n              </button>\n            </div>\n\n            <div>\n              <p>{currentPost[0]?.post_posted_date}</p>\n            </div>\n\n            <CommentBox\n              post_uid={post_uid}\n              post_owner_uid={currentPost[0]?.poster_uid}\n            />\n          </div>\n\n          <div className=\"comment--view-section--mobile\">\n            <CommentsView\n              mobile={true}\n              comments={thisPostComments || []}\n              likeUnlikeComment={likeUnlikeComment}\n              currentUserUid={currentUserUid}\n              deleteComment={deleteComment}\n              currentUsername={currentUsername}\n              getCommentLikers={getCommentLikers}\n              gettingCommentLikers={gettingCommentLikers}\n            />\n          </div>\n\n          <div\n            className=\"post--view--\"\n            style={!imageIsLoaded ? { display: \"none\" } : null}\n          >\n            <section>\n              <img\n                onLoad={() => setImageIsLoaded(true)}\n                src={currentPost[0]?.post_image}\n              />\n            </section>\n\n            <section>\n              <div className=\"top--section\">\n                <ul>\n                  <img\n                    className=\"lazy-image\"\n                    src={ProfilePicPlaceholder}\n                    onLoad={lazyLoadImage}\n                    data-src={currentPost[0].poster_profileimage}\n                    alt=\"post_user_image\"\n                  />\n                  <Link to={`/${currentPost[0]?.poster_username}`}>\n                    {currentPost[0]?.poster_username || \"rinku\"}\n                  </Link>\n                </ul>\n\n                <ul>\n                  <button onClick={() => toggleModal(setShowPostOptionsModal)}>\n                    <BiDotsHorizontal />\n                  </button>\n                </ul>\n              </div>\n\n              <div className=\"comment--view-section\">\n                <CommentsView\n                  comments={thisPostComments || []}\n                  likeUnlikeComment={likeUnlikeComment}\n                  currentUserUid={currentUserUid}\n                  deleteComment={deleteComment}\n                  currentUsername={currentUsername}\n                  getCommentLikers={getCommentLikers}\n                  gettingCommentLikers={gettingCommentLikers}\n                />\n              </div>\n\n              <div className=\"absolute--bottom\">\n                <div className=\"buttons\">\n                  <div className=\"buttons--section-one\">\n                    <button onClick={likeUnlikePost}>\n                      {haveILiked ? <Icons.LovedIcon /> : <Icons.LoveIcon />}\n                    </button>\n\n                    <button>\n                      <Icons.CommentIcon />\n                    </button>\n\n                    <button>\n                      <Icons.ShareIcon />\n                    </button>\n                  </div>\n\n                  <div>\n                    <button onClick={saveUnsavePost}>\n                      {haveISaved ? <Icons.SavedIcon /> : <Icons.SaveIcon />}\n                    </button>\n                  </div>\n                </div>\n\n                <div>\n                  <button onClick={getLikers}>\n                    {currentPost[0]?.post_likes_count || \"No\"}{\" \"}\n                    {currentPost[0]?.post_likes_count === 1 ? \"like\" : \"likes\"}\n                  </button>\n                </div>\n\n                <div className=\"date\">\n                  <p>{currentPost[0]?.post_posted_date}</p>\n                </div>\n\n                <CommentBox\n                  post_uid={post_uid}\n                  post_owner_uid={currentPost[0]?.poster_uid}\n                  toggleLoginNeededPrompt={() =>\n                    toggleModal(setShowLoginNeededPrompt)\n                  }\n                />\n              </div>\n            </section>\n          </div>\n        </Fragment>\n      )}\n\n      {showLoginNeededPrompt ? (\n        <Fragment>\n          <LoginNeededPrompt\n            toggle={() => toggleModal(setShowLoginNeededPrompt)}\n          />\n          <Backdrop\n            show={showLoginNeededPrompt}\n            toggle={() => toggleModal(setShowLoginNeededPrompt)}\n          />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.user.token,\n    userDataLoaded: state.user.user_data_loaded,\n    gettingCommentLikers: state.posts.getting_comment_likers,\n    loadingLikers: state.posts.loading_likers,\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    posts: state.posts.posts,\n    loading: state.posts.loading_post,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    ADD_MESSAGE: (message) => dispatch(PostsActions.ADD_MESSAGE(message)),\n    GET_COMMENT_LIKERS: (comment_uid, post_uid) =>\n      dispatch(PostsActions.GET_COMMENT_LIKERS(comment_uid, post_uid)),\n    DELETE_COMMENT: (comment_uid, post_uid) =>\n      dispatch(PostsActions.DELETE_COMMENT(comment_uid, post_uid)),\n    LIKE_COMMENT: (comment_uid, liker_uid, post_uid) =>\n      dispatch(PostsActions.LIKE_COMMENT(comment_uid, liker_uid, post_uid)),\n    UNLIKE_COMMENT: (comment_uid, unliker_uid, post_uid) =>\n      dispatch(PostsActions.UNLIKE_COMMENT(comment_uid, unliker_uid, post_uid)),\n    GET_COMMENTS: (post_uid, currentUserUid) =>\n      dispatch(PostsActions.GET_COMMENTS(post_uid, currentUserUid)),\n    DELETE_POST: (post_uid) => dispatch(PostsActions.DELETE_POST(post_uid)),\n    GET_LIKERS: (post_uid) => dispatch(PostsActions.GET_LIKERS(post_uid)),\n    SAVE_POST: (post_uid, saver_username) =>\n      dispatch(PostsActions.SAVE_POST(post_uid, saver_username)),\n    UNSAVE_POST: (post_uid, unsaver_username) =>\n      dispatch(PostsActions.UNSAVE_POST(post_uid, unsaver_username)),\n    LIKE_POST: (post_uid, liker_uid, post_owner_uid) =>\n      dispatch(PostsActions.LIKE_POST(post_uid, liker_uid, post_owner_uid)),\n    UNLIKE_POST: (post_uid, unliker_uid, post_owner_uid) =>\n      dispatch(PostsActions.UNLIKE_POST(post_uid, unliker_uid, post_owner_uid)),\n    LOAD_POST: (post_id, current_user_uid) =>\n      dispatch(PostsActions.GET_POST(post_id, current_user_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostView);\n","/home/rinku/codes/instaclone/client/src/pages/Loginpage.js",["261"],"import React, { useState } from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport * as userActions from \"../redux/user/userActions\";\nimport { connect } from \"react-redux\";\n\nconst Loginpage = ({ noFullPage, error, loading, currentUsername, LOGIN }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const login = (e) => {\n    e.preventDefault();\n    LOGIN(username, password);\n  };\n\n  return (\n    <div className={!noFullPage ? `auth--page full--page` : \"auth--page\"}>\n      <div>\n        <p>Instaclone</p>\n        <form onSubmit={login}>\n          <input\n            type=\"text\"\n            id=\"username\"\n            value={username}\n            placeholder=\"Username\"\n            onChange={(e) => setUsername(e.target.value)}\n            autoFocus\n          />\n\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            placeholder=\"Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n\n          <button type=\"submit\" disabled={loading}>\n            Login\n          </button>\n\n          <p style={{ color: \"red\" }}>{error}</p>\n        </form>\n      </div>\n\n      <div>\n        <p>Don't have an account yet?</p>\n        <NavLink to=\"/signup\">Signup</NavLink>\n      </div>\n\n      <div>\n        <FaGithub />\n        <a href=\"https://github.com/therealrinku/instaclone\" target=\"_blank\">\n          View on Github\n        </a>\n      </div>\n      {currentUsername ? <Redirect to=\"/\" /> : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    error: state.user.error,\n    loading: state.user.loading,\n    currentUsername: state.user.currentUserData.username,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    LOGIN: (username, password) =>\n      dispatch(userActions.LOGIN(username, password)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loginpage);\n","/home/rinku/codes/instaclone/client/src/pages/Profilepage.js",["262","263"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport ProfileSummary from \"../components/ProfileSummary\";\nimport Sidebar from \"../components/Sidebar\";\nimport MobileNavbar from \"../components/MobileNavbar\";\nimport * as profileActions from \"../redux/profile/ProfileActions\";\nimport { connect } from \"react-redux\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport ProfileOptModal from \"../components/ProfileOptModal\";\nimport Backdrop from \"../components/Backdrop\";\nimport UnfollowPrompt from \"../components/UnfollowPrompt\";\nimport ProfileButtonLine from \"../components/ProfileButtonLine\";\nimport PostsGrid from \"../components/PostsGrid\";\nimport UserListModal from \"../components/UserListModal\";\nimport Loader from \"../components/Loader\";\nimport * as userActions from \"../redux/user/userActions\";\nimport LoginNeededPrompt from \"../components/LoginNeededPrompt\";\n\nconst Profilepage = ({\n  history,\n  currentUserUid,\n  profiles,\n  GET_PROFILE_DATA,\n  currentUsername,\n  FOLLOW,\n  UNFOLLOW,\n  FETCH_FOLLOWERS,\n  FETCH_FOLLOWINGS,\n  loading,\n  loading_followers_or_following,\n  LOGOUT,\n}) => {\n  const profileUsername = history.location.pathname.slice(1);\n  const profileData = profiles.filter(\n    (profile) => profile?.username === profileUsername\n  );\n\n  //modal handlers\n  const [showProfileOptionsModal, setShowProfileOptionsModal] = useState(false);\n  const [showUnfollowPrompt, setShowUnfollowPrompt] = useState(false);\n  const [showFollowers, setShowFollowers] = useState(false);\n  const [showFollowings, setShowFollowings] = useState(false);\n  const [showLoginNeededPrompt, setShowLoginNeededPrompt] = useState(false);\n\n  //\n  const [showSavedPosts, setShowSavedPosts] = useState(false);\n\n  //followers and following list\n  const followersList = profiles.filter(\n    (profile) => profile.username === profileUsername\n  )[0]?.followers;\n  const followingList = profiles.filter(\n    (profile) => profile.username === profileUsername\n  )[0]?.followings;\n\n  const LOAD_FOLLOWERS = () => {\n    if (!followersList) {\n      FETCH_FOLLOWERS(profileUsername);\n    }\n    toggleModal(setShowFollowers);\n  };\n\n  const LOAD_FOLLOWINGS = () => {\n    if (!followingList) {\n      FETCH_FOLLOWINGS(profileUsername);\n    }\n    toggleModal(setShowFollowings);\n  };\n\n  const toggleModal = (setModal) => {\n    setModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  const Logout = () => {\n    toggleModal(setShowProfileOptionsModal);\n    LOGOUT();\n    history.push(\"/\");\n    localStorage.removeItem(\"token\");\n  };\n\n  const follow = () => {\n    if (currentUserUid) {\n      FOLLOW(profileData[0]?.uid, currentUserUid);\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  useEffect(() => {\n    document.body.style.overflow = \"auto\";\n    //set document title\n    document.title = `${profileUsername} at Instaclone`;\n    if (profileData.length <= 0) {\n      GET_PROFILE_DATA(profileUsername, currentUserUid);\n    }\n\n    return () => {\n      document.title = \"Instaclone\";\n    };\n  }, [profileUsername, currentUserUid]);\n\n  return (\n    <Fragment>\n      <Sidebar />\n      <MobileNavbar />\n      {loading ? (\n        <Loader />\n      ) : !loading && profileData.length < 1 ? (\n        <p\n          style={{ marginTop: \"100px\", textAlign: \"center\", fontSize: \"15px\" }}\n        >\n          This link is broken\n        </p>\n      ) : (\n        <div className=\"profile--page\">\n          <ProfileSummary\n            profileData={profileData[0] || []}\n            toggleProfileOptions={() => toggleModal(setShowProfileOptionsModal)}\n            toggleUnfollowPrompt={() => toggleModal(setShowUnfollowPrompt)}\n            isMyProfile={currentUsername === profileUsername}\n            FOLLOW={follow}\n            LOAD_FOLLOWERS={LOAD_FOLLOWERS}\n            LOAD_FOLLOWINGS={LOAD_FOLLOWINGS}\n          />\n          <ProfileButtonLine\n            showSavedPosts={showSavedPosts}\n            isMyProfile={currentUsername === profileUsername}\n            viewSavedPosts={() => setShowSavedPosts(true)}\n            hideSavedPosts={() => setShowSavedPosts(false)}\n            no_posts={profileData[0]?.posts.length <= 0}\n            no_saved_posts={profileData[0]?.savedPosts.length <= 0}\n          />\n\n          {(showSavedPosts && profileData[0].savedPosts.length > 0) ||\n          (!showSavedPosts && profileData[0].posts.length > 0) ? (\n            <PostsGrid\n              userPosts={\n                showSavedPosts\n                  ? profileData[0]?.savedPosts\n                  : profileData[0]?.posts || []\n              }\n            />\n          ) : (\n            <p\n              style={{\n                fontSize: \"14px\",\n                textAlign: \"center\",\n                marginTop: \"50px\",\n              }}\n            >\n              No any {showSavedPosts ? \"saved posts.\" : \"posts.\"}\n            </p>\n          )}\n\n          {showProfileOptionsModal ? (\n            <Fragment>\n              <ProfileOptModal\n                toggle={() => toggleModal(setShowProfileOptionsModal)}\n                isMyProfile={currentUsername === profileUsername}\n                LOGOUT={Logout}\n              />\n              <Backdrop\n                show={showProfileOptionsModal}\n                toggle={() => toggleModal(setShowProfileOptionsModal)}\n              />\n            </Fragment>\n          ) : null}\n\n          {showUnfollowPrompt ? (\n            <Fragment>\n              <Backdrop\n                show={showUnfollowPrompt}\n                toggle={() => toggleModal(setShowUnfollowPrompt)}\n              />\n              <UnfollowPrompt\n                profileUsername={profileUsername}\n                profileImage={profileData[0]?.profile_image_url}\n                toggle={() => toggleModal(setShowUnfollowPrompt)}\n                UNFOLLOW={() => UNFOLLOW(profileData[0].uid, currentUserUid)}\n              />\n            </Fragment>\n          ) : null}\n\n          {showFollowers || showFollowings ? (\n            <Fragment>\n              <Backdrop\n                toggle={() =>\n                  showFollowers\n                    ? toggleModal(setShowFollowers)\n                    : toggleModal(setShowFollowings)\n                }\n                show={showFollowers || showFollowings}\n              />\n              <UserListModal\n                title={showFollowers ? \"Followers\" : \"Following\"}\n                loading={loading_followers_or_following}\n                users={(showFollowers ? followersList : followingList) || []}\n                toggle={() =>\n                  showFollowers\n                    ? toggleModal(setShowFollowers)\n                    : toggleModal(setShowFollowings)\n                }\n              />\n            </Fragment>\n          ) : null}\n        </div>\n      )}\n\n      {showLoginNeededPrompt ? (\n        <Fragment>\n          <LoginNeededPrompt\n            profilePage={true}\n            toggle={() => toggleModal(setShowLoginNeededPrompt)}\n          />\n          <Backdrop\n            show={showLoginNeededPrompt}\n            toggle={() => toggleModal(setShowLoginNeededPrompt)}\n          />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.profile.loading,\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    profiles: state.profile.profiles,\n    loading: state.profile.loading,\n    loading_followers_or_following:\n      state.profile.loading_followers_or_following,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    LOGOUT: () => dispatch(userActions.LOGOUT()),\n    FETCH_FOLLOWERS: (username) =>\n      dispatch(profileActions.FETCH_FOLLOWERS(username)),\n    FETCH_FOLLOWINGS: (username) =>\n      dispatch(profileActions.FETCH_FOLLOWINGS(username)),\n    UNFOLLOW: (unfollowing_user_uid, unfollower_user_uid) =>\n      dispatch(\n        profileActions.UNFOLLOW(unfollowing_user_uid, unfollower_user_uid)\n      ),\n    FOLLOW: (following_user_uid, follower_user_uid) =>\n      dispatch(profileActions.FOLLOW(following_user_uid, follower_user_uid)),\n    GET_PROFILE_DATA: (profile_username, current_user_uid) =>\n      dispatch(\n        profileActions.GET_PROFILE_DATA(profile_username, current_user_uid)\n      ),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profilepage);\n","/home/rinku/codes/instaclone/client/src/pages/Signuppage.js",["264"],"import React, { useState } from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { NavLink } from \"react-router-dom\";\nimport { signupUser } from \"../services/authServices\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Signuppage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  const history = useHistory();\n\n  const SIGNUP = async (e) => {\n    e.preventDefault();\n\n    const trimmed = {\n      email: email.trim(),\n      username: username.trim(),\n      password: password.trim(),\n    };\n\n    if (\n      trimmed.email !== \"\" &&\n      trimmed.email.length >= 8 &&\n      trimmed.email.length <= 40 &&\n      trimmed.email.includes(\"@\") &&\n      trimmed.email.includes(\".com\")\n    ) {\n      if (\n        trimmed.username.length >= 5 &&\n        trimmed.username.length <= 25 &&\n        !trimmed.username.includes(\" \")\n      ) {\n        if (trimmed.password.length >= 8 && trimmed.password.length <= 30) {\n          const response = await signupUser(\n            email,\n            username.trim().toLowerCase(),\n            password\n          );\n          if (response !== \"success\") {\n            setError(response);\n          } else {\n            history.push(\"/login\");\n          }\n        } else {\n          setError(\"Password must be between 8 and 30 characters.\");\n        }\n      } else {\n        setError(\"Username must be spaceless between 5 and 25 characters.\");\n      }\n    } else {\n      setError(\"Please enter a valid email address.\");\n    }\n  };\n\n  return (\n    <div className=\"auth--page\">\n      <div>\n        <p>Instaclone</p>\n        <form onSubmit={SIGNUP}>\n          <input\n            type=\"email\"\n            value={email}\n            placeholder=\"Email\"\n            onChange={(e) => setEmail(e.target.value)}\n            autoFocus\n          />\n          <input\n            type=\"text\"\n            id=\"username\"\n            value={username.toLowerCase()}\n            placeholder=\"Username\"\n            onChange={(e) => setUsername(e.target.value)}\n          />\n\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            placeholder=\"Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n\n          <button type=\"submit\">Signup</button>\n          <p>By signing up, you agree to our terms and policies.</p>\n          <p style={{ color: \"red\" }}>{error}</p>\n        </form>\n      </div>\n\n      <div>\n        <p>Already have an account?</p>\n        <NavLink to=\"/login\">Login</NavLink>\n      </div>\n\n      <div>\n        <FaGithub />\n        <a href=\"https://github.com/therealrinku/instaclone\" target=\"_blank\">\n          View on Github\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Signuppage;\n","/home/rinku/codes/instaclone/client/src/pages/EditProfilePage.js",["265"],"import { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport MobileNavbar from \"../components/MobileNavbar\";\nimport Sidebar from \"../components/Sidebar\";\nimport { updateUserData, updateProfilePicture } from \"../services/userServices\";\nimport storage from \"../firebase/storage\";\nimport Compressor from \"compressorjs\";\nimport { Link } from \"react-router-dom\";\nimport * as postActions from \"../redux/post/postsActions\";\nimport * as userActions from \"../redux/user/userActions\";\n\nconst EditProfilePage = ({\n  currentUserProfileImage,\n  currentUserName,\n  currentUserUid,\n  currentUserBio,\n  currentUserEmail,\n  ADD_MESSAGE,\n  UPDATE_PROFILE_LOCALLY,\n}) => {\n  const [username, setUsername] = useState(currentUserName);\n  const [email, setEmail] = useState(currentUserEmail);\n  const [bio, setBio] = useState(currentUserBio);\n  const [updating, setUpdating] = useState(false);\n  const [updatingProfilePicture, setUpdatingProfilePicture] = useState(false);\n\n  //image file\n  const [selectedImage, setSelectedImage] = useState(null);\n  const newImage = selectedImage ? URL.createObjectURL(selectedImage) : null;\n\n  const updateImage = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      if (\n        file.name\n          .slice(file.name.slice(file.name.lastIndexOf(\".\")))\n          .includes(\"jpg\", \"png\", \"jpeg\")\n      ) {\n        setSelectedImage(e.target.files[0]);\n      } else {\n        ADD_MESSAGE(\"Image must be on jpg,png or jpeg format.\");\n      }\n    }\n\n    setTimeout(() => {\n      ADD_MESSAGE(null);\n    }, 3000);\n  };\n\n  const updateProfilePictureFinal = () => {\n    if (selectedImage && !updatingProfilePicture) {\n      setUpdatingProfilePicture(true);\n      new Compressor(selectedImage, {\n        quality: 0.6,\n        success(result) {\n          const uploadedImage = storage\n            .ref(`/profilePics/${currentUserUid}/${result.name}`)\n            .put(result);\n          uploadedImage.on(\n            \"state_changed\",\n            (snapshot) => {},\n            (err) => console.log(err),\n            () => {\n              storage\n                .ref(`/profilePics/${currentUserUid}`)\n                .child(result.name)\n                .getDownloadURL()\n                .then((url) => {\n                  updateProfilePicture(currentUserUid, url)\n                    .then((res) => {\n                      if (res === \"done\") {\n                        ADD_MESSAGE(\"Successfully updated the profile picture\");\n                      } else {\n                        ADD_MESSAGE(res);\n                      }\n                      setUpdating(false);\n                    })\n                    .catch((err) => ADD_MESSAGE(err.message));\n                });\n            }\n          );\n        },\n      });\n    }\n  };\n\n  const updateProfile = (e) => {\n    e.preventDefault();\n    setUpdating(true);\n\n    if (\n      username === currentUserName &&\n      email === currentUserEmail &&\n      bio === currentUserBio\n    ) {\n      ADD_MESSAGE(\"Nothing to Update.\");\n      setUpdating(false);\n    } else {\n      if (\n        !username.trim().includes(\" \") &&\n        username.trim().length >= 5 &&\n        username.trim().length <= 25\n      ) {\n        updateUserData(\n          username.trim().toLowerCase(),\n          email || \"\",\n          bio || \"\",\n          currentUserName\n        ).then((res) => {\n          if (res !== \"success\") {\n            ADD_MESSAGE(res);\n          } else {\n            ADD_MESSAGE(\"Successfully updated the profile.\");\n            UPDATE_PROFILE_LOCALLY({ bio, username, email });\n          }\n          setUpdating(false);\n        });\n      } else {\n        setUpdating(false);\n        ADD_MESSAGE(\"Username must be spaceless between 5 and 25 characters.\");\n      }\n    }\n\n    setTimeout(() => {\n      ADD_MESSAGE(null);\n    }, 3000);\n  };\n\n  return (\n    <div className=\"edit--profile-page\">\n      <Sidebar />\n      <MobileNavbar />\n\n      <section className=\"section-one\">\n        <img src={newImage || currentUserProfileImage} alt=\"profile-image\" />\n\n        <div>\n          <p>{currentUserName}</p>\n          <label htmlFor=\"image\" style={newImage ? { display: \"none\" } : null}>\n            Change Profile Photo\n          </label>\n          <label htmlFor=\"u-btn\" style={!newImage ? { display: \"none\" } : null}>\n            {updatingProfilePicture\n              ? \"Updating Profile Picture..\"\n              : \"Confirm New Profile Photo\"}\n          </label>\n          <button\n            style={{ display: \"none\" }}\n            id=\"u-btn\"\n            onClick={updateProfilePictureFinal}\n          >\n            Update Profile Photo\n          </button>\n          <input\n            type=\"file\"\n            style={{ display: \"none\" }}\n            id=\"image\"\n            onChange={updateImage}\n            accept=\"image/*\"\n          />\n        </div>\n      </section>\n\n      <section>\n        <form onSubmit={updateProfile}>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            type=\"text\"\n            value={username.toLowerCase()}\n            id=\"username\"\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"text\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n          <label htmlFor=\"Bio\">Bio</label>\n          <textarea type=\"text\" onChange={(e) => setBio(e.target.value)}>\n            {bio}\n          </textarea>\n\n          <button\n            disabled={updating}\n            className=\"submit-btn\"\n            onClick={updateProfile}\n          >\n            Submit\n          </button>\n          <Link to=\"/edit/password\">Change Password</Link>\n        </form>\n      </section>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUserEmail: state.user.currentUserData.email,\n    currentUserBio: state.user.currentUserData.bio,\n    currentUserProfileImage: state.user.currentUserData.profile_image_url,\n    currentUserName: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    UPDATE_PROFILE_LOCALLY: (data) =>\n      dispatch(userActions.UPDATE_PROFILE_LOCALLY(data)),\n    ADD_MESSAGE: (message) => dispatch(postActions.ADD_MESSAGE(message)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProfilePage);\n","/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userActions.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsActions.js",[],"/home/rinku/codes/instaclone/client/src/utilities/overflowToggler.js",[],"/home/rinku/codes/instaclone/client/src/components/Loader.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsReducer.js",[],"/home/rinku/codes/instaclone/client/src/components/PostsGrid.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userReducer.js",[],"/home/rinku/codes/instaclone/client/src/components/SearchView.js",[],"/home/rinku/codes/instaclone/client/src/components/MobileNavbar.js",["266"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport * as Icons from \"../Icons/CustomIcons\";\nimport { connect } from \"react-redux\";\nimport toggleOverflow from \"../utilities/overflowToggler\";\nimport AddPost from \"./AddPostModal\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport Activity from \"./Activity\";\nimport Backdrop from \"./Backdrop\";\nimport Badge from \"@material-ui/core/Badge\";\nimport firestore from \"../firebase/firestore\";\n\nconst MobileNavbar = ({\n  currentUsername,\n  currentUserProfileimage,\n  currentUserUid,\n}) => {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [showAddPost, setShowAddPost] = useState(false);\n  const [showActivity, setShowActivity] = useState(false);\n  const [notificationsCount, setNotificationsCount] = useState(0);\n\n  const history = useHistory();\n  const pathname = history.location.pathname;\n\n  useEffect(() => {\n    if (currentUserUid) {\n      firestore\n        .collection(currentUserUid)\n        .doc(\"notifications\")\n        .onSnapshot((doc) => {\n          const data = [];\n          for (let e in doc.data()) {\n            data.push(e);\n          }\n          setNotificationsCount(data.length);\n        });\n    }\n  }, []);\n\n  const toggleActivity = () => {\n    overflowToggler();\n    setShowActivity((prev) => !prev);\n  };\n\n  const toggleAddPostModal = () => {\n    toggleOverflow();\n    setShowAddPost((prev) => !prev);\n  };\n\n  const updateFile = (e) => {\n    if (e.target.files[0]) {\n      toggleAddPostModal();\n      setSelectedImage(e.target.files[0]);\n    }\n  };\n\n  return (\n    <Fragment>\n      <div\n        className=\"navbar--mobile\"\n        style={!currentUsername ? { display: \"none\" } : null}\n      >\n        {showAddPost ? (\n          <AddPost selectedImage={selectedImage} toggle={toggleAddPostModal} />\n        ) : null}\n\n        <Link to=\"/\">\n          {pathname === \"/\" ? <Icons.HomeActiveIcon /> : <Icons.HomeIcon />}\n        </Link>\n\n        <Link to=\"/explore\">\n          {pathname === \"/explore\" ? (\n            <Icons.ExploreActiveIconMobile />\n          ) : (\n            <Icons.SearchIcon />\n          )}\n        </Link>\n\n        <div>\n          <input\n            type=\"file\"\n            id=\"file_input\"\n            onChange={updateFile}\n            name=\"post\"\n          />\n          <label htmlFor=\"file_input\">\n            <Icons.NewPostIcon />\n          </label>\n        </div>\n\n        <button onClick={toggleActivity}>\n          <Badge badgeContent={notificationsCount} color=\"error\">\n            <Icons.ActivityIcon />\n          </Badge>\n        </button>\n\n        <Link to={`/${currentUsername}`}>\n          <img\n            src={currentUserProfileimage || \"https://bit.ly/3pc96tw\"}\n            style={\n              pathname === `/${currentUsername}`\n                ? {\n                    border: \"solid 1px black\",\n                    padding: \"2px\",\n                    width: \"20px\",\n                    height: \"20px\",\n                  }\n                : null\n            }\n            alt=\"profile_image\"\n          />\n        </Link>\n      </div>\n\n      {showActivity ? (\n        <Fragment>\n          <Backdrop show={showActivity} toggle={toggleActivity} />\n          <Activity\n            currentUserUid={currentUserUid}\n            toggle={toggleActivity}\n            clear={() => setNotificationsCount(0)}\n          />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUserUid: state.user.currentUserData.uid,\n    currentUsername: state.user.currentUserData.username,\n    currentUserProfileimage: state.user.currentUserData.profile_image_url,\n  };\n};\n\nexport default connect(mapStateToProps)(MobileNavbar);\n","/home/rinku/codes/instaclone/client/src/components/Recommended.js",[],"/home/rinku/codes/instaclone/client/src/components/Feed.js",[],"/home/rinku/codes/instaclone/client/src/components/PostOptModal.js",[],"/home/rinku/codes/instaclone/client/src/components/UserListModal.js",[],"/home/rinku/codes/instaclone/client/src/components/CommentBox.js",[],"/home/rinku/codes/instaclone/client/src/components/CommentsView.js",[],"/home/rinku/codes/instaclone/client/src/utilities/lazyLoadImage.js",[],"/home/rinku/codes/instaclone/client/src/components/LoginNeededPrompt.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileOptModal.js",[],"/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt.js",[],"/home/rinku/codes/instaclone/client/src/utilities/notificationPusher.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileButtonLine.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileSummary.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/profileReducer.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/ProfileActions.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/profileActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/Icons/CustomIcons.js",[],"/home/rinku/codes/instaclone/client/src/services/userServices.js",[],"/home/rinku/codes/instaclone/client/src/services/authServices.js",[],"/home/rinku/codes/instaclone/client/src/services/postsServices.js",[],"/home/rinku/codes/instaclone/client/src/services/commentServices.js",[],"/home/rinku/codes/instaclone/client/src/services/profileServices.js",[],"/home/rinku/codes/instaclone/client/src/firebase/storage.js",[],"/home/rinku/codes/instaclone/client/src/firebase/firestore.js",[],"/home/rinku/codes/instaclone/client/src/components/Post.js",["267"],"/home/rinku/codes/instaclone/client/src/components/Activity.js",["268"],"import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { VscClose } from \"react-icons/all\";\nimport clearNotification from \"../utilities/clearNotification\";\n\nconst Activity = ({ currentUserUid, toggle, clear }) => {\n  const history = useHistory();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    clearNotification(currentUserUid);\n    clear();\n\n    axios\n      .get(\n        `https://instacloone.herokuapp.com/user/getNotifications/${currentUserUid}`\n      )\n      .then((res) => {\n        setNotifications(res.data);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"notification-list\">\n      <div className=\"top\">\n        <p>Activity</p>\n        <button onClick={toggle}>\n          <VscClose />\n        </button>\n      </div>\n\n      <div className=\"notifications\">\n        {notifications.length > 0 ? (\n          notifications\n            .sort((a, b) => {\n              return new Date(b.date) - new Date(a.date);\n            })\n            .map((noti) => {\n              return (\n                <div\n                  className=\"notification\"\n                  style={loading ? { display: \"none\" } : { width: \"100%\" }}\n                  key={noti.uid}\n                  onClick={() =>\n                    noti.post_id !== null\n                      ? history.push(`/p/${noti.post_id}`)\n                      : noti.notification === \"follow\"\n                      ? history.push(`/${noti.username}`)\n                      : \"\"\n                  }\n                >\n                  <img\n                    src={noti.profile_image_url}\n                    alt=\"profile-pc\"\n                    className=\"profile-pic\"\n                  />\n                  <p>\n                    {noti.username}{\" \"}\n                    {noti.notification === \"like post\"\n                      ? \" liked your post.\"\n                      : noti.notification === \"like comment\"\n                      ? \" liked your comment.\"\n                      : noti.notification === \"comment added\"\n                      ? \" commented on your post.\"\n                      : noti.notification === \"follow\"\n                      ? \"started following you.\"\n                      : \"\"}\n                    <b style={{ color: \"grey\" }}>{noti.date}</b>\n                  </p>\n\n                  <img\n                    style={\n                      noti.post_image === null ? { display: \"none\" } : null\n                    }\n                    src={noti.post_image}\n                    alt=\"profile-pc\"\n                    className=\"post-img\"\n                  />\n                </div>\n              );\n            })\n        ) : (\n          <p\n            style={\n              loading\n                ? { display: \"none\" }\n                : { textAlign: \"center\", fontSize: \"14px\" }\n            }\n          >\n            No notifications\n          </p>\n        )}\n      </div>\n      <div\n        style={\n          !loading\n            ? { display: \"none\" }\n            : { textAlign: \"center\", fontSize: \"14px\" }\n        }\n      >\n        <p>Loading...</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Activity;\n","/home/rinku/codes/instaclone/client/src/components/Comment.js",["269"],"import { Fragment, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport Backdrop from \"./Backdrop\";\nimport UserListModal from \"./UserListModal\";\n\nconst Comment = ({\n  comments,\n  comment,\n  likeUnlikeComment,\n  currentUserUid,\n  currentUsername,\n  deleteComment,\n  getCommentLikers,\n  gettingCommentLikers,\n}) => {\n  const [showCommentLikers, setShowCommentLikers] = useState(false);\n  const commentLikers = comments.filter(\n    (cmt) => cmt.comment_uid === comment.comment_uid\n  )[0]?.likers;\n\n  const toggleModal = (setModal) => {\n    setModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  const loadCommentLikers = () => {\n    toggleModal(setShowCommentLikers);\n    if (!commentLikers) {\n      getCommentLikers(comment.comment_uid);\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className=\"comment\">\n        <img src={comment.poster_profile_image} alt=\"profile-image\" />\n\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <div>\n            <p className=\"username--comment\">\n              <NavLink to={`/${comment.poster_username}`}>\n                {comment.poster_username}\n              </NavLink>{\" \"}\n              {comment.comment}\n            </p>\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              marginTop: \"-15px\",\n            }}\n          >\n            <p>1h</p>\n            <button onClick={loadCommentLikers}>\n              {comment.comment_likes_count || 0}{\" \"}\n              {comment.comment_likes_count === 1 ? \"like\" : \"likes\"}\n            </button>\n            <button\n              onClick={() =>\n                likeUnlikeComment(\n                  comment.liked_by_me ? \"unlike\" : \"like\",\n                  comment.comment_uid\n                )\n              }\n            >\n              {comment.liked_by_me ? \"unlike\" : \"like\"}\n            </button>\n            <button\n              style={\n                currentUserUid === comment.post_owner_uid ||\n                currentUsername === comment.poster_username\n                  ? { color: \"red\" }\n                  : { display: \"none\" }\n              }\n              onClick={() => deleteComment(comment.comment_uid)}\n            >\n              delete\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {showCommentLikers ? (\n        <Fragment>\n          <UserListModal\n            title=\"Likes\"\n            loading={gettingCommentLikers}\n            toggle={() => toggleModal(setShowCommentLikers)}\n            users={commentLikers || []}\n          />\n          <Backdrop\n            show={showCommentLikers}\n            toggle={() => toggleModal(setShowCommentLikers)}\n          />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nexport default Comment;\n","/home/rinku/codes/instaclone/client/src/firebase/firebase.js",[],"/home/rinku/codes/instaclone/client/src/server_url.js",[],"/home/rinku/codes/instaclone/client/src/utilities/clearNotification.js",[],"/home/rinku/codes/instaclone/client/src/components/Sidebar.js",["270","271","272","273","274","275","276"],{"ruleId":"277","replacedBy":"278"},{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","severity":1,"message":"282","line":52,"column":6,"nodeType":"283","endLine":52,"endColumn":21,"suggestions":"284"},{"ruleId":"281","severity":1,"message":"285","line":58,"column":6,"nodeType":"283","endLine":58,"endColumn":13,"suggestions":"286"},{"ruleId":"287","severity":1,"message":"288","line":8,"column":8,"nodeType":"289","messageId":"290","endLine":8,"endColumn":18},{"ruleId":"281","severity":1,"message":"291","line":15,"column":6,"nodeType":"283","endLine":15,"endColumn":8,"suggestions":"292"},{"ruleId":"281","severity":1,"message":"293","line":27,"column":6,"nodeType":"283","endLine":27,"endColumn":34,"suggestions":"294"},{"ruleId":"287","severity":1,"message":"295","line":16,"column":10,"nodeType":"289","messageId":"290","endLine":16,"endColumn":23},{"ruleId":"287","severity":1,"message":"296","line":16,"column":25,"nodeType":"289","messageId":"290","endLine":16,"endColumn":41},{"ruleId":"281","severity":1,"message":"297","line":136,"column":6,"nodeType":"283","endLine":136,"endColumn":16,"suggestions":"298"},{"ruleId":"281","severity":1,"message":"299","line":147,"column":6,"nodeType":"283","endLine":147,"endColumn":38,"suggestions":"300"},{"ruleId":"301","severity":1,"message":"302","line":288,"column":15,"nodeType":"303","endLine":291,"endColumn":17},{"ruleId":"304","severity":1,"message":"305","line":53,"column":9,"nodeType":"303","messageId":"306","endLine":53,"endColumn":78,"fix":"307"},{"ruleId":"281","severity":1,"message":"308","line":100,"column":6,"nodeType":"283","endLine":100,"endColumn":39,"suggestions":"309"},{"ruleId":"310","severity":1,"message":"311","line":231,"column":5,"nodeType":"312","messageId":"313","endLine":231,"endColumn":12},{"ruleId":"304","severity":1,"message":"305","line":99,"column":9,"nodeType":"303","messageId":"306","endLine":99,"endColumn":78,"fix":"314"},{"ruleId":"315","severity":1,"message":"316","line":135,"column":9,"nodeType":"303","endLine":135,"endColumn":78},{"ruleId":"281","severity":1,"message":"317","line":39,"column":6,"nodeType":"283","endLine":39,"endColumn":8,"suggestions":"318"},{"ruleId":"287","severity":1,"message":"319","line":70,"column":9,"nodeType":"289","messageId":"290","endLine":70,"endColumn":18},{"ruleId":"281","severity":1,"message":"320","line":24,"column":6,"nodeType":"283","endLine":24,"endColumn":8,"suggestions":"321"},{"ruleId":"315","severity":1,"message":"316","line":37,"column":9,"nodeType":"303","endLine":37,"endColumn":71},{"ruleId":"287","severity":1,"message":"322","line":4,"column":8,"nodeType":"289","messageId":"290","endLine":4,"endColumn":16},{"ruleId":"287","severity":1,"message":"323","line":5,"column":8,"nodeType":"289","messageId":"290","endLine":5,"endColumn":16},{"ruleId":"287","severity":1,"message":"324","line":8,"column":10,"nodeType":"289","messageId":"290","endLine":8,"endColumn":17},{"ruleId":"287","severity":1,"message":"325","line":14,"column":10,"nodeType":"289","messageId":"290","endLine":14,"endColumn":22},{"ruleId":"287","severity":1,"message":"326","line":15,"column":10,"nodeType":"289","messageId":"290","endLine":15,"endColumn":28},{"ruleId":"281","severity":1,"message":"317","line":30,"column":6,"nodeType":"283","endLine":30,"endColumn":8,"suggestions":"327"},{"ruleId":"287","severity":1,"message":"328","line":32,"column":9,"nodeType":"289","messageId":"290","endLine":32,"endColumn":23},"no-native-reassign",["329"],"no-negated-in-lhs",["330"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ADD_MESSAGE' and 'feedLoaded'. Either include them or remove the dependency array. If 'ADD_MESSAGE' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["331"],"React Hook useEffect has a missing dependency: 'LOGIN_WITH_UID'. Either include it or remove the dependency array. If 'LOGIN_WITH_UID' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["332"],"no-unused-vars","'SearchView' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'explorePosts.length' and 'loadExplorePosts'. Either include them or remove the dependency array. If 'loadExplorePosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["333"],"React Hook useEffect has missing dependencies: 'GET_FEED', 'GET_RECOMMENDED_USERS', and 'feed.length'. Either include them or remove the dependency array. If 'GET_FEED' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["334"],"'deleteComment' is defined but never used.","'getCommentLikers' is defined but never used.","React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["335"],"React Hook useEffect has missing dependencies: 'LOAD_POST' and 'currentPost.length'. Either include them or remove the dependency array. If 'LOAD_POST' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["336"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"337","text":"338"},"React Hook useEffect has missing dependencies: 'GET_PROFILE_DATA' and 'profileData.length'. Either include them or remove the dependency array. If 'GET_PROFILE_DATA' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["339"],"no-dupe-keys","Duplicate key 'loading'.","ObjectExpression","unexpected",{"range":"340","text":"338"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has a missing dependency: 'currentUserUid'. Either include it or remove the dependency array.",["341"],"'getLikers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear' and 'currentUserUid'. Either include them or remove the dependency array. If 'clear' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["342"],"'Activity' is defined but never used.","'Backdrop' is defined but never used.","'FiUsers' is defined but never used.","'showActivity' is assigned a value but never used.","'notificationsCount' is assigned a value but never used.",["343"],"'toggleActivity' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},[1482,1482]," rel=\"noreferrer\"",{"desc":"356","fix":"357"},[2767,2767],{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"358","fix":"362"},"Update the dependencies array to be: [ADD_MESSAGE, feedLoaded, uploadingPost]",{"range":"363","text":"364"},"Update the dependencies array to be: [LOGIN_WITH_UID, token]",{"range":"365","text":"366"},"Update the dependencies array to be: [explorePosts.length, loadExplorePosts]",{"range":"367","text":"368"},"Update the dependencies array to be: [GET_FEED, GET_RECOMMENDED_USERS, currentUserUid, feed.length, feedLoaded]",{"range":"369","text":"370"},"Update the dependencies array to be: [getComments, post_uid]",{"range":"371","text":"372"},"Update the dependencies array to be: [token, currentUserUid, post_id, currentPost.length, LOAD_POST]",{"range":"373","text":"374"},"Update the dependencies array to be: [profileUsername, currentUserUid, profileData.length, GET_PROFILE_DATA]",{"range":"375","text":"376"},"Update the dependencies array to be: [currentUserUid]",{"range":"377","text":"378"},"Update the dependencies array to be: [clear, currentUserUid]",{"range":"379","text":"380"},{"range":"381","text":"378"},[1714,1729],"[ADD_MESSAGE, feedLoaded, uploadingPost]",[1810,1817],"[LOGIN_WITH_UID, token]",[559,561],"[explorePosts.length, loadExplorePosts]",[742,770],"[GET_FEED, GET_RECOMMENDED_USERS, currentUserUid, feed.length, feedLoaded]",[3762,3772],"[getComments, post_uid]",[4028,4060],"[token, currentUserUid, post_id, currentPost.length, LOAD_POST]",[3014,3047],"[profileUsername, currentUserUid, profileData.length, GET_PROFILE_DATA]",[1271,1273],"[currentUserUid]",[713,715],"[clear, currentUserUid]",[1107,1109]]