[{"/home/rinku/codes/instaclone/client/src/index.js":"1","/home/rinku/codes/instaclone/client/src/components/App.js":"2","/home/rinku/codes/instaclone/client/src/redux/store.js":"3","/home/rinku/codes/instaclone/client/src/components/PostButton.js":"4","/home/rinku/codes/instaclone/client/src/components/AddPostModal.js":"5","/home/rinku/codes/instaclone/client/src/components/Backdrop.js":"6","/home/rinku/codes/instaclone/client/src/components/MessageViewer.js":"7","/home/rinku/codes/instaclone/client/src/redux/rootReducer.js":"8","/home/rinku/codes/instaclone/client/src/pages/ExplorePage.js":"9","/home/rinku/codes/instaclone/client/src/pages/Homepage.js":"10","/home/rinku/codes/instaclone/client/src/pages/Landingpage.js":"11","/home/rinku/codes/instaclone/client/src/pages/PostView.js":"12","/home/rinku/codes/instaclone/client/src/pages/Loginpage.js":"13","/home/rinku/codes/instaclone/client/src/pages/Profilepage.js":"14","/home/rinku/codes/instaclone/client/src/pages/Signuppage.js":"15","/home/rinku/codes/instaclone/client/src/pages/EditProfilePage.js":"16","/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage.js":"17","/home/rinku/codes/instaclone/client/src/redux/user/userActions.js":"18","/home/rinku/codes/instaclone/client/src/redux/post/postsActions.js":"19","/home/rinku/codes/instaclone/client/src/utilities/overflowToggler.js":"20","/home/rinku/codes/instaclone/client/src/components/Loader.js":"21","/home/rinku/codes/instaclone/client/src/redux/post/postsReducer.js":"22","/home/rinku/codes/instaclone/client/src/components/PostsGrid.js":"23","/home/rinku/codes/instaclone/client/src/redux/user/userReducer.js":"24","/home/rinku/codes/instaclone/client/src/components/SearchView.js":"25","/home/rinku/codes/instaclone/client/src/components/Recommended.js":"26","/home/rinku/codes/instaclone/client/src/components/Feed.js":"27","/home/rinku/codes/instaclone/client/src/components/PostOptModal.js":"28","/home/rinku/codes/instaclone/client/src/components/UserListModal.js":"29","/home/rinku/codes/instaclone/client/src/components/CommentBox.js":"30","/home/rinku/codes/instaclone/client/src/components/CommentsView.js":"31","/home/rinku/codes/instaclone/client/src/utilities/lazyLoadImage.js":"32","/home/rinku/codes/instaclone/client/src/components/LoginNeededPrompt.js":"33","/home/rinku/codes/instaclone/client/src/components/ProfileOptModal.js":"34","/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt.js":"35","/home/rinku/codes/instaclone/client/src/utilities/notificationPusher.js":"36","/home/rinku/codes/instaclone/client/src/redux/post/postsActionTypes.js":"37","/home/rinku/codes/instaclone/client/src/components/ProfileButtonLine.js":"38","/home/rinku/codes/instaclone/client/src/components/ProfileSummary.js":"39","/home/rinku/codes/instaclone/client/src/redux/user/userActionTypes.js":"40","/home/rinku/codes/instaclone/client/src/redux/profile/profileReducer.js":"41","/home/rinku/codes/instaclone/client/src/redux/profile/ProfileActions.js":"42","/home/rinku/codes/instaclone/client/src/redux/profile/profileActionTypes.js":"43","/home/rinku/codes/instaclone/client/src/Icons/CustomIcons.js":"44","/home/rinku/codes/instaclone/client/src/services/userServices.js":"45","/home/rinku/codes/instaclone/client/src/services/authServices.js":"46","/home/rinku/codes/instaclone/client/src/services/postsServices.js":"47","/home/rinku/codes/instaclone/client/src/services/commentServices.js":"48","/home/rinku/codes/instaclone/client/src/services/profileServices.js":"49","/home/rinku/codes/instaclone/client/src/firebase/storage.js":"50","/home/rinku/codes/instaclone/client/src/firebase/firestore.js":"51","/home/rinku/codes/instaclone/client/src/components/Post.js":"52","/home/rinku/codes/instaclone/client/src/components/Activity.js":"53","/home/rinku/codes/instaclone/client/src/components/Comment.js":"54","/home/rinku/codes/instaclone/client/src/firebase/firebase.js":"55","/home/rinku/codes/instaclone/client/src/server_url.js":"56","/home/rinku/codes/instaclone/client/src/utilities/clearNotification.js":"57","/home/rinku/codes/instaclone/client/src/components/Sidebar.js":"58","/home/rinku/codes/instaclone/client/src/components/Topbar.js":"59","/home/rinku/codes/instaclone/client/src/components/Layout.js":"60"},{"size":358,"mtime":1625832904820,"results":"61","hashOfConfig":"62"},{"size":4094,"mtime":1625930936308,"results":"63","hashOfConfig":"62"},{"size":407,"mtime":1625733920243,"results":"64","hashOfConfig":"62"},{"size":895,"mtime":1625733920239,"results":"65","hashOfConfig":"62"},{"size":1863,"mtime":1625733920239,"results":"66","hashOfConfig":"62"},{"size":344,"mtime":1625848128594,"results":"67","hashOfConfig":"62"},{"size":163,"mtime":1625733920239,"results":"68","hashOfConfig":"62"},{"size":333,"mtime":1625733920243,"results":"69","hashOfConfig":"62"},{"size":988,"mtime":1625832728617,"results":"70","hashOfConfig":"62"},{"size":1187,"mtime":1625921651870,"results":"71","hashOfConfig":"62"},{"size":149,"mtime":1625733920243,"results":"72","hashOfConfig":"62"},{"size":5394,"mtime":1625915139883,"results":"73","hashOfConfig":"62"},{"size":2010,"mtime":1625733920243,"results":"74","hashOfConfig":"62"},{"size":7730,"mtime":1625977089076,"results":"75","hashOfConfig":"62"},{"size":2867,"mtime":1625733920243,"results":"76","hashOfConfig":"62"},{"size":5861,"mtime":1625832763416,"results":"77","hashOfConfig":"62"},{"size":2570,"mtime":1625832775831,"results":"78","hashOfConfig":"62"},{"size":2885,"mtime":1625733920243,"results":"79","hashOfConfig":"62"},{"size":8397,"mtime":1625733920243,"results":"80","hashOfConfig":"62"},{"size":222,"mtime":1625733920259,"results":"81","hashOfConfig":"62"},{"size":395,"mtime":1625733920239,"results":"82","hashOfConfig":"62"},{"size":8144,"mtime":1625976632370,"results":"83","hashOfConfig":"62"},{"size":928,"mtime":1625932727971,"results":"84","hashOfConfig":"62"},{"size":2142,"mtime":1625733920243,"results":"85","hashOfConfig":"62"},{"size":1938,"mtime":1625933169626,"results":"86","hashOfConfig":"62"},{"size":2513,"mtime":1625933064024,"results":"87","hashOfConfig":"62"},{"size":994,"mtime":1625921626593,"results":"88","hashOfConfig":"62"},{"size":2561,"mtime":1625922220461,"results":"89","hashOfConfig":"62"},{"size":1205,"mtime":1625933089686,"results":"90","hashOfConfig":"62"},{"size":2036,"mtime":1625733920239,"results":"91","hashOfConfig":"62"},{"size":966,"mtime":1625976469326,"results":"92","hashOfConfig":"62"},{"size":461,"mtime":1625733920259,"results":"93","hashOfConfig":"62"},{"size":590,"mtime":1625733920239,"results":"94","hashOfConfig":"62"},{"size":1246,"mtime":1625921908155,"results":"95","hashOfConfig":"62"},{"size":713,"mtime":1625821766154,"results":"96","hashOfConfig":"62"},{"size":307,"mtime":1625733920259,"results":"97","hashOfConfig":"62"},{"size":994,"mtime":1625733920243,"results":"98","hashOfConfig":"62"},{"size":759,"mtime":1625820342667,"results":"99","hashOfConfig":"62"},{"size":2588,"mtime":1625932683397,"results":"100","hashOfConfig":"62"},{"size":418,"mtime":1625733920243,"results":"101","hashOfConfig":"62"},{"size":2906,"mtime":1625733920243,"results":"102","hashOfConfig":"62"},{"size":2909,"mtime":1625733920243,"results":"103","hashOfConfig":"62"},{"size":472,"mtime":1625733920243,"results":"104","hashOfConfig":"62"},{"size":10091,"mtime":1625733920231,"results":"105","hashOfConfig":"62"},{"size":1847,"mtime":1625733920259,"results":"106","hashOfConfig":"62"},{"size":943,"mtime":1625733920259,"results":"107","hashOfConfig":"62"},{"size":3650,"mtime":1625733920259,"results":"108","hashOfConfig":"62"},{"size":1702,"mtime":1625733920259,"results":"109","hashOfConfig":"62"},{"size":2327,"mtime":1625733920259,"results":"110","hashOfConfig":"62"},{"size":124,"mtime":1625733920243,"results":"111","hashOfConfig":"62"},{"size":362,"mtime":1625733920243,"results":"112","hashOfConfig":"62"},{"size":8314,"mtime":1625932743666,"results":"113","hashOfConfig":"62"},{"size":3273,"mtime":1625733920239,"results":"114","hashOfConfig":"62"},{"size":4310,"mtime":1625975684398,"results":"115","hashOfConfig":"62"},{"size":438,"mtime":1625733920243,"results":"116","hashOfConfig":"62"},{"size":84,"mtime":1625733920247,"results":"117","hashOfConfig":"62"},{"size":194,"mtime":1625733920259,"results":"118","hashOfConfig":"62"},{"size":2398,"mtime":1625888085289,"results":"119","hashOfConfig":"62"},{"size":389,"mtime":1625760900281,"results":"120","hashOfConfig":"62"},{"size":507,"mtime":1625931491342,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"1o123u4",{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"124"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"124"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"124"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"124"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"153","usedDeprecatedRules":"124"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"158","usedDeprecatedRules":"124"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"124"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"124"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"239"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"124"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"/home/rinku/codes/instaclone/client/src/index.js",[],["255","256"],"/home/rinku/codes/instaclone/client/src/components/App.js",["257","258"],"import React, { useEffect, useState, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport ExplorePage from \"../pages/ExplorePage\";\nimport Homepage from \"../pages/Homepage\";\nimport PostView from \"../pages/PostView\";\nimport Profilepage from \"../pages/Profilepage\";\nimport Landingpage from \"../pages/Landingpage\";\nimport Loginpage from \"../pages/Loginpage\";\nimport Signuppage from \"../pages/Signuppage\";\nimport * as userActions from \"../redux/user/userActions\";\nimport * as postActions from \"../redux/post/postsActions\";\nimport { SiInstagram } from \"react-icons/all\";\nimport PostButton from \"../components/PostButton\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport AddPostModal from \"../components/AddPostModal\";\nimport Backdrop from \"../components/Backdrop\";\nimport EditProfilePage from \"../pages/EditProfilePage\";\nimport MessageViewer from \"./MessageViewer\";\nimport EditPasswordPage from \"../pages/EditPasswordPage\";\nimport Layout from \"./Layout\";\n\nconst App = ({\n  currentUsername,\n  uploadingPost,\n  LOGIN_WITH_UID,\n  token,\n  userDataLoaded,\n  feedLoaded,\n  ADD_MESSAGE,\n  message,\n}) => {\n  const [selectedImage, setSelectedImage] = useState(\"\");\n  const [showAddPostModal, setShowAddPostModal] = useState(false);\n  //msg\n\n  const toggleAddPostModal = () => {\n    setShowAddPostModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  useEffect(() => {\n    if (feedLoaded) {\n      if (uploadingPost) {\n        ADD_MESSAGE(\"Uploading your post. it may take couple of seconds.\");\n      } else {\n        ADD_MESSAGE(\"Successfully uploaded a post.\");\n        /* setTimeout(() => {\n          ADD_MESSAGE(null);\n        }, 3000);*/\n      }\n    }\n  }, [uploadingPost]);\n\n  useEffect(() => {\n    if (token) {\n      LOGIN_WITH_UID(token);\n    }\n  }, [token]);\n\n  return (\n    <BrowserRouter>\n      {token && !userDataLoaded ? (\n        <div\n          style={{\n            width: \"100vw\",\n            height: \"100vh\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            fontSize: \"45px\",\n            color: \"rgba(0,0,0,0.5)\",\n          }}\n        >\n          <SiInstagram />\n        </div>\n      ) : (\n        <Layout>\n          <Fragment>\n            {showAddPostModal ? (\n              <Fragment>\n                <Backdrop show={showAddPostModal} toggle={toggleAddPostModal} />\n                <AddPostModal toggle={toggleAddPostModal} selectedImage={selectedImage} />\n              </Fragment>\n            ) : null}\n\n            {message ? <MessageViewer message={message} /> : null}\n\n            <PostButton setSelectedImage={setSelectedImage} toggleAddPostModal={toggleAddPostModal} />\n\n            <Switch>\n              <Route path=\"/\" exact component={currentUsername ? Homepage : Landingpage} />\n              <Route path=\"/edit/profile\" exact component={EditProfilePage} />\n              <Route path=\"/login\" exact component={Loginpage} />\n              <Route path=\"/signup\" exact component={Signuppage} />\n              <Route path=\"/explore\" exact component={ExplorePage} />\n              <Route path=\"/:username\" exact component={Profilepage} />\n              <Route path=\"/p/:post_id\" exact component={PostView} />\n              <Route path=\"/edit/password\" exact component={EditPasswordPage} />\n            </Switch>\n          </Fragment>\n        </Layout>\n      )}\n    </BrowserRouter>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    message: state.posts.message,\n    feedLoaded: state.posts.feed_loaded,\n    uploadingPost: state.posts.uploadingPost,\n    userDataLoaded: state.user.user_data_loaded,\n    token: state.user.token,\n    currentUsername: state.user.currentUserData.username,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    ADD_MESSAGE: (message) => dispatch(postActions.ADD_MESSAGE(message)),\n    LOGIN_WITH_UID: (uid) => dispatch(userActions.LOGIN_WITH_UID(uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/home/rinku/codes/instaclone/client/src/redux/store.js",[],"/home/rinku/codes/instaclone/client/src/components/PostButton.js",[],"/home/rinku/codes/instaclone/client/src/components/AddPostModal.js",[],"/home/rinku/codes/instaclone/client/src/components/Backdrop.js",[],"/home/rinku/codes/instaclone/client/src/components/MessageViewer.js",[],"/home/rinku/codes/instaclone/client/src/redux/rootReducer.js",[],"/home/rinku/codes/instaclone/client/src/pages/ExplorePage.js",["259"],"import React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport PostsGrid from \"../components/PostsGrid\";\nimport * as PostsActions from \"../redux/post/postsActions\";\n\nconst ExplorePage = ({ loading, explorePosts, loadExplorePosts }) => {\n  useEffect(() => {\n    if (explorePosts.length <= 0) {\n      loadExplorePosts();\n    }\n  }, []);\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"explore--page\">\n          <PostsGrid userPosts={explorePosts} />\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.posts.loading_explore_posts,\n    explorePosts: state.posts.explore_posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    loadExplorePosts: () => dispatch(PostsActions.LOAD_EXPLORE_POSTS()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorePage);\n","/home/rinku/codes/instaclone/client/src/pages/Homepage.js",["260"],"import Feed from \"../components/Feed\";\nimport { connect } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport Loader from \"../components/Loader\";\nimport * as postsActions from \"../redux/post/postsActions\";\n\nconst Homepage = ({ currentUserUid, feed, GET_FEED, loading, feedLoaded }) => {\n  useEffect(() => {\n    if (!feedLoaded) {\n      GET_FEED(currentUserUid);\n    }\n  }, [currentUserUid, feedLoaded]);\n\n  return (\n    <div style={{ paddingBottom: \"30px\" }}>\n      {loading ? <Loader /> : null}\n      {feed.length > 0 && !loading ? <Feed feed={feed} /> : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    feedLoaded: state.posts.feed_loaded,\n    loading: state.posts.loading_feed,\n    feed: state.posts.posts.filter((post) => post.infeed === true),\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    currentUserProfileImage: state.user.currentUserData.profile_image_url,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    GET_FEED: (user_uid) => dispatch(postsActions.GET_FEED(user_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);\n","/home/rinku/codes/instaclone/client/src/pages/Landingpage.js",[],"/home/rinku/codes/instaclone/client/src/pages/PostView.js",["261","262"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport * as PostsActions from \"../redux/post/postsActions\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport Backdrop from \"../components/Backdrop\";\nimport CommentBox from \"../components/CommentBox\";\nimport CommentsView from \"../components/CommentsView\";\nimport LoginNeededPrompt from \"../components/LoginNeededPrompt\";\nimport Post from \"../components/Post\";\n\nconst PostView = ({\n  currentUsername,\n  currentUserUid,\n  posts,\n  match,\n  LOAD_POST,\n  loading,\n  loadingLikers,\n  GET_COMMENTS,\n  LIKE_COMMENT,\n  UNLIKE_COMMENT,\n  DELETE_COMMENT,\n  GET_COMMENT_LIKERS,\n  gettingCommentLikers,\n  token,\n}) => {\n  //modal\n  const [showLoginNeededPrompt, setShowLoginNeededPrompt] = useState(false);\n\n  const toggleModal = (setModal) => {\n    setModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  const post_id = match.params.post_id;\n  const currentPost = posts.filter((post) => post.post_id === post_id);\n  const thisPostComments = currentPost[0]?.comments;\n\n  const post_uid = currentPost[0]?.post_uid;\n  const haveILiked = currentPost[0]?.liked_by_me;\n  const haveISaved = currentPost[0]?.i_have_saved;\n\n  const getComments = () => {\n    if (!thisPostComments) {\n      GET_COMMENTS(post_uid, currentUserUid);\n    }\n  };\n\n  const likeUnlikeComment = (likeOrUnlike, comment_uid) => {\n    if (currentUserUid) {\n      if (likeOrUnlike === \"like\") {\n        LIKE_COMMENT(comment_uid, currentUserUid, post_uid);\n      } else {\n        UNLIKE_COMMENT(comment_uid, currentUserUid, post_uid);\n      }\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  const deleteComment = (comment_uid) => {\n    DELETE_COMMENT(comment_uid, post_uid);\n  };\n\n  const getCommentLikers = (comment_uid) => {\n    GET_COMMENT_LIKERS(comment_uid, post_uid);\n  };\n\n  useEffect(() => {\n    if (post_uid) {\n      getComments();\n    }\n  }, [post_uid]);\n\n  useEffect(() => {\n    document.body.style.overflow = \"auto\";\n    if (token) {\n      if (currentUserUid && currentPost.length < 1) {\n        LOAD_POST(post_id, currentUserUid);\n      }\n    } else {\n      LOAD_POST(post_id, currentUserUid);\n    }\n  }, [token, currentUserUid, post_id]);\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Loader />\n      ) : //checking if post exiists\n      !loading && !currentPost[0]?.post_image ? (\n        <p style={{ marginTop: \"100px\", textAlign: \"center\", fontSize: \"15px\" }}>\n          Post deleted or something went wrong!\n        </p>\n      ) : (\n        <Fragment>\n          <Post\n            post_commentsCount={currentPost[0].post_comments_count}\n            post_image={currentPost[0]?.post_image}\n            post_likesCount={currentPost[0]?.post_likes_count}\n            post_postedDate={currentPost[0]?.post_posted_date}\n            post_status={currentPost[0]?.post_status}\n            post_id={post_id}\n            post_owner_uid={currentPost[0]?.poster_uid}\n            post_uid={post_uid}\n            poster_profileImage={currentPost[0]?.poster_profileimage}\n            poster_username={currentPost[0].poster_username}\n            haveISaved={haveISaved}\n            haveILiked={haveILiked}\n            fullHeightImage={true}\n          />\n\n          <CommentBox post_uid={post_uid} post_owner_uid={currentPost[0]?.poster_uid} />\n\n          <CommentsView\n            mobile={true}\n            comments={thisPostComments || []}\n            likeUnlikeComment={likeUnlikeComment}\n            currentUserUid={currentUserUid}\n            deleteComment={deleteComment}\n            currentUsername={currentUsername}\n            getCommentLikers={getCommentLikers}\n            gettingCommentLikers={gettingCommentLikers}\n          />\n        </Fragment>\n      )}\n\n      {showLoginNeededPrompt ? (\n        <Fragment>\n          <LoginNeededPrompt toggle={() => toggleModal(setShowLoginNeededPrompt)} />\n          <Backdrop show={showLoginNeededPrompt} toggle={() => toggleModal(setShowLoginNeededPrompt)} />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.user.token,\n    userDataLoaded: state.user.user_data_loaded,\n    gettingCommentLikers: state.posts.getting_comment_likers,\n    loadingLikers: state.posts.loading_likers,\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    posts: state.posts.posts,\n    loading: state.posts.loading_post,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    GET_COMMENT_LIKERS: (comment_uid, post_uid) => dispatch(PostsActions.GET_COMMENT_LIKERS(comment_uid, post_uid)),\n    DELETE_COMMENT: (comment_uid, post_uid) => dispatch(PostsActions.DELETE_COMMENT(comment_uid, post_uid)),\n    LIKE_COMMENT: (comment_uid, liker_uid, post_uid) =>\n      dispatch(PostsActions.LIKE_COMMENT(comment_uid, liker_uid, post_uid)),\n    UNLIKE_COMMENT: (comment_uid, unliker_uid, post_uid) =>\n      dispatch(PostsActions.UNLIKE_COMMENT(comment_uid, unliker_uid, post_uid)),\n    GET_COMMENTS: (post_uid, currentUserUid) => dispatch(PostsActions.GET_COMMENTS(post_uid, currentUserUid)),\n    LOAD_POST: (post_id, current_user_uid) => dispatch(PostsActions.GET_POST(post_id, current_user_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostView);\n","/home/rinku/codes/instaclone/client/src/pages/Loginpage.js",["263"],"import React, { useState } from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport * as userActions from \"../redux/user/userActions\";\nimport { connect } from \"react-redux\";\n\nconst Loginpage = ({ noFullPage, error, loading, currentUsername, LOGIN }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const login = (e) => {\n    e.preventDefault();\n    LOGIN(username, password);\n  };\n\n  return (\n    <div className={!noFullPage ? `auth--page full--page` : \"auth--page\"}>\n      <div>\n        <p>Instaclone</p>\n        <form onSubmit={login}>\n          <input\n            type=\"text\"\n            id=\"username\"\n            value={username}\n            placeholder=\"Username\"\n            onChange={(e) => setUsername(e.target.value)}\n            autoFocus\n          />\n\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            placeholder=\"Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n\n          <button type=\"submit\" disabled={loading}>\n            Login\n          </button>\n\n          <p style={{ color: \"red\" }}>{error}</p>\n        </form>\n      </div>\n\n      <div>\n        <p>Don't have an account yet?</p>\n        <NavLink to=\"/signup\">Signup</NavLink>\n      </div>\n\n      <div>\n        <FaGithub />\n        <a href=\"https://github.com/therealrinku/instaclone\" target=\"_blank\">\n          View on Github\n        </a>\n      </div>\n      {currentUsername ? <Redirect to=\"/\" /> : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    error: state.user.error,\n    loading: state.user.loading,\n    currentUsername: state.user.currentUserData.username,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    LOGIN: (username, password) =>\n      dispatch(userActions.LOGIN(username, password)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loginpage);\n","/home/rinku/codes/instaclone/client/src/pages/Profilepage.js",["264","265"],"/home/rinku/codes/instaclone/client/src/pages/Signuppage.js",["266"],"import React, { useState } from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { NavLink } from \"react-router-dom\";\nimport { signupUser } from \"../services/authServices\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Signuppage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  const history = useHistory();\n\n  const SIGNUP = async (e) => {\n    e.preventDefault();\n\n    const trimmed = {\n      email: email.trim(),\n      username: username.trim(),\n      password: password.trim(),\n    };\n\n    if (\n      trimmed.email !== \"\" &&\n      trimmed.email.length >= 8 &&\n      trimmed.email.length <= 40 &&\n      trimmed.email.includes(\"@\") &&\n      trimmed.email.includes(\".com\")\n    ) {\n      if (\n        trimmed.username.length >= 5 &&\n        trimmed.username.length <= 25 &&\n        !trimmed.username.includes(\" \")\n      ) {\n        if (trimmed.password.length >= 8 && trimmed.password.length <= 30) {\n          const response = await signupUser(\n            email,\n            username.trim().toLowerCase(),\n            password\n          );\n          if (response !== \"success\") {\n            setError(response);\n          } else {\n            history.push(\"/login\");\n          }\n        } else {\n          setError(\"Password must be between 8 and 30 characters.\");\n        }\n      } else {\n        setError(\"Username must be spaceless between 5 and 25 characters.\");\n      }\n    } else {\n      setError(\"Please enter a valid email address.\");\n    }\n  };\n\n  return (\n    <div className=\"auth--page\">\n      <div>\n        <p>Instaclone</p>\n        <form onSubmit={SIGNUP}>\n          <input\n            type=\"email\"\n            value={email}\n            placeholder=\"Email\"\n            onChange={(e) => setEmail(e.target.value)}\n            autoFocus\n          />\n          <input\n            type=\"text\"\n            id=\"username\"\n            value={username.toLowerCase()}\n            placeholder=\"Username\"\n            onChange={(e) => setUsername(e.target.value)}\n          />\n\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            placeholder=\"Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n\n          <button type=\"submit\">Signup</button>\n          <p>By signing up, you agree to our terms and policies.</p>\n          <p style={{ color: \"red\" }}>{error}</p>\n        </form>\n      </div>\n\n      <div>\n        <p>Already have an account?</p>\n        <NavLink to=\"/login\">Login</NavLink>\n      </div>\n\n      <div>\n        <FaGithub />\n        <a href=\"https://github.com/therealrinku/instaclone\" target=\"_blank\">\n          View on Github\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Signuppage;\n","/home/rinku/codes/instaclone/client/src/pages/EditProfilePage.js",["267"],"import { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateUserData, updateProfilePicture } from \"../services/userServices\";\nimport storage from \"../firebase/storage\";\nimport Compressor from \"compressorjs\";\nimport { Link } from \"react-router-dom\";\nimport * as postActions from \"../redux/post/postsActions\";\nimport * as userActions from \"../redux/user/userActions\";\n\nconst EditProfilePage = ({\n  currentUserProfileImage,\n  currentUserName,\n  currentUserUid,\n  currentUserBio,\n  currentUserEmail,\n  ADD_MESSAGE,\n  UPDATE_PROFILE_LOCALLY,\n}) => {\n  const [username, setUsername] = useState(currentUserName);\n  const [email, setEmail] = useState(currentUserEmail);\n  const [bio, setBio] = useState(currentUserBio);\n  const [updating, setUpdating] = useState(false);\n  const [updatingProfilePicture, setUpdatingProfilePicture] = useState(false);\n\n  //image file\n  const [selectedImage, setSelectedImage] = useState(null);\n  const newImage = selectedImage ? URL.createObjectURL(selectedImage) : null;\n\n  const updateImage = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      if (file.name.slice(file.name.slice(file.name.lastIndexOf(\".\"))).includes(\"jpg\", \"png\", \"jpeg\")) {\n        setSelectedImage(e.target.files[0]);\n      } else {\n        ADD_MESSAGE(\"Image must be on jpg,png or jpeg format.\");\n      }\n    }\n\n    setTimeout(() => {\n      ADD_MESSAGE(null);\n    }, 3000);\n  };\n\n  const updateProfilePictureFinal = () => {\n    if (selectedImage && !updatingProfilePicture) {\n      setUpdatingProfilePicture(true);\n      new Compressor(selectedImage, {\n        quality: 0.6,\n        success(result) {\n          const uploadedImage = storage.ref(`/profilePics/${currentUserUid}/${result.name}`).put(result);\n          uploadedImage.on(\n            \"state_changed\",\n            (snapshot) => {},\n            (err) => console.log(err),\n            () => {\n              storage\n                .ref(`/profilePics/${currentUserUid}`)\n                .child(result.name)\n                .getDownloadURL()\n                .then((url) => {\n                  updateProfilePicture(currentUserUid, url)\n                    .then((res) => {\n                      if (res === \"done\") {\n                        ADD_MESSAGE(\"Successfully updated the profile picture\");\n                      } else {\n                        ADD_MESSAGE(res);\n                      }\n                      setUpdating(false);\n                    })\n                    .catch((err) => ADD_MESSAGE(err.message));\n                });\n            }\n          );\n        },\n      });\n    }\n  };\n\n  const updateProfile = (e) => {\n    e.preventDefault();\n    setUpdating(true);\n\n    if (username === currentUserName && email === currentUserEmail && bio === currentUserBio) {\n      ADD_MESSAGE(\"Nothing to Update.\");\n      setUpdating(false);\n    } else {\n      if (!username.trim().includes(\" \") && username.trim().length >= 5 && username.trim().length <= 25) {\n        updateUserData(username.trim().toLowerCase(), email || \"\", bio || \"\", currentUserName).then((res) => {\n          if (res !== \"success\") {\n            ADD_MESSAGE(res);\n          } else {\n            ADD_MESSAGE(\"Successfully updated the profile.\");\n            UPDATE_PROFILE_LOCALLY({ bio, username, email });\n          }\n          setUpdating(false);\n        });\n      } else {\n        setUpdating(false);\n        ADD_MESSAGE(\"Username must be spaceless between 5 and 25 characters.\");\n      }\n    }\n\n    setTimeout(() => {\n      ADD_MESSAGE(null);\n    }, 3000);\n  };\n\n  return (\n    <div className=\"edit--profile-page\">\n      <section className=\"section-one\">\n        <img src={newImage || currentUserProfileImage} alt=\"profile-image\" />\n\n        <div>\n          <p>{currentUserName}</p>\n          <label htmlFor=\"image\" style={newImage ? { display: \"none\" } : null}>\n            Change Profile Photo\n          </label>\n          <label htmlFor=\"u-btn\" style={!newImage ? { display: \"none\" } : null}>\n            {updatingProfilePicture ? \"Updating Profile Picture..\" : \"Confirm New Profile Photo\"}\n          </label>\n          <button style={{ display: \"none\" }} id=\"u-btn\" onClick={updateProfilePictureFinal}>\n            Update Profile Photo\n          </button>\n          <input type=\"file\" style={{ display: \"none\" }} id=\"image\" onChange={updateImage} accept=\"image/*\" />\n        </div>\n      </section>\n\n      <section>\n        <form onSubmit={updateProfile}>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            type=\"text\"\n            value={username.toLowerCase()}\n            id=\"username\"\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <label htmlFor=\"email\">Email</label>\n          <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n          <label htmlFor=\"Bio\">Bio</label>\n          <textarea type=\"text\" onChange={(e) => setBio(e.target.value)}>\n            {bio}\n          </textarea>\n\n          <button disabled={updating} className=\"submit-btn\" onClick={updateProfile}>\n            Submit\n          </button>\n          <Link to=\"/edit/password\">Change Password</Link>\n        </form>\n      </section>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUserEmail: state.user.currentUserData.email,\n    currentUserBio: state.user.currentUserData.bio,\n    currentUserProfileImage: state.user.currentUserData.profile_image_url,\n    currentUserName: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    UPDATE_PROFILE_LOCALLY: (data) => dispatch(userActions.UPDATE_PROFILE_LOCALLY(data)),\n    ADD_MESSAGE: (message) => dispatch(postActions.ADD_MESSAGE(message)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProfilePage);\n","/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userActions.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsActions.js",[],"/home/rinku/codes/instaclone/client/src/utilities/overflowToggler.js",[],"/home/rinku/codes/instaclone/client/src/components/Loader.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsReducer.js",[],"/home/rinku/codes/instaclone/client/src/components/PostsGrid.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userReducer.js",[],"/home/rinku/codes/instaclone/client/src/components/SearchView.js",[],"/home/rinku/codes/instaclone/client/src/components/Recommended.js",["268"],"import { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as userActions from \"../redux/user/userActions\";\nimport { useEffect } from \"react\";\nimport { FiUserPlus, FiUserMinus } from \"react-icons/all\";\nimport lazyLoadImage from \"../utilities/lazyLoadImage\";\nimport ProfilePicPlaceholder from \"../assets/avatar.jpg\";\n\nconst Recommended = ({ recommendedUsers, currentUserUid, FOLLOW, UNFOLLOW, GET_RECOMMENDED_USERS }) => {\n  useEffect(() => {\n    if (recommendedUsers.length < 1) {\n      GET_RECOMMENDED_USERS(currentUserUid);\n    }\n  }, [currentUserUid]);\n\n  return (\n    <div className=\"recommended\">\n      <p style={{ fontSize: \"15px\" }}>People you may like to follow</p>\n      {recommendedUsers.slice(3, 6).map((user) => {\n        return (\n          <div className=\"recommended--user\" key={user.username}>\n            <div>\n              <img\n                src={ProfilePicPlaceholder}\n                onLoad={lazyLoadImage}\n                data-src={user.profile_image_url || ProfilePicPlaceholder}\n                alt=\"profile_img\"\n                className=\"lazy-image\"\n              />\n              <NavLink to={`/${user.username}`}>{user.username}</NavLink>\n            </div>\n\n            <button\n              className=\"follow--button\"\n              onClick={() => FOLLOW(currentUserUid, user.uid)}\n              style={user.i_am_following ? { display: \"none\" } : null}\n            >\n              <FiUserPlus />\n              <p>Follow</p>\n            </button>\n            <button\n              className=\"unfollow--btn\"\n              style={!user.i_am_following ? { display: \"none\" } : { border: \"solid 1px tomato\" }}\n              onClick={() => UNFOLLOW(currentUserUid, user.uid)}\n            >\n              <FiUserMinus />\n              <p>Unfollow</p>\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUserUid: state.user.currentUserData.uid,\n    recommendedUsers: state.user.recommendedUsers,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    GET_RECOMMENDED_USERS: (uid) => dispatch(userActions.GET_RECOMMENDED(uid)),\n    FOLLOW: (follower_uid, following_uid) => dispatch(userActions.FOLLOW_RECOMMENDED(follower_uid, following_uid)),\n    UNFOLLOW: (unfollower_uid, unfollowing_uid) =>\n      dispatch(userActions.UNFOLLOW_RECOMMENDED(unfollower_uid, unfollowing_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Recommended);\n","/home/rinku/codes/instaclone/client/src/components/Feed.js",[],"/home/rinku/codes/instaclone/client/src/components/PostOptModal.js",[],"/home/rinku/codes/instaclone/client/src/components/UserListModal.js",[],"/home/rinku/codes/instaclone/client/src/components/CommentBox.js",[],"/home/rinku/codes/instaclone/client/src/components/CommentsView.js",[],"/home/rinku/codes/instaclone/client/src/utilities/lazyLoadImage.js",[],"/home/rinku/codes/instaclone/client/src/components/LoginNeededPrompt.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileOptModal.js",[],"/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt.js",[],"/home/rinku/codes/instaclone/client/src/utilities/notificationPusher.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileButtonLine.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileSummary.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/profileReducer.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/ProfileActions.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/profileActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/Icons/CustomIcons.js",[],["269","270"],"/home/rinku/codes/instaclone/client/src/services/userServices.js",[],"/home/rinku/codes/instaclone/client/src/services/authServices.js",[],"/home/rinku/codes/instaclone/client/src/services/postsServices.js",[],"/home/rinku/codes/instaclone/client/src/services/commentServices.js",[],"/home/rinku/codes/instaclone/client/src/services/profileServices.js",[],"/home/rinku/codes/instaclone/client/src/firebase/storage.js",[],"/home/rinku/codes/instaclone/client/src/firebase/firestore.js",[],"/home/rinku/codes/instaclone/client/src/components/Post.js",[],"/home/rinku/codes/instaclone/client/src/components/Activity.js",["271"],"import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { VscClose } from \"react-icons/all\";\nimport clearNotification from \"../utilities/clearNotification\";\n\nconst Activity = ({ currentUserUid, toggle, clear }) => {\n  const history = useHistory();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    clearNotification(currentUserUid);\n    clear();\n\n    axios\n      .get(\n        `https://instacloone.herokuapp.com/user/getNotifications/${currentUserUid}`\n      )\n      .then((res) => {\n        setNotifications(res.data);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"notification-list\">\n      <div className=\"top\">\n        <p>Activity</p>\n        <button onClick={toggle}>\n          <VscClose />\n        </button>\n      </div>\n\n      <div className=\"notifications\">\n        {notifications.length > 0 ? (\n          notifications\n            .sort((a, b) => {\n              return new Date(b.date) - new Date(a.date);\n            })\n            .map((noti) => {\n              return (\n                <div\n                  className=\"notification\"\n                  style={loading ? { display: \"none\" } : { width: \"100%\" }}\n                  key={noti.uid}\n                  onClick={() =>\n                    noti.post_id !== null\n                      ? history.push(`/p/${noti.post_id}`)\n                      : noti.notification === \"follow\"\n                      ? history.push(`/${noti.username}`)\n                      : \"\"\n                  }\n                >\n                  <img\n                    src={noti.profile_image_url}\n                    alt=\"profile-pc\"\n                    className=\"profile-pic\"\n                  />\n                  <p>\n                    {noti.username}{\" \"}\n                    {noti.notification === \"like post\"\n                      ? \" liked your post.\"\n                      : noti.notification === \"like comment\"\n                      ? \" liked your comment.\"\n                      : noti.notification === \"comment added\"\n                      ? \" commented on your post.\"\n                      : noti.notification === \"follow\"\n                      ? \"started following you.\"\n                      : \"\"}\n                    <b style={{ color: \"grey\" }}>{noti.date}</b>\n                  </p>\n\n                  <img\n                    style={\n                      noti.post_image === null ? { display: \"none\" } : null\n                    }\n                    src={noti.post_image}\n                    alt=\"profile-pc\"\n                    className=\"post-img\"\n                  />\n                </div>\n              );\n            })\n        ) : (\n          <p\n            style={\n              loading\n                ? { display: \"none\" }\n                : { textAlign: \"center\", fontSize: \"14px\" }\n            }\n          >\n            No notifications\n          </p>\n        )}\n      </div>\n      <div\n        style={\n          !loading\n            ? { display: \"none\" }\n            : { textAlign: \"center\", fontSize: \"14px\" }\n        }\n      >\n        <p>Loading...</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Activity;\n",["272","273"],"/home/rinku/codes/instaclone/client/src/components/Comment.js",["274"],"/home/rinku/codes/instaclone/client/src/firebase/firebase.js",[],"/home/rinku/codes/instaclone/client/src/server_url.js",[],"/home/rinku/codes/instaclone/client/src/utilities/clearNotification.js",[],"/home/rinku/codes/instaclone/client/src/components/Sidebar.js",["275","276","277","278","279"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport OverflowToggler from \"../utilities/overflowToggler\";\nimport firestore from \"../firebase/firestore\";\nimport { FiHome, FiBell, FiUser, FiSearch, FiUpload } from \"react-icons/fi\";\nimport { Tooltip } from \"@material-ui/core\";\n\nconst Sidebar = ({ currentUsername, currentUserProfileimage, currentUserUid, showSearchBarOnly }) => {\n  const history = useHistory();\n  const pathname = history.location.pathname;\n  const [showActivity, setShowActivity] = useState(false);\n  const [notificationsCount, setNotificationsCount] = useState(0);\n\n  useEffect(() => {\n    if (currentUserUid) {\n      firestore\n        .collection(currentUserUid)\n        .doc(\"notifications\")\n        .onSnapshot((doc) => {\n          const data = [];\n          for (let e in doc.data()) {\n            data.push(e);\n          }\n          setNotificationsCount(data.length);\n        });\n    }\n  }, []);\n\n  const toggleActivity = () => {\n    OverflowToggler();\n    setShowActivity((prev) => !prev);\n  };\n\n  const navButtons = [\n    { buttonIcon: <FiHome />, buttonTarget: \"/\", title: \"Home\" },\n    { buttonIcon: <FiUpload />, buttonTarget: `/newPost`, title: \"Add New Post\" },\n    { buttonIcon: <FiSearch />, buttonTarget: \"/explore\", title: \"Search\" },\n    { buttonIcon: <FiBell />, buttonTarget: \"/notifications\", title: \"Notifications\" },\n    { buttonIcon: <FiUser />, buttonTarget: `/${currentUsername}`, title: \"My Profile\" },\n  ];\n\n  return (\n    <nav className=\"sidebar\">\n      <div>\n        {navButtons.map((button, i) => {\n          return (\n            <Tooltip title={<p className=\"tooltipText\">{button.title}</p>} arrow key={i} placement=\"left\">\n              <button\n                onClick={() => history.push(button.buttonTarget)}\n                className={pathname === button.buttonTarget ? \"activeButton\" : null}\n              >\n                {button.buttonIcon}\n              </button>\n            </Tooltip>\n          );\n        })}\n      </div>\n    </nav>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUserUid: state.user.currentUserData.uid,\n    currentUsername: state.user.currentUserData.username,\n    currentUserProfileimage: state.user.currentUserData.profile_image_url,\n  };\n};\n\nexport default connect(mapStateToProps)(Sidebar);\n","/home/rinku/codes/instaclone/client/src/components/Topbar.js",[],"/home/rinku/codes/instaclone/client/src/components/Layout.js",[],{"ruleId":"280","replacedBy":"281"},{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","severity":1,"message":"285","line":53,"column":6,"nodeType":"286","endLine":53,"endColumn":21,"suggestions":"287"},{"ruleId":"284","severity":1,"message":"288","line":59,"column":6,"nodeType":"286","endLine":59,"endColumn":13,"suggestions":"289"},{"ruleId":"284","severity":1,"message":"290","line":12,"column":6,"nodeType":"286","endLine":12,"endColumn":8,"suggestions":"291"},{"ruleId":"284","severity":1,"message":"292","line":12,"column":6,"nodeType":"286","endLine":12,"endColumn":34,"suggestions":"293"},{"ruleId":"284","severity":1,"message":"294","line":74,"column":6,"nodeType":"286","endLine":74,"endColumn":16,"suggestions":"295"},{"ruleId":"284","severity":1,"message":"296","line":85,"column":6,"nodeType":"286","endLine":85,"endColumn":38,"suggestions":"297"},{"ruleId":"298","severity":1,"message":"299","line":53,"column":9,"nodeType":"300","messageId":"301","endLine":53,"endColumn":78,"fix":"302"},{"ruleId":"284","severity":1,"message":"303","line":92,"column":6,"nodeType":"286","endLine":92,"endColumn":39,"suggestions":"304"},{"ruleId":"305","severity":1,"message":"306","line":193,"column":5,"nodeType":"307","messageId":"308","endLine":193,"endColumn":12},{"ruleId":"298","severity":1,"message":"299","line":99,"column":9,"nodeType":"300","messageId":"301","endLine":99,"endColumn":78,"fix":"309"},{"ruleId":"310","severity":1,"message":"311","line":111,"column":9,"nodeType":"300","endLine":111,"endColumn":78},{"ruleId":"284","severity":1,"message":"312","line":14,"column":6,"nodeType":"286","endLine":14,"endColumn":22,"suggestions":"313"},{"ruleId":"280","replacedBy":"314"},{"ruleId":"282","replacedBy":"315"},{"ruleId":"284","severity":1,"message":"316","line":24,"column":6,"nodeType":"286","endLine":24,"endColumn":8,"suggestions":"317"},{"ruleId":"280","replacedBy":"318"},{"ruleId":"282","replacedBy":"319"},{"ruleId":"310","severity":1,"message":"311","line":72,"column":9,"nodeType":"300","endLine":72,"endColumn":71},{"ruleId":"320","severity":1,"message":"321","line":1,"column":17,"nodeType":"322","messageId":"323","endLine":1,"endColumn":25},{"ruleId":"320","severity":1,"message":"324","line":12,"column":10,"nodeType":"322","messageId":"323","endLine":12,"endColumn":22},{"ruleId":"320","severity":1,"message":"325","line":13,"column":10,"nodeType":"322","messageId":"323","endLine":13,"endColumn":28},{"ruleId":"284","severity":1,"message":"326","line":28,"column":6,"nodeType":"286","endLine":28,"endColumn":8,"suggestions":"327"},{"ruleId":"320","severity":1,"message":"328","line":30,"column":9,"nodeType":"322","messageId":"323","endLine":30,"endColumn":23},"no-native-reassign",["329"],"no-negated-in-lhs",["330"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ADD_MESSAGE' and 'feedLoaded'. Either include them or remove the dependency array. If 'ADD_MESSAGE' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["331"],"React Hook useEffect has a missing dependency: 'LOGIN_WITH_UID'. Either include it or remove the dependency array. If 'LOGIN_WITH_UID' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["332"],"React Hook useEffect has missing dependencies: 'explorePosts.length' and 'loadExplorePosts'. Either include them or remove the dependency array. If 'loadExplorePosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["333"],"React Hook useEffect has a missing dependency: 'GET_FEED'. Either include it or remove the dependency array. If 'GET_FEED' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["334"],"React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["335"],"React Hook useEffect has missing dependencies: 'LOAD_POST' and 'currentPost.length'. Either include them or remove the dependency array. If 'LOAD_POST' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["336"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"337","text":"338"},"React Hook useEffect has missing dependencies: 'GET_PROFILE_DATA' and 'profileData.length'. Either include them or remove the dependency array. If 'GET_PROFILE_DATA' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["339"],"no-dupe-keys","Duplicate key 'loading'.","ObjectExpression","unexpected",{"range":"340","text":"338"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has missing dependencies: 'GET_RECOMMENDED_USERS' and 'recommendedUsers.length'. Either include them or remove the dependency array. If 'GET_RECOMMENDED_USERS' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["341"],["329"],["330"],"React Hook useEffect has missing dependencies: 'clear' and 'currentUserUid'. Either include them or remove the dependency array. If 'clear' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["342"],["329"],["330"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'showActivity' is assigned a value but never used.","'notificationsCount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUserUid'. Either include it or remove the dependency array.",["343"],"'toggleActivity' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},[1482,1482]," rel=\"noreferrer\"",{"desc":"356","fix":"357"},[2767,2767],{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},"Update the dependencies array to be: [ADD_MESSAGE, feedLoaded, uploadingPost]",{"range":"364","text":"365"},"Update the dependencies array to be: [LOGIN_WITH_UID, token]",{"range":"366","text":"367"},"Update the dependencies array to be: [explorePosts.length, loadExplorePosts]",{"range":"368","text":"369"},"Update the dependencies array to be: [GET_FEED, currentUserUid, feedLoaded]",{"range":"370","text":"371"},"Update the dependencies array to be: [getComments, post_uid]",{"range":"372","text":"373"},"Update the dependencies array to be: [token, currentUserUid, post_id, currentPost.length, LOAD_POST]",{"range":"374","text":"375"},"Update the dependencies array to be: [profileUsername, currentUserUid, profileData.length, GET_PROFILE_DATA]",{"range":"376","text":"377"},"Update the dependencies array to be: [GET_RECOMMENDED_USERS, currentUserUid, recommendedUsers.length]",{"range":"378","text":"379"},"Update the dependencies array to be: [clear, currentUserUid]",{"range":"380","text":"381"},"Update the dependencies array to be: [currentUserUid]",{"range":"382","text":"383"},[1750,1765],"[ADD_MESSAGE, feedLoaded, uploadingPost]",[1846,1853],"[LOGIN_WITH_UID, token]",[408,410],"[explorePosts.length, loadExplorePosts]",[383,411],"[GET_FEED, currentUserUid, feedLoaded]",[1989,1999],"[getComments, post_uid]",[2255,2287],"[token, currentUserUid, post_id, currentPost.length, LOAD_POST]",[2889,2922],"[profileUsername, currentUserUid, profileData.length, GET_PROFILE_DATA]",[570,586],"[GET_RECOMMENDED_USERS, currentUserUid, recommendedUsers.length]",[713,715],"[clear, currentUserUid]",[1017,1019],"[currentUserUid]"]