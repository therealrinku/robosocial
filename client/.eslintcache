[{"/home/rinku/codes/instaclone/client/src/index.js":"1","/home/rinku/codes/instaclone/client/src/components/App.js":"2","/home/rinku/codes/instaclone/client/src/redux/store.js":"3","/home/rinku/codes/instaclone/client/src/components/PostButton.js":"4","/home/rinku/codes/instaclone/client/src/components/AddPostModal.js":"5","/home/rinku/codes/instaclone/client/src/components/Backdrop.js":"6","/home/rinku/codes/instaclone/client/src/components/MessageViewer.js":"7","/home/rinku/codes/instaclone/client/src/redux/rootReducer.js":"8","/home/rinku/codes/instaclone/client/src/pages/ExplorePage.js":"9","/home/rinku/codes/instaclone/client/src/pages/Homepage.js":"10","/home/rinku/codes/instaclone/client/src/pages/Landingpage.js":"11","/home/rinku/codes/instaclone/client/src/pages/PostView.js":"12","/home/rinku/codes/instaclone/client/src/pages/Loginpage.js":"13","/home/rinku/codes/instaclone/client/src/pages/Profilepage.js":"14","/home/rinku/codes/instaclone/client/src/pages/Signuppage.js":"15","/home/rinku/codes/instaclone/client/src/pages/EditProfilePage.js":"16","/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage.js":"17","/home/rinku/codes/instaclone/client/src/redux/user/userActions.js":"18","/home/rinku/codes/instaclone/client/src/redux/post/postsActions.js":"19","/home/rinku/codes/instaclone/client/src/utilities/overflowToggler.js":"20","/home/rinku/codes/instaclone/client/src/components/Loader.js":"21","/home/rinku/codes/instaclone/client/src/redux/post/postsReducer.js":"22","/home/rinku/codes/instaclone/client/src/components/PostsGrid.js":"23","/home/rinku/codes/instaclone/client/src/redux/user/userReducer.js":"24","/home/rinku/codes/instaclone/client/src/components/SearchView.js":"25","/home/rinku/codes/instaclone/client/src/components/Recommended.js":"26","/home/rinku/codes/instaclone/client/src/components/Feed.js":"27","/home/rinku/codes/instaclone/client/src/components/PostOptModal.js":"28","/home/rinku/codes/instaclone/client/src/components/UserListModal.js":"29","/home/rinku/codes/instaclone/client/src/components/CommentBox.js":"30","/home/rinku/codes/instaclone/client/src/components/CommentsView.js":"31","/home/rinku/codes/instaclone/client/src/utilities/lazyLoadImage.js":"32","/home/rinku/codes/instaclone/client/src/components/LoginNeededPrompt.js":"33","/home/rinku/codes/instaclone/client/src/components/ProfileOptModal.js":"34","/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt.js":"35","/home/rinku/codes/instaclone/client/src/utilities/notificationPusher.js":"36","/home/rinku/codes/instaclone/client/src/redux/post/postsActionTypes.js":"37","/home/rinku/codes/instaclone/client/src/components/ProfileButtonLine.js":"38","/home/rinku/codes/instaclone/client/src/components/ProfileSummary.js":"39","/home/rinku/codes/instaclone/client/src/redux/user/userActionTypes.js":"40","/home/rinku/codes/instaclone/client/src/redux/profile/profileReducer.js":"41","/home/rinku/codes/instaclone/client/src/redux/profile/ProfileActions.js":"42","/home/rinku/codes/instaclone/client/src/redux/profile/profileActionTypes.js":"43","/home/rinku/codes/instaclone/client/src/Icons/CustomIcons.js":"44","/home/rinku/codes/instaclone/client/src/services/userServices.js":"45","/home/rinku/codes/instaclone/client/src/services/authServices.js":"46","/home/rinku/codes/instaclone/client/src/services/postsServices.js":"47","/home/rinku/codes/instaclone/client/src/services/commentServices.js":"48","/home/rinku/codes/instaclone/client/src/services/profileServices.js":"49","/home/rinku/codes/instaclone/client/src/firebase/storage.js":"50","/home/rinku/codes/instaclone/client/src/firebase/firestore.js":"51","/home/rinku/codes/instaclone/client/src/components/Post.js":"52","/home/rinku/codes/instaclone/client/src/components/Activity.js":"53","/home/rinku/codes/instaclone/client/src/components/Comment.js":"54","/home/rinku/codes/instaclone/client/src/firebase/firebase.js":"55","/home/rinku/codes/instaclone/client/src/server_url.js":"56","/home/rinku/codes/instaclone/client/src/utilities/clearNotification.js":"57","/home/rinku/codes/instaclone/client/src/components/Sidebar.js":"58","/home/rinku/codes/instaclone/client/src/components/Topbar.js":"59","/home/rinku/codes/instaclone/client/src/components/Layout.js":"60"},{"size":358,"mtime":1625832904820,"results":"61","hashOfConfig":"62"},{"size":4120,"mtime":1625833023784,"results":"63","hashOfConfig":"62"},{"size":407,"mtime":1625733920243,"results":"64","hashOfConfig":"62"},{"size":895,"mtime":1625733920239,"results":"65","hashOfConfig":"62"},{"size":1863,"mtime":1625733920239,"results":"66","hashOfConfig":"62"},{"size":371,"mtime":1625733920239,"results":"67","hashOfConfig":"62"},{"size":163,"mtime":1625733920239,"results":"68","hashOfConfig":"62"},{"size":333,"mtime":1625733920243,"results":"69","hashOfConfig":"62"},{"size":988,"mtime":1625832728617,"results":"70","hashOfConfig":"62"},{"size":1174,"mtime":1625833479723,"results":"71","hashOfConfig":"62"},{"size":149,"mtime":1625733920243,"results":"72","hashOfConfig":"62"},{"size":12937,"mtime":1625832660856,"results":"73","hashOfConfig":"62"},{"size":2010,"mtime":1625733920243,"results":"74","hashOfConfig":"62"},{"size":7740,"mtime":1625832744300,"results":"75","hashOfConfig":"62"},{"size":2867,"mtime":1625733920243,"results":"76","hashOfConfig":"62"},{"size":5861,"mtime":1625832763416,"results":"77","hashOfConfig":"62"},{"size":2570,"mtime":1625832775831,"results":"78","hashOfConfig":"62"},{"size":2885,"mtime":1625733920243,"results":"79","hashOfConfig":"62"},{"size":8397,"mtime":1625733920243,"results":"80","hashOfConfig":"62"},{"size":222,"mtime":1625733920259,"results":"81","hashOfConfig":"62"},{"size":395,"mtime":1625733920239,"results":"82","hashOfConfig":"62"},{"size":8473,"mtime":1625733920243,"results":"83","hashOfConfig":"62"},{"size":908,"mtime":1625797014009,"results":"84","hashOfConfig":"62"},{"size":2142,"mtime":1625733920243,"results":"85","hashOfConfig":"62"},{"size":1521,"mtime":1625733920243,"results":"86","hashOfConfig":"62"},{"size":2189,"mtime":1625836776461,"results":"87","hashOfConfig":"62"},{"size":981,"mtime":1625733920239,"results":"88","hashOfConfig":"62"},{"size":2425,"mtime":1625762155955,"results":"89","hashOfConfig":"62"},{"size":778,"mtime":1625822956917,"results":"90","hashOfConfig":"62"},{"size":2036,"mtime":1625733920239,"results":"91","hashOfConfig":"62"},{"size":871,"mtime":1625733920239,"results":"92","hashOfConfig":"62"},{"size":461,"mtime":1625733920259,"results":"93","hashOfConfig":"62"},{"size":590,"mtime":1625733920239,"results":"94","hashOfConfig":"62"},{"size":1255,"mtime":1625818503042,"results":"95","hashOfConfig":"62"},{"size":713,"mtime":1625821766154,"results":"96","hashOfConfig":"62"},{"size":307,"mtime":1625733920259,"results":"97","hashOfConfig":"62"},{"size":994,"mtime":1625733920243,"results":"98","hashOfConfig":"62"},{"size":759,"mtime":1625820342667,"results":"99","hashOfConfig":"62"},{"size":2564,"mtime":1625835373450,"results":"100","hashOfConfig":"62"},{"size":418,"mtime":1625733920243,"results":"101","hashOfConfig":"62"},{"size":2906,"mtime":1625733920243,"results":"102","hashOfConfig":"62"},{"size":2909,"mtime":1625733920243,"results":"103","hashOfConfig":"62"},{"size":472,"mtime":1625733920243,"results":"104","hashOfConfig":"62"},{"size":10091,"mtime":1625733920231,"results":"105","hashOfConfig":"62"},{"size":1847,"mtime":1625733920259,"results":"106","hashOfConfig":"62"},{"size":943,"mtime":1625733920259,"results":"107","hashOfConfig":"62"},{"size":3650,"mtime":1625733920259,"results":"108","hashOfConfig":"62"},{"size":1702,"mtime":1625733920259,"results":"109","hashOfConfig":"62"},{"size":2327,"mtime":1625733920259,"results":"110","hashOfConfig":"62"},{"size":124,"mtime":1625733920243,"results":"111","hashOfConfig":"62"},{"size":362,"mtime":1625733920243,"results":"112","hashOfConfig":"62"},{"size":7563,"mtime":1625795538929,"results":"113","hashOfConfig":"62"},{"size":3273,"mtime":1625733920239,"results":"114","hashOfConfig":"62"},{"size":2874,"mtime":1625733920239,"results":"115","hashOfConfig":"62"},{"size":438,"mtime":1625733920243,"results":"116","hashOfConfig":"62"},{"size":84,"mtime":1625733920247,"results":"117","hashOfConfig":"62"},{"size":194,"mtime":1625733920259,"results":"118","hashOfConfig":"62"},{"size":2730,"mtime":1625833875219,"results":"119","hashOfConfig":"62"},{"size":389,"mtime":1625760900281,"results":"120","hashOfConfig":"62"},{"size":443,"mtime":1625834895783,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o123u4",{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"128"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"150","usedDeprecatedRules":"128"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"155","usedDeprecatedRules":"128"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"128"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"128"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"128"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"128"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rinku/codes/instaclone/client/src/index.js",[],"/home/rinku/codes/instaclone/client/src/components/App.js",["250","251","252"],"/home/rinku/codes/instaclone/client/src/redux/store.js",[],["253","254"],"/home/rinku/codes/instaclone/client/src/components/PostButton.js",[],"/home/rinku/codes/instaclone/client/src/components/AddPostModal.js",[],"/home/rinku/codes/instaclone/client/src/components/Backdrop.js",[],"/home/rinku/codes/instaclone/client/src/components/MessageViewer.js",[],"/home/rinku/codes/instaclone/client/src/redux/rootReducer.js",[],"/home/rinku/codes/instaclone/client/src/pages/ExplorePage.js",["255"],"/home/rinku/codes/instaclone/client/src/pages/Homepage.js",["256"],"/home/rinku/codes/instaclone/client/src/pages/Landingpage.js",[],"/home/rinku/codes/instaclone/client/src/pages/PostView.js",["257","258","259","260","261"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport { BiDotsHorizontal } from \"react-icons/bi\";\nimport { Link } from \"react-router-dom\";\nimport * as Icons from \"../Icons/CustomIcons\";\nimport * as PostsActions from \"../redux/post/postsActions\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport Backdrop from \"../components/Backdrop\";\nimport PostOptModal from \"../components/PostOptModal\";\nimport UsersListModal from \"../components/UserListModal\";\nimport CommentBox from \"../components/CommentBox\";\nimport CommentsView from \"../components/CommentsView\";\nimport { deleteComment, getCommentLikers } from \"../services/commentServices\";\nimport LoginNeededPrompt from \"../components/LoginNeededPrompt\";\nimport ProfilePicPlaceholder from \"../assets/avatar.jpg\";\nimport lazyLoadImage from \"../utilities/lazyLoadImage\";\n\nconst PostView = ({\n  currentUsername,\n  currentUserUid,\n  posts,\n  match,\n  history,\n  LOAD_POST,\n  loading,\n  LIKE_POST,\n  UNLIKE_POST,\n  SAVE_POST,\n  UNSAVE_POST,\n  GET_LIKERS,\n  loadingLikers,\n  DELETE_POST,\n  GET_COMMENTS,\n  LIKE_COMMENT,\n  UNLIKE_COMMENT,\n  DELETE_COMMENT,\n  GET_COMMENT_LIKERS,\n  gettingCommentLikers,\n  userDataLoaded,\n  ADD_MESSAGE,\n  token,\n}) => {\n  //modal\n  const [showPostOptionsModal, setShowPostOptionsModal] = useState(false);\n  const [showLikersModal, setShowLikersModal] = useState(false);\n  const [showLoginNeededPrompt, setShowLoginNeededPrompt] = useState(false);\n\n  //checking image is loaded\n  const [imageIsLoaded, setImageIsLoaded] = useState(false);\n\n  const toggleModal = (setModal) => {\n    setModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  const post_id = match.params.post_id;\n  const currentPost = posts.filter((post) => post.post_id === post_id);\n\n  const thisPostLikers = currentPost[0]?.post_likers;\n  const thisPostComments = currentPost[0]?.comments;\n\n  const post_uid = currentPost[0]?.post_uid;\n  const haveILiked = currentPost[0]?.liked_by_me;\n  const haveISaved = currentPost[0]?.i_have_saved;\n\n  const likeUnlikePost = () => {\n    if (currentUserUid) {\n      if (haveILiked) {\n        UNLIKE_POST(post_uid, currentUserUid, currentPost[0]?.poster_uid);\n      } else {\n        LIKE_POST(post_uid, currentUserUid, currentPost[0]?.poster_uid);\n      }\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  const saveUnsavePost = () => {\n    if (currentUserUid) {\n      if (haveISaved) {\n        UNSAVE_POST(post_uid, currentUsername);\n      } else {\n        SAVE_POST(post_uid, currentUsername);\n      }\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  const getLikers = () => {\n    toggleModal(setShowLikersModal);\n    if (!thisPostLikers) {\n      GET_LIKERS(post_uid);\n    }\n  };\n\n  const getComments = () => {\n    if (!thisPostComments) {\n      GET_COMMENTS(post_uid, currentUserUid);\n    }\n  };\n\n  const deletePost = () => {\n    toggleModal(setShowPostOptionsModal);\n    DELETE_POST(post_uid);\n    history.goBack();\n  };\n\n  const likeUnlikeComment = (likeOrUnlike, comment_uid) => {\n    if (currentUserUid) {\n      if (likeOrUnlike === \"like\") {\n        LIKE_COMMENT(comment_uid, currentUserUid, post_uid);\n      } else {\n        UNLIKE_COMMENT(comment_uid, currentUserUid, post_uid);\n      }\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  const deleteComment = (comment_uid) => {\n    DELETE_COMMENT(comment_uid, post_uid);\n  };\n\n  const getCommentLikers = (comment_uid) => {\n    GET_COMMENT_LIKERS(comment_uid, post_uid);\n  };\n\n  useEffect(() => {\n    if (post_uid) {\n      getComments();\n    }\n  }, [post_uid]);\n\n  useEffect(() => {\n    document.body.style.overflow = \"auto\";\n    if (token) {\n      if (currentUserUid && currentPost.length < 1) {\n        LOAD_POST(post_id, currentUserUid);\n      }\n    } else {\n      LOAD_POST(post_id, currentUserUid);\n    }\n  }, [token, currentUserUid, post_id]);\n\n  return (\n    <Fragment>\n      {showLikersModal ? (\n        <Fragment>\n          <UsersListModal\n            users={thisPostLikers || []}\n            title=\"Likers\"\n            toggle={() => toggleModal(setShowLikersModal)}\n            loading={loadingLikers}\n          />\n          <Backdrop show={showLikersModal} toggle={() => toggleModal(setShowLikersModal)} />\n        </Fragment>\n      ) : null}\n\n      {showPostOptionsModal ? (\n        <Fragment>\n          <Backdrop show={showPostOptionsModal} toggle={() => toggleModal(setShowPostOptionsModal)} />\n          <PostOptModal\n            isMyPost={currentPost[0].poster_username === currentUsername}\n            toggle={() => toggleModal(setShowPostOptionsModal)}\n            post_id={post_id}\n            deletePost={deletePost}\n            AddMessage={ADD_MESSAGE}\n          />\n        </Fragment>\n      ) : null}\n\n      {loading ? (\n        <Loader />\n      ) : //checking if post exiists\n      !loading && !currentPost[0]?.post_image ? (\n        <p style={{ marginTop: \"100px\", textAlign: \"center\", fontSize: \"15px\" }}>\n          Post deleted or something went wrong!\n        </p>\n      ) : (\n        <Fragment>\n          <div className=\"post--card post--card-mobile\">\n            <div>\n              <ul>\n                <img\n                  className=\"lazy-image\"\n                  src={ProfilePicPlaceholder}\n                  onLoad={lazyLoadImage}\n                  data-src={currentPost[0].poster_profileimage}\n                  alt=\"post_user_image\"\n                />\n                <Link to={`/${currentPost[0]?.poster_username}`}>{currentPost[0]?.poster_username}</Link>\n              </ul>\n\n              <ul>\n                <button onClick={() => toggleModal(setShowPostOptionsModal)}>\n                  <BiDotsHorizontal />\n                </button>\n              </ul>\n            </div>\n            a\n            <div>\n              <img src={currentPost[0]?.post_image} alt=\"post_main_img\" />\n            </div>\n            <div>\n              <div>\n                <button onClick={likeUnlikePost}>{haveILiked ? <Icons.LovedIcon /> : <Icons.LoveIcon />}</button>\n\n                <button onClick={() => history.push(`/p/${post_id}`)}>\n                  <Icons.CommentIcon />\n                </button>\n\n                <button>\n                  <Icons.ShareIcon />\n                </button>\n              </div>\n\n              <div>\n                <button onClick={saveUnsavePost}>{haveISaved ? <Icons.SavedIcon /> : <Icons.SaveIcon />}</button>\n              </div>\n            </div>\n            <div>\n              <p>{currentPost[0]?.post_status}</p>\n            </div>\n            <div>\n              <button onClick={getLikers}>\n                {currentPost[0]?.post_likes_count || \"No\"} {currentPost[0]?.post_likes_count === 1 ? \"like\" : \"likes\"}\n              </button>\n              <button onClick={() => history.push(`/p/${post_id}`)}>\n                {currentPost[0]?.post_comments_count}{\" \"}\n                {currentPost[0]?.post_comments_count === 1 ? \"comment\" : \"comments\"}\n              </button>\n            </div>\n            <div>\n              <p>{currentPost[0]?.post_posted_date}</p>\n            </div>\n            <CommentBox post_uid={post_uid} post_owner_uid={currentPost[0]?.poster_uid} />\n          </div>\n\n          <div className=\"comment--view-section--mobile\">\n            <CommentsView\n              mobile={true}\n              comments={thisPostComments || []}\n              likeUnlikeComment={likeUnlikeComment}\n              currentUserUid={currentUserUid}\n              deleteComment={deleteComment}\n              currentUsername={currentUsername}\n              getCommentLikers={getCommentLikers}\n              gettingCommentLikers={gettingCommentLikers}\n            />\n          </div>\n\n          <div className=\"post--view--\" style={!imageIsLoaded ? { display: \"none\" } : null}>\n            <section>\n              <img onLoad={() => setImageIsLoaded(true)} src={currentPost[0]?.post_image} />\n            </section>\n\n            <section>\n              <div className=\"top--section\">\n                <ul>\n                  <img\n                    className=\"lazy-image\"\n                    src={ProfilePicPlaceholder}\n                    onLoad={lazyLoadImage}\n                    data-src={currentPost[0].poster_profileimage}\n                    alt=\"post_user_image\"\n                  />\n                  <Link to={`/${currentPost[0]?.poster_username}`}>{currentPost[0]?.poster_username || \"rinku\"}</Link>\n                </ul>\n\n                <ul>\n                  <button onClick={() => toggleModal(setShowPostOptionsModal)}>\n                    <BiDotsHorizontal />\n                  </button>\n                </ul>\n              </div>\n\n              <div className=\"comment--view-section\">\n                <CommentsView\n                  comments={thisPostComments || []}\n                  likeUnlikeComment={likeUnlikeComment}\n                  currentUserUid={currentUserUid}\n                  deleteComment={deleteComment}\n                  currentUsername={currentUsername}\n                  getCommentLikers={getCommentLikers}\n                  gettingCommentLikers={gettingCommentLikers}\n                />\n              </div>\n\n              <div className=\"absolute--bottom\">\n                <div className=\"buttons\">\n                  <div className=\"buttons--section-one\">\n                    <button onClick={likeUnlikePost}>{haveILiked ? <Icons.LovedIcon /> : <Icons.LoveIcon />}</button>\n\n                    <button>\n                      <Icons.CommentIcon />\n                    </button>\n\n                    <button>\n                      <Icons.ShareIcon />\n                    </button>\n                  </div>\n\n                  <div>\n                    <button onClick={saveUnsavePost}>{haveISaved ? <Icons.SavedIcon /> : <Icons.SaveIcon />}</button>\n                  </div>\n                </div>\n\n                <div>\n                  <button onClick={getLikers}>\n                    {currentPost[0]?.post_likes_count || \"No\"}{\" \"}\n                    {currentPost[0]?.post_likes_count === 1 ? \"like\" : \"likes\"}\n                  </button>\n                </div>\n\n                <div className=\"date\">\n                  <p>{currentPost[0]?.post_posted_date}</p>\n                </div>\n\n                <CommentBox\n                  post_uid={post_uid}\n                  post_owner_uid={currentPost[0]?.poster_uid}\n                  toggleLoginNeededPrompt={() => toggleModal(setShowLoginNeededPrompt)}\n                />\n              </div>\n            </section>\n          </div>\n        </Fragment>\n      )}\n\n      {showLoginNeededPrompt ? (\n        <Fragment>\n          <LoginNeededPrompt toggle={() => toggleModal(setShowLoginNeededPrompt)} />\n          <Backdrop show={showLoginNeededPrompt} toggle={() => toggleModal(setShowLoginNeededPrompt)} />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.user.token,\n    userDataLoaded: state.user.user_data_loaded,\n    gettingCommentLikers: state.posts.getting_comment_likers,\n    loadingLikers: state.posts.loading_likers,\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    posts: state.posts.posts,\n    loading: state.posts.loading_post,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    ADD_MESSAGE: (message) => dispatch(PostsActions.ADD_MESSAGE(message)),\n    GET_COMMENT_LIKERS: (comment_uid, post_uid) => dispatch(PostsActions.GET_COMMENT_LIKERS(comment_uid, post_uid)),\n    DELETE_COMMENT: (comment_uid, post_uid) => dispatch(PostsActions.DELETE_COMMENT(comment_uid, post_uid)),\n    LIKE_COMMENT: (comment_uid, liker_uid, post_uid) =>\n      dispatch(PostsActions.LIKE_COMMENT(comment_uid, liker_uid, post_uid)),\n    UNLIKE_COMMENT: (comment_uid, unliker_uid, post_uid) =>\n      dispatch(PostsActions.UNLIKE_COMMENT(comment_uid, unliker_uid, post_uid)),\n    GET_COMMENTS: (post_uid, currentUserUid) => dispatch(PostsActions.GET_COMMENTS(post_uid, currentUserUid)),\n    DELETE_POST: (post_uid) => dispatch(PostsActions.DELETE_POST(post_uid)),\n    GET_LIKERS: (post_uid) => dispatch(PostsActions.GET_LIKERS(post_uid)),\n    SAVE_POST: (post_uid, saver_username) => dispatch(PostsActions.SAVE_POST(post_uid, saver_username)),\n    UNSAVE_POST: (post_uid, unsaver_username) => dispatch(PostsActions.UNSAVE_POST(post_uid, unsaver_username)),\n    LIKE_POST: (post_uid, liker_uid, post_owner_uid) =>\n      dispatch(PostsActions.LIKE_POST(post_uid, liker_uid, post_owner_uid)),\n    UNLIKE_POST: (post_uid, unliker_uid, post_owner_uid) =>\n      dispatch(PostsActions.UNLIKE_POST(post_uid, unliker_uid, post_owner_uid)),\n    LOAD_POST: (post_id, current_user_uid) => dispatch(PostsActions.GET_POST(post_id, current_user_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostView);\n","/home/rinku/codes/instaclone/client/src/pages/Loginpage.js",["262"],"import React, { useState } from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport * as userActions from \"../redux/user/userActions\";\nimport { connect } from \"react-redux\";\n\nconst Loginpage = ({ noFullPage, error, loading, currentUsername, LOGIN }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const login = (e) => {\n    e.preventDefault();\n    LOGIN(username, password);\n  };\n\n  return (\n    <div className={!noFullPage ? `auth--page full--page` : \"auth--page\"}>\n      <div>\n        <p>Instaclone</p>\n        <form onSubmit={login}>\n          <input\n            type=\"text\"\n            id=\"username\"\n            value={username}\n            placeholder=\"Username\"\n            onChange={(e) => setUsername(e.target.value)}\n            autoFocus\n          />\n\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            placeholder=\"Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n\n          <button type=\"submit\" disabled={loading}>\n            Login\n          </button>\n\n          <p style={{ color: \"red\" }}>{error}</p>\n        </form>\n      </div>\n\n      <div>\n        <p>Don't have an account yet?</p>\n        <NavLink to=\"/signup\">Signup</NavLink>\n      </div>\n\n      <div>\n        <FaGithub />\n        <a href=\"https://github.com/therealrinku/instaclone\" target=\"_blank\">\n          View on Github\n        </a>\n      </div>\n      {currentUsername ? <Redirect to=\"/\" /> : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    error: state.user.error,\n    loading: state.user.loading,\n    currentUsername: state.user.currentUserData.username,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    LOGIN: (username, password) =>\n      dispatch(userActions.LOGIN(username, password)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loginpage);\n","/home/rinku/codes/instaclone/client/src/pages/Profilepage.js",["263","264"],"/home/rinku/codes/instaclone/client/src/pages/Signuppage.js",["265"],"import React, { useState } from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { NavLink } from \"react-router-dom\";\nimport { signupUser } from \"../services/authServices\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Signuppage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  const history = useHistory();\n\n  const SIGNUP = async (e) => {\n    e.preventDefault();\n\n    const trimmed = {\n      email: email.trim(),\n      username: username.trim(),\n      password: password.trim(),\n    };\n\n    if (\n      trimmed.email !== \"\" &&\n      trimmed.email.length >= 8 &&\n      trimmed.email.length <= 40 &&\n      trimmed.email.includes(\"@\") &&\n      trimmed.email.includes(\".com\")\n    ) {\n      if (\n        trimmed.username.length >= 5 &&\n        trimmed.username.length <= 25 &&\n        !trimmed.username.includes(\" \")\n      ) {\n        if (trimmed.password.length >= 8 && trimmed.password.length <= 30) {\n          const response = await signupUser(\n            email,\n            username.trim().toLowerCase(),\n            password\n          );\n          if (response !== \"success\") {\n            setError(response);\n          } else {\n            history.push(\"/login\");\n          }\n        } else {\n          setError(\"Password must be between 8 and 30 characters.\");\n        }\n      } else {\n        setError(\"Username must be spaceless between 5 and 25 characters.\");\n      }\n    } else {\n      setError(\"Please enter a valid email address.\");\n    }\n  };\n\n  return (\n    <div className=\"auth--page\">\n      <div>\n        <p>Instaclone</p>\n        <form onSubmit={SIGNUP}>\n          <input\n            type=\"email\"\n            value={email}\n            placeholder=\"Email\"\n            onChange={(e) => setEmail(e.target.value)}\n            autoFocus\n          />\n          <input\n            type=\"text\"\n            id=\"username\"\n            value={username.toLowerCase()}\n            placeholder=\"Username\"\n            onChange={(e) => setUsername(e.target.value)}\n          />\n\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            placeholder=\"Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n\n          <button type=\"submit\">Signup</button>\n          <p>By signing up, you agree to our terms and policies.</p>\n          <p style={{ color: \"red\" }}>{error}</p>\n        </form>\n      </div>\n\n      <div>\n        <p>Already have an account?</p>\n        <NavLink to=\"/login\">Login</NavLink>\n      </div>\n\n      <div>\n        <FaGithub />\n        <a href=\"https://github.com/therealrinku/instaclone\" target=\"_blank\">\n          View on Github\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Signuppage;\n","/home/rinku/codes/instaclone/client/src/pages/EditProfilePage.js",["266"],"/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userActions.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsActions.js",[],"/home/rinku/codes/instaclone/client/src/utilities/overflowToggler.js",[],"/home/rinku/codes/instaclone/client/src/components/Loader.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsReducer.js",[],"/home/rinku/codes/instaclone/client/src/components/PostsGrid.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userReducer.js",[],"/home/rinku/codes/instaclone/client/src/components/SearchView.js",[],"/home/rinku/codes/instaclone/client/src/components/Recommended.js",["267"],"/home/rinku/codes/instaclone/client/src/components/Feed.js",[],"/home/rinku/codes/instaclone/client/src/components/PostOptModal.js",[],"/home/rinku/codes/instaclone/client/src/components/UserListModal.js",["268"],"import React from \"react\";\nimport { VscClose } from \"react-icons/vsc\";\nimport { NavLink } from \"react-router-dom\";\n\nconst UserListModal = ({ title, loading, toggle, users }) => {\n  return (\n    <div className=\"view--users-modal\">\n      <p className=\"title\">{title}</p>\n      {users.length > 0 ? (\n        users.map((user) => {\n          return (\n            <div key={new Date() * Math.random()} className=\"user\">\n              <img src={user.profile_image_url} alt=\"profile_img\" className=\"user-image\" />\n              <NavLink to={`/${user.username}`} onClick={toggle}>\n                {user.username}\n              </NavLink>\n            </div>\n          );\n        })\n      ) : (\n        <p>No any {title} atm.</p>\n      )}\n    </div>\n  );\n};\n\nexport default UserListModal;\n","/home/rinku/codes/instaclone/client/src/components/CommentBox.js",[],"/home/rinku/codes/instaclone/client/src/components/CommentsView.js",[],"/home/rinku/codes/instaclone/client/src/utilities/lazyLoadImage.js",[],"/home/rinku/codes/instaclone/client/src/components/LoginNeededPrompt.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileOptModal.js",[],"/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt.js",[],"/home/rinku/codes/instaclone/client/src/utilities/notificationPusher.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileButtonLine.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileSummary.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/profileReducer.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/ProfileActions.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/profileActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/Icons/CustomIcons.js",[],"/home/rinku/codes/instaclone/client/src/services/userServices.js",[],"/home/rinku/codes/instaclone/client/src/services/authServices.js",[],"/home/rinku/codes/instaclone/client/src/services/postsServices.js",[],"/home/rinku/codes/instaclone/client/src/services/commentServices.js",[],"/home/rinku/codes/instaclone/client/src/services/profileServices.js",[],"/home/rinku/codes/instaclone/client/src/firebase/storage.js",[],"/home/rinku/codes/instaclone/client/src/firebase/firestore.js",[],"/home/rinku/codes/instaclone/client/src/components/Post.js",["269"],"import { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport * as postsActions from \"../redux/post/postsActions\";\nimport { BiDotsHorizontal } from \"react-icons/all\";\nimport UserListModal from \"./UserListModal\";\nimport Backdrop from \"./Backdrop\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport PostOptModal from \"./PostOptModal\";\nimport placeholderImage from \"../assets/placeholder.jpg\";\nimport lazyLoadImage from \"../utilities/lazyLoadImage.js\";\nimport ProfilePicPlaceholder from \"../assets/avatar.jpg\";\nimport { FiThumbsUp, FiThumbsDown, FiMessageCircle, FiSave, FiShare2 } from \"react-icons/all\";\nimport { Tooltip } from \"@material-ui/core\";\nimport moment from \"moment\";\n\nconst Post = ({\n  post_commentsCount,\n  post_image,\n  post_likesCount,\n  post_postedDate,\n  post_status,\n  post_id,\n  post_owner_uid,\n  post_uid,\n  poster_profileImage,\n  poster_username,\n  haveISaved,\n  haveILiked,\n  currentUsername,\n  currentUserUid,\n  currentUserProfileimage,\n  LIKE_POST,\n  UNLIKE_POST,\n  UNSAVE_POST,\n  SAVE_POST,\n  GET_LIKERS,\n  feedPosts,\n  likersLoading,\n  DELETE_POST,\n  ADD_MESSAGE,\n}) => {\n  const thisPostLikers = feedPosts.filter((post) => post.post_uid === post_uid)[0].post_likers;\n  const [showLikers, setShowLikers] = useState(false);\n  const [showPostOptionsModal, setShowPostOptionsModal] = useState(false);\n\n  const history = useHistory();\n\n  const likeUnlikePost = () => {\n    if (haveILiked) {\n      UNLIKE_POST(post_uid, currentUserUid, post_owner_uid);\n    } else {\n      LIKE_POST(post_uid, currentUserUid, post_owner_uid);\n    }\n  };\n\n  const saveUnsavePost = () => {\n    if (haveISaved) {\n      UNSAVE_POST(post_uid, currentUsername);\n    } else {\n      SAVE_POST(post_uid, currentUsername);\n    }\n  };\n\n  const toggleModal = (setShowModal) => {\n    overflowToggler();\n    setShowModal((prev) => !prev);\n  };\n\n  const getLikers = () => {\n    toggleModal(setShowLikers);\n    if (!thisPostLikers) {\n      GET_LIKERS(post_uid);\n    }\n  };\n\n  const deletePost = () => {\n    toggleModal(setShowPostOptionsModal);\n    DELETE_POST(post_uid);\n  };\n\n  //formatted posted date\n  const formattedPostedDate = moment(post_postedDate).format(\"dddd, MMMM Do YYYY, h:mm a\");\n  //finding difference of date\n  const todaysDate = moment(new Date());\n  const secondsDifference = moment(todaysDate).diff(moment(post_postedDate), \"seconds\");\n  const minutesDifference = moment(todaysDate).diff(moment(post_postedDate), \"minutes\");\n  const hoursDifference = moment(todaysDate).diff(moment(post_postedDate), \"hours\");\n  const daysDifference = moment(todaysDate).diff(moment(post_postedDate), \"days\");\n  const weeksDifference = moment(todaysDate).diff(moment(post_postedDate), \"weeks\");\n  const monthsDifference = moment(todaysDate).diff(moment(post_postedDate), \"months\");\n  const yearsDifference = moment(todaysDate).diff(moment(post_postedDate), \"years\");\n\n  let differenceInDate;\n  console.log(monthsDifference);\n  if (yearsDifference >= 1) {\n    differenceInDate = yearsDifference + \"y\";\n  }\n  if (monthsDifference <= 11) {\n    differenceInDate = monthsDifference + \"mo\";\n  }\n  if (weeksDifference <= 3) {\n    differenceInDate = weeksDifference + \"w\";\n  }\n  if (daysDifference <= 7) {\n    differenceInDate = daysDifference + \"d\";\n  }\n  if (hoursDifference <= 23) {\n    differenceInDate = hoursDifference + \"h\";\n  }\n  if (minutesDifference <= 59 && minutesDifference >= 1) {\n    differenceInDate = minutesDifference + \"m\";\n  }\n  if (secondsDifference <= 59) {\n    differenceInDate = secondsDifference + \"s\";\n  }\n\n  return (\n    <Fragment>\n      <div className=\"post--card\">\n        <div className=\"top-div\">\n          <ul>\n            <img\n              data-src={poster_profileImage}\n              src={ProfilePicPlaceholder}\n              className=\"lazy-image\"\n              onLoad={lazyLoadImage}\n              alt=\"post_user_image\"\n            />\n            <Link to={`/${poster_username}`}>{poster_username}</Link>\n            <span style={{ marginLeft: \"5px\" }}>&middot;</span>\n            <Tooltip title={<span style={{ fontSize: \"14px\" }}>{formattedPostedDate}</span>}>\n              <p className=\"posted_date\">{differenceInDate}</p>\n            </Tooltip>\n          </ul>\n\n          <ul>\n            <button onClick={() => toggleModal(setShowPostOptionsModal)}>\n              <BiDotsHorizontal />\n            </button>\n          </ul>\n        </div>\n\n        <p className=\"status\">{post_status}</p>\n\n        <Link to={`/p/${post_id}`} className=\"image-div\">\n          <img\n            className=\"lazy-image\"\n            src={placeholderImage}\n            alt=\"post_main_img\"\n            data-src={post_image}\n            onLoad={lazyLoadImage}\n          />\n        </Link>\n\n        <div className=\"actions-div\">\n          <button onClick={likeUnlikePost} style={haveILiked ? { color: \"#229954\" } : null}>\n            <FiThumbsUp />\n            <p>{post_likesCount || \"\"}</p>\n          </button>\n\n          {/*non functional atm*/}\n          <button>\n            <FiThumbsDown />\n            <p></p>\n          </button>\n\n          <button onClick={() => history.push(`/p/${post_id}`)}>\n            <FiMessageCircle />\n            <p>{post_commentsCount || \"\"}</p>\n          </button>\n\n          <button>\n            <FiShare2 />\n          </button>\n\n          <button onClick={saveUnsavePost} style={haveISaved ? { color: \"#229954\" } : null}>\n            <FiSave />\n          </button>\n        </div>\n      </div>\n\n      {showLikers ? (\n        <Fragment>\n          <UserListModal\n            title=\"Likes\"\n            loading={likersLoading}\n            users={thisPostLikers || []}\n            toggle={() => toggleModal(setShowLikers)}\n          />\n          <Backdrop show={showLikers} toggle={() => toggleModal(setShowLikers)} />\n        </Fragment>\n      ) : null}\n\n      {showPostOptionsModal ? (\n        <Fragment>\n          <PostOptModal\n            toggle={() => toggleModal(setShowPostOptionsModal)}\n            isMyPost={poster_username === currentUsername}\n            post_uid={post_uid}\n            deletePost={deletePost}\n            post_id={post_id}\n            AddMessage={ADD_MESSAGE}\n          />\n          <Backdrop show={showPostOptionsModal} toggle={() => toggleModal(setShowPostOptionsModal)} />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    likersLoading: state.posts.loading_likers,\n    feedPosts: state.posts.posts.filter((post) => post.infeed === true),\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    currentUserProfileimage: state.user.currentUserData.profile_image_url,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    ADD_MESSAGE: (message) => dispatch(postsActions.ADD_MESSAGE(message)),\n    DELETE_POST: (post_uid) => dispatch(postsActions.DELETE_POST(post_uid)),\n    GET_LIKERS: (post_uid) => dispatch(postsActions.GET_LIKERS(post_uid)),\n    SAVE_POST: (post_uid, saver_username) => dispatch(postsActions.SAVE_POST(post_uid, saver_username)),\n    UNSAVE_POST: (post_uid, unsaver_username) => dispatch(postsActions.UNSAVE_POST(post_uid, unsaver_username)),\n    LIKE_POST: (post_uid, liker_uid, post_owner_uid) =>\n      dispatch(postsActions.LIKE_POST(post_uid, liker_uid, post_owner_uid)),\n    UNLIKE_POST: (post_uid, unliker_uid) => dispatch(postsActions.UNLIKE_POST(post_uid, unliker_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\n","/home/rinku/codes/instaclone/client/src/components/Activity.js",["270"],"import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { VscClose } from \"react-icons/all\";\nimport clearNotification from \"../utilities/clearNotification\";\n\nconst Activity = ({ currentUserUid, toggle, clear }) => {\n  const history = useHistory();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    clearNotification(currentUserUid);\n    clear();\n\n    axios\n      .get(\n        `https://instacloone.herokuapp.com/user/getNotifications/${currentUserUid}`\n      )\n      .then((res) => {\n        setNotifications(res.data);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"notification-list\">\n      <div className=\"top\">\n        <p>Activity</p>\n        <button onClick={toggle}>\n          <VscClose />\n        </button>\n      </div>\n\n      <div className=\"notifications\">\n        {notifications.length > 0 ? (\n          notifications\n            .sort((a, b) => {\n              return new Date(b.date) - new Date(a.date);\n            })\n            .map((noti) => {\n              return (\n                <div\n                  className=\"notification\"\n                  style={loading ? { display: \"none\" } : { width: \"100%\" }}\n                  key={noti.uid}\n                  onClick={() =>\n                    noti.post_id !== null\n                      ? history.push(`/p/${noti.post_id}`)\n                      : noti.notification === \"follow\"\n                      ? history.push(`/${noti.username}`)\n                      : \"\"\n                  }\n                >\n                  <img\n                    src={noti.profile_image_url}\n                    alt=\"profile-pc\"\n                    className=\"profile-pic\"\n                  />\n                  <p>\n                    {noti.username}{\" \"}\n                    {noti.notification === \"like post\"\n                      ? \" liked your post.\"\n                      : noti.notification === \"like comment\"\n                      ? \" liked your comment.\"\n                      : noti.notification === \"comment added\"\n                      ? \" commented on your post.\"\n                      : noti.notification === \"follow\"\n                      ? \"started following you.\"\n                      : \"\"}\n                    <b style={{ color: \"grey\" }}>{noti.date}</b>\n                  </p>\n\n                  <img\n                    style={\n                      noti.post_image === null ? { display: \"none\" } : null\n                    }\n                    src={noti.post_image}\n                    alt=\"profile-pc\"\n                    className=\"post-img\"\n                  />\n                </div>\n              );\n            })\n        ) : (\n          <p\n            style={\n              loading\n                ? { display: \"none\" }\n                : { textAlign: \"center\", fontSize: \"14px\" }\n            }\n          >\n            No notifications\n          </p>\n        )}\n      </div>\n      <div\n        style={\n          !loading\n            ? { display: \"none\" }\n            : { textAlign: \"center\", fontSize: \"14px\" }\n        }\n      >\n        <p>Loading...</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Activity;\n","/home/rinku/codes/instaclone/client/src/components/Comment.js",["271"],"import { Fragment, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport Backdrop from \"./Backdrop\";\nimport UserListModal from \"./UserListModal\";\n\nconst Comment = ({\n  comments,\n  comment,\n  likeUnlikeComment,\n  currentUserUid,\n  currentUsername,\n  deleteComment,\n  getCommentLikers,\n  gettingCommentLikers,\n}) => {\n  const [showCommentLikers, setShowCommentLikers] = useState(false);\n  const commentLikers = comments.filter(\n    (cmt) => cmt.comment_uid === comment.comment_uid\n  )[0]?.likers;\n\n  const toggleModal = (setModal) => {\n    setModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  const loadCommentLikers = () => {\n    toggleModal(setShowCommentLikers);\n    if (!commentLikers) {\n      getCommentLikers(comment.comment_uid);\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className=\"comment\">\n        <img src={comment.poster_profile_image} alt=\"profile-image\" />\n\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <div>\n            <p className=\"username--comment\">\n              <NavLink to={`/${comment.poster_username}`}>\n                {comment.poster_username}\n              </NavLink>{\" \"}\n              {comment.comment}\n            </p>\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              marginTop: \"-15px\",\n            }}\n          >\n            <p>1h</p>\n            <button onClick={loadCommentLikers}>\n              {comment.comment_likes_count || 0}{\" \"}\n              {comment.comment_likes_count === 1 ? \"like\" : \"likes\"}\n            </button>\n            <button\n              onClick={() =>\n                likeUnlikeComment(\n                  comment.liked_by_me ? \"unlike\" : \"like\",\n                  comment.comment_uid\n                )\n              }\n            >\n              {comment.liked_by_me ? \"unlike\" : \"like\"}\n            </button>\n            <button\n              style={\n                currentUserUid === comment.post_owner_uid ||\n                currentUsername === comment.poster_username\n                  ? { color: \"red\" }\n                  : { display: \"none\" }\n              }\n              onClick={() => deleteComment(comment.comment_uid)}\n            >\n              delete\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {showCommentLikers ? (\n        <Fragment>\n          <UserListModal\n            title=\"Likes\"\n            loading={gettingCommentLikers}\n            toggle={() => toggleModal(setShowCommentLikers)}\n            users={commentLikers || []}\n          />\n          <Backdrop\n            show={showCommentLikers}\n            toggle={() => toggleModal(setShowCommentLikers)}\n          />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nexport default Comment;\n","/home/rinku/codes/instaclone/client/src/firebase/firebase.js",[],"/home/rinku/codes/instaclone/client/src/server_url.js",[],"/home/rinku/codes/instaclone/client/src/utilities/clearNotification.js",[],"/home/rinku/codes/instaclone/client/src/components/Sidebar.js",["272","273","274","275"],"/home/rinku/codes/instaclone/client/src/components/Topbar.js",[],"/home/rinku/codes/instaclone/client/src/components/Layout.js",[],{"ruleId":"276","severity":1,"message":"277","line":21,"column":8,"nodeType":"278","messageId":"279","endLine":21,"endColumn":14},{"ruleId":"280","severity":1,"message":"281","line":54,"column":6,"nodeType":"282","endLine":54,"endColumn":21,"suggestions":"283"},{"ruleId":"280","severity":1,"message":"284","line":60,"column":6,"nodeType":"282","endLine":60,"endColumn":13,"suggestions":"285"},{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"280","severity":1,"message":"290","line":12,"column":6,"nodeType":"282","endLine":12,"endColumn":8,"suggestions":"291"},{"ruleId":"280","severity":1,"message":"292","line":12,"column":6,"nodeType":"282","endLine":12,"endColumn":34,"suggestions":"293"},{"ruleId":"276","severity":1,"message":"294","line":14,"column":10,"nodeType":"278","messageId":"279","endLine":14,"endColumn":23},{"ruleId":"276","severity":1,"message":"295","line":14,"column":25,"nodeType":"278","messageId":"279","endLine":14,"endColumn":41},{"ruleId":"280","severity":1,"message":"296","line":134,"column":6,"nodeType":"282","endLine":134,"endColumn":16,"suggestions":"297"},{"ruleId":"280","severity":1,"message":"298","line":145,"column":6,"nodeType":"282","endLine":145,"endColumn":38,"suggestions":"299"},{"ruleId":"300","severity":1,"message":"301","line":256,"column":15,"nodeType":"302","endLine":256,"endColumn":93},{"ruleId":"303","severity":1,"message":"304","line":53,"column":9,"nodeType":"302","messageId":"305","endLine":53,"endColumn":78,"fix":"306"},{"ruleId":"280","severity":1,"message":"307","line":92,"column":6,"nodeType":"282","endLine":92,"endColumn":39,"suggestions":"308"},{"ruleId":"309","severity":1,"message":"310","line":193,"column":5,"nodeType":"311","messageId":"312","endLine":193,"endColumn":12},{"ruleId":"303","severity":1,"message":"304","line":99,"column":9,"nodeType":"302","messageId":"305","endLine":99,"endColumn":78,"fix":"313"},{"ruleId":"314","severity":1,"message":"315","line":111,"column":9,"nodeType":"302","endLine":111,"endColumn":78},{"ruleId":"280","severity":1,"message":"316","line":12,"column":6,"nodeType":"282","endLine":12,"endColumn":22,"suggestions":"317"},{"ruleId":"276","severity":1,"message":"318","line":2,"column":10,"nodeType":"278","messageId":"279","endLine":2,"endColumn":18},{"ruleId":"276","severity":1,"message":"319","line":70,"column":9,"nodeType":"278","messageId":"279","endLine":70,"endColumn":18},{"ruleId":"280","severity":1,"message":"320","line":24,"column":6,"nodeType":"282","endLine":24,"endColumn":8,"suggestions":"321"},{"ruleId":"314","severity":1,"message":"315","line":37,"column":9,"nodeType":"302","endLine":37,"endColumn":71},{"ruleId":"276","severity":1,"message":"322","line":12,"column":10,"nodeType":"278","messageId":"279","endLine":12,"endColumn":22},{"ruleId":"276","severity":1,"message":"323","line":13,"column":10,"nodeType":"278","messageId":"279","endLine":13,"endColumn":28},{"ruleId":"280","severity":1,"message":"324","line":28,"column":6,"nodeType":"282","endLine":28,"endColumn":8,"suggestions":"325"},{"ruleId":"276","severity":1,"message":"326","line":30,"column":9,"nodeType":"278","messageId":"279","endLine":30,"endColumn":23},"no-unused-vars","'Topbar' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ADD_MESSAGE' and 'feedLoaded'. Either include them or remove the dependency array. If 'ADD_MESSAGE' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["327"],"React Hook useEffect has a missing dependency: 'LOGIN_WITH_UID'. Either include it or remove the dependency array. If 'LOGIN_WITH_UID' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["328"],"no-native-reassign",["329"],"no-negated-in-lhs",["330"],"React Hook useEffect has missing dependencies: 'explorePosts.length' and 'loadExplorePosts'. Either include them or remove the dependency array. If 'loadExplorePosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["331"],"React Hook useEffect has a missing dependency: 'GET_FEED'. Either include it or remove the dependency array. If 'GET_FEED' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["332"],"'deleteComment' is defined but never used.","'getCommentLikers' is defined but never used.","React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["333"],"React Hook useEffect has missing dependencies: 'LOAD_POST' and 'currentPost.length'. Either include them or remove the dependency array. If 'LOAD_POST' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["334"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"335","text":"336"},"React Hook useEffect has missing dependencies: 'GET_PROFILE_DATA' and 'profileData.length'. Either include them or remove the dependency array. If 'GET_PROFILE_DATA' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["337"],"no-dupe-keys","Duplicate key 'loading'.","ObjectExpression","unexpected",{"range":"338","text":"336"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has missing dependencies: 'GET_RECOMMENDED_USERS' and 'recommendedUsers.length'. Either include them or remove the dependency array. If 'GET_RECOMMENDED_USERS' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["339"],"'VscClose' is defined but never used.","'getLikers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear' and 'currentUserUid'. Either include them or remove the dependency array. If 'clear' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["340"],"'showActivity' is assigned a value but never used.","'notificationsCount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUserUid'. Either include it or remove the dependency array.",["341"],"'toggleActivity' is assigned a value but never used.",{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},"no-global-assign","no-unsafe-negation",{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},[1482,1482]," rel=\"noreferrer\"",{"desc":"354","fix":"355"},[2767,2767],{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},"Update the dependencies array to be: [ADD_MESSAGE, feedLoaded, uploadingPost]",{"range":"362","text":"363"},"Update the dependencies array to be: [LOGIN_WITH_UID, token]",{"range":"364","text":"365"},"Update the dependencies array to be: [explorePosts.length, loadExplorePosts]",{"range":"366","text":"367"},"Update the dependencies array to be: [GET_FEED, currentUserUid, feedLoaded]",{"range":"368","text":"369"},"Update the dependencies array to be: [getComments, post_uid]",{"range":"370","text":"371"},"Update the dependencies array to be: [token, currentUserUid, post_id, currentPost.length, LOAD_POST]",{"range":"372","text":"373"},"Update the dependencies array to be: [profileUsername, currentUserUid, profileData.length, GET_PROFILE_DATA]",{"range":"374","text":"375"},"Update the dependencies array to be: [GET_RECOMMENDED_USERS, currentUserUid, recommendedUsers.length]",{"range":"376","text":"377"},"Update the dependencies array to be: [clear, currentUserUid]",{"range":"378","text":"379"},"Update the dependencies array to be: [currentUserUid]",{"range":"380","text":"381"},[1776,1791],"[ADD_MESSAGE, feedLoaded, uploadingPost]",[1872,1879],"[LOGIN_WITH_UID, token]",[408,410],"[explorePosts.length, loadExplorePosts]",[383,411],"[GET_FEED, currentUserUid, feedLoaded]",[3662,3672],"[getComments, post_uid]",[3928,3960],"[token, currentUserUid, post_id, currentPost.length, LOAD_POST]",[2890,2923],"[profileUsername, currentUserUid, profileData.length, GET_PROFILE_DATA]",[456,472],"[GET_RECOMMENDED_USERS, currentUserUid, recommendedUsers.length]",[713,715],"[clear, currentUserUid]",[1017,1019],"[currentUserUid]"]