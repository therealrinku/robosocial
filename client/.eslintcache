[{"/home/rinku/codes/instaclone/client/src/redux/store.js":"1","/home/rinku/codes/instaclone/client/src/redux/rootReducer.js":"2","/home/rinku/codes/instaclone/client/src/redux/post/postsActions.js":"3","/home/rinku/codes/instaclone/client/src/redux/user/userActions.js":"4","/home/rinku/codes/instaclone/client/src/utilities/overflowToggler.js":"5","/home/rinku/codes/instaclone/client/src/redux/post/postsReducer.js":"6","/home/rinku/codes/instaclone/client/src/redux/user/userReducer.js":"7","/home/rinku/codes/instaclone/client/src/utilities/lazyLoadImage.js":"8","/home/rinku/codes/instaclone/client/src/redux/profile/profileReducer.js":"9","/home/rinku/codes/instaclone/client/src/utilities/notificationPusher.js":"10","/home/rinku/codes/instaclone/client/src/redux/user/userActionTypes.js":"11","/home/rinku/codes/instaclone/client/src/redux/post/postsActionTypes.js":"12","/home/rinku/codes/instaclone/client/src/redux/profile/profileActionTypes.js":"13","/home/rinku/codes/instaclone/client/src/services/commentServices.js":"14","/home/rinku/codes/instaclone/client/src/services/userServices.js":"15","/home/rinku/codes/instaclone/client/src/services/authServices.js":"16","/home/rinku/codes/instaclone/client/src/services/postsServices.js":"17","/home/rinku/codes/instaclone/client/src/services/profileServices.js":"18","/home/rinku/codes/instaclone/client/src/firebase/storage.js":"19","/home/rinku/codes/instaclone/client/src/redux/profile/ProfileActions.js":"20","/home/rinku/codes/instaclone/client/src/Icons/CustomIcons.js":"21","/home/rinku/codes/instaclone/client/src/firebase/firestore.js":"22","/home/rinku/codes/instaclone/client/src/firebase/firebase.js":"23","/home/rinku/codes/instaclone/client/src/utilities/clearNotification.js":"24","/home/rinku/codes/instaclone/client/src/pages/LandingPage/LandingPage.tsx":"25","/home/rinku/codes/instaclone/client/src/pages/LandingPage/index.ts":"26","/home/rinku/codes/instaclone/client/src/components/Logo/index.ts":"27","/home/rinku/codes/instaclone/client/src/components/Logo/Logo.tsx":"28","/home/rinku/codes/instaclone/client/src/components/Form/index.ts":"29","/home/rinku/codes/instaclone/client/src/components/Form/Form.tsx":"30","/home/rinku/codes/instaclone/client/src/pages/RegisterPage/index.ts":"31","/home/rinku/codes/instaclone/client/src/utilities/formValidator.ts":"32","/home/rinku/codes/instaclone/client/src/pages/RegisterPage/RegisterPage.tsx":"33","/home/rinku/codes/instaclone/client/src/pages/LoginPage/index.ts":"34","/home/rinku/codes/instaclone/client/src/pages/LoginPage/LoginPage.tsx":"35","/home/rinku/codes/instaclone/client/src/components/Navbar/index.ts":"36","/home/rinku/codes/instaclone/client/src/components/Navbar/Navbar.tsx":"37","/home/rinku/codes/instaclone/client/src/components/Loader/index.ts":"38","/home/rinku/codes/instaclone/client/src/components/Loader/Loader.tsx":"39","/home/rinku/codes/instaclone/client/src/components/Layout/index.ts":"40","/home/rinku/codes/instaclone/client/src/components/Layout/Layout.tsx":"41","/home/rinku/codes/instaclone/client/src/pages/HomePage/index.ts":"42","/home/rinku/codes/instaclone/client/src/pages/HomePage/HomePage.tsx":"43","/home/rinku/codes/instaclone/client/src/pages/ProfilePage/index.ts":"44","/home/rinku/codes/instaclone/client/src/pages/ProfilePage/ProfilePage.tsx":"45","/home/rinku/codes/instaclone/client/src/components/ProfileSummary/index.ts":"46","/home/rinku/codes/instaclone/client/src/components/ProfileSummary/ProfileSummary.tsx":"47","/home/rinku/codes/instaclone/client/src/components/PostsGrid/index.ts":"48","/home/rinku/codes/instaclone/client/src/components/PostsGrid/PostsGrid.tsx":"49","/home/rinku/codes/instaclone/client/src/pages/ExplorePage/index.ts":"50","/home/rinku/codes/instaclone/client/src/pages/ExplorePage/ExplorePage.tsx":"51","/home/rinku/codes/instaclone/client/src/components/SearchUsers/index.ts":"52","/home/rinku/codes/instaclone/client/src/components/SearchUsers/SearchUsers.tsx":"53","/home/rinku/codes/instaclone/client/src/pages/NotificationsPage/index.ts":"54","/home/rinku/codes/instaclone/client/src/pages/NotificationsPage/NotificationsPage.tsx":"55","/home/rinku/codes/instaclone/client/src/components/PostUploadView/index.ts":"56","/home/rinku/codes/instaclone/client/src/components/PostUploadView/PostUploadView.tsx":"57","/home/rinku/codes/instaclone/client/src/components/Modal/index.ts":"58","/home/rinku/codes/instaclone/client/src/components/Modal/Modal.tsx":"59","/home/rinku/codes/instaclone/client/src/components/UserListView/index.ts":"60","/home/rinku/codes/instaclone/client/src/components/UserListView/UserListView.tsx":"61","/home/rinku/codes/instaclone/client/src/components/PostOptionsView/index.ts":"62","/home/rinku/codes/instaclone/client/src/components/PostOptionsView/PostOptionsView.tsx":"63","/home/rinku/codes/instaclone/client/src/components/ProfileOptionsView/index.ts":"64","/home/rinku/codes/instaclone/client/src/components/ProfileOptionsView/ProfileOptionsView.tsx":"65","/home/rinku/codes/instaclone/client/src/components/Post/index.ts":"66","/home/rinku/codes/instaclone/client/src/components/Post/Post.tsx":"67","/home/rinku/codes/instaclone/client/src/components/Feed/index.ts":"68","/home/rinku/codes/instaclone/client/src/components/Feed/Feed.tsx":"69","/home/rinku/codes/instaclone/client/src/components/LoginPrompt/index.ts":"70","/home/rinku/codes/instaclone/client/src/components/LoginPrompt/LoginPrompt.tsx":"71","/home/rinku/codes/instaclone/client/src/pages/PostViewPage/index.ts":"72","/home/rinku/codes/instaclone/client/src/pages/PostViewPage/PostViewPage.tsx":"73","/home/rinku/codes/instaclone/client/src/components/CommentInput/index.ts":"74","/home/rinku/codes/instaclone/client/src/components/CommentInput/CommentInput.tsx":"75","/home/rinku/codes/instaclone/client/src/components/CommentsView/index.ts":"76","/home/rinku/codes/instaclone/client/src/components/CommentsView/CommentsView.tsx":"77","/home/rinku/codes/instaclone/client/src/components/Comment/index.ts":"78","/home/rinku/codes/instaclone/client/src/components/Comment/Comment.tsx":"79","/home/rinku/codes/instaclone/client/src/index.tsx":"80","/home/rinku/codes/instaclone/client/src/components/App.tsx":"81","/home/rinku/codes/instaclone/client/src/components/MessageView/index.ts":"82","/home/rinku/codes/instaclone/client/src/pages/EditProfilePage/index.ts":"83","/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage/index.ts":"84","/home/rinku/codes/instaclone/client/src/server_url.tsx":"85","/home/rinku/codes/instaclone/client/src/components/MessageView/MessageView.tsx":"86","/home/rinku/codes/instaclone/client/src/pages/EditProfilePage/EditProfilePage.tsx":"87","/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage/EditPasswordPage.tsx":"88","/home/rinku/codes/instaclone/client/src/components/Backdrop/index.ts":"89","/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt/index.ts":"90","/home/rinku/codes/instaclone/client/src/components/Backdrop/Backdrop.tsx":"91","/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt/UnfollowPrompt.tsx":"92"},{"size":407,"mtime":1635431735544,"results":"93","hashOfConfig":"94"},{"size":333,"mtime":1635431735544,"results":"95","hashOfConfig":"94"},{"size":8397,"mtime":1635431735544,"results":"96","hashOfConfig":"94"},{"size":2885,"mtime":1635431735544,"results":"97","hashOfConfig":"94"},{"size":222,"mtime":1635431735544,"results":"98","hashOfConfig":"94"},{"size":8473,"mtime":1635431735544,"results":"99","hashOfConfig":"94"},{"size":2142,"mtime":1635431735544,"results":"100","hashOfConfig":"94"},{"size":461,"mtime":1635431735544,"results":"101","hashOfConfig":"94"},{"size":2906,"mtime":1635431735544,"results":"102","hashOfConfig":"94"},{"size":307,"mtime":1635431735544,"results":"103","hashOfConfig":"94"},{"size":418,"mtime":1635431735544,"results":"104","hashOfConfig":"94"},{"size":994,"mtime":1635431735544,"results":"105","hashOfConfig":"94"},{"size":472,"mtime":1635431735544,"results":"106","hashOfConfig":"94"},{"size":1702,"mtime":1635431735544,"results":"107","hashOfConfig":"94"},{"size":1847,"mtime":1635431735544,"results":"108","hashOfConfig":"94"},{"size":943,"mtime":1635431735544,"results":"109","hashOfConfig":"94"},{"size":3650,"mtime":1635431735544,"results":"110","hashOfConfig":"94"},{"size":2327,"mtime":1635431735544,"results":"111","hashOfConfig":"94"},{"size":124,"mtime":1635431735540,"results":"112","hashOfConfig":"94"},{"size":2909,"mtime":1635431735544,"results":"113","hashOfConfig":"94"},{"size":10091,"mtime":1635431735532,"results":"114","hashOfConfig":"94"},{"size":362,"mtime":1635431735540,"results":"115","hashOfConfig":"94"},{"size":438,"mtime":1635431735540,"results":"116","hashOfConfig":"94"},{"size":194,"mtime":1635431735544,"results":"117","hashOfConfig":"94"},{"size":1300,"mtime":1636359254427,"results":"118","hashOfConfig":"94"},{"size":39,"mtime":1635660429908,"results":"119","hashOfConfig":"94"},{"size":34,"mtime":1635662167908,"results":"120","hashOfConfig":"94"},{"size":183,"mtime":1635664204068,"results":"121","hashOfConfig":"94"},{"size":34,"mtime":1635664838260,"results":"122","hashOfConfig":"94"},{"size":2773,"mtime":1635693187816,"results":"123","hashOfConfig":"94"},{"size":42,"mtime":1635672148904,"results":"124","hashOfConfig":"94"},{"size":1264,"mtime":1635671815576,"results":"125","hashOfConfig":"94"},{"size":1793,"mtime":1635674730240,"results":"126","hashOfConfig":"94"},{"size":39,"mtime":1635672442580,"results":"127","hashOfConfig":"94"},{"size":1523,"mtime":1635675013412,"results":"128","hashOfConfig":"94"},{"size":36,"mtime":1635690562440,"results":"129","hashOfConfig":"94"},{"size":2442,"mtime":1635949232520,"results":"130","hashOfConfig":"94"},{"size":36,"mtime":1635673726956,"results":"131","hashOfConfig":"94"},{"size":371,"mtime":1635743390164,"results":"132","hashOfConfig":"94"},{"size":36,"mtime":1635739188336,"results":"133","hashOfConfig":"94"},{"size":245,"mtime":1635739174196,"results":"134","hashOfConfig":"94"},{"size":38,"mtime":1635769819572,"results":"135","hashOfConfig":"94"},{"size":1845,"mtime":1636345944900,"results":"136","hashOfConfig":"94"},{"size":38,"mtime":1635782034660,"results":"137","hashOfConfig":"94"},{"size":8473,"mtime":1636350762948,"results":"138","hashOfConfig":"94"},{"size":44,"mtime":1635842681803,"results":"139","hashOfConfig":"94"},{"size":3289,"mtime":1636446171599,"results":"140","hashOfConfig":"94"},{"size":39,"mtime":1635859262388,"results":"141","hashOfConfig":"94"},{"size":1095,"mtime":1635951481784,"results":"142","hashOfConfig":"94"},{"size":41,"mtime":1635862405380,"results":"143","hashOfConfig":"94"},{"size":1256,"mtime":1636359227363,"results":"144","hashOfConfig":"94"},{"size":41,"mtime":1635863273044,"results":"145","hashOfConfig":"94"},{"size":1989,"mtime":1636358906635,"results":"146","hashOfConfig":"94"},{"size":47,"mtime":1635949687012,"results":"147","hashOfConfig":"94"},{"size":3834,"mtime":1636439767544,"results":"148","hashOfConfig":"94"},{"size":44,"mtime":1636006891544,"results":"149","hashOfConfig":"94"},{"size":3502,"mtime":1636022373564,"results":"150","hashOfConfig":"94"},{"size":35,"mtime":1636006414104,"results":"151","hashOfConfig":"94"},{"size":510,"mtime":1636036485316,"results":"152","hashOfConfig":"94"},{"size":42,"mtime":1636022536436,"results":"153","hashOfConfig":"94"},{"size":1516,"mtime":1636358794279,"results":"154","hashOfConfig":"94"},{"size":45,"mtime":1636028631972,"results":"155","hashOfConfig":"94"},{"size":2439,"mtime":1636359577727,"results":"156","hashOfConfig":"94"},{"size":48,"mtime":1636037354380,"results":"157","hashOfConfig":"94"},{"size":1554,"mtime":1636445928279,"results":"158","hashOfConfig":"94"},{"size":34,"mtime":1636108670316,"results":"159","hashOfConfig":"94"},{"size":7186,"mtime":1636439537932,"results":"160","hashOfConfig":"94"},{"size":34,"mtime":1636345650928,"results":"161","hashOfConfig":"94"},{"size":1153,"mtime":1636345774108,"results":"162","hashOfConfig":"94"},{"size":41,"mtime":1636350542840,"results":"163","hashOfConfig":"94"},{"size":808,"mtime":1636359145415,"results":"164","hashOfConfig":"94"},{"size":42,"mtime":1636349881120,"results":"165","hashOfConfig":"94"},{"size":6511,"mtime":1636440638968,"results":"166","hashOfConfig":"94"},{"size":42,"mtime":1636352798164,"results":"167","hashOfConfig":"94"},{"size":2433,"mtime":1636353013728,"results":"168","hashOfConfig":"94"},{"size":42,"mtime":1636353645224,"results":"169","hashOfConfig":"94"},{"size":1070,"mtime":1636354916636,"results":"170","hashOfConfig":"94"},{"size":37,"mtime":1636354877488,"results":"171","hashOfConfig":"94"},{"size":3436,"mtime":1636358978683,"results":"172","hashOfConfig":"94"},{"size":353,"mtime":1636357066586,"results":"173","hashOfConfig":"94"},{"size":3906,"mtime":1636438843724,"results":"174","hashOfConfig":"94"},{"size":41,"mtime":1636356559320,"results":"175","hashOfConfig":"94"},{"size":45,"mtime":1636355856288,"results":"176","hashOfConfig":"94"},{"size":46,"mtime":1636355486724,"results":"177","hashOfConfig":"94"},{"size":84,"mtime":1636357061487,"results":"178","hashOfConfig":"94"},{"size":275,"mtime":1636356654392,"results":"179","hashOfConfig":"94"},{"size":6691,"mtime":1636356089688,"results":"180","hashOfConfig":"94"},{"size":2887,"mtime":1636355763460,"results":"181","hashOfConfig":"94"},{"size":38,"mtime":1636356290912,"results":"182","hashOfConfig":"94"},{"size":44,"mtime":1636356814828,"results":"183","hashOfConfig":"94"},{"size":389,"mtime":1636356454200,"results":"184","hashOfConfig":"94"},{"size":904,"mtime":1636445902731,"results":"185","hashOfConfig":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},"1pfzwi9",{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"238"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"238"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"238"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"238"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"238"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"238"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"238"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"238"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"238"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"238"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rinku/codes/instaclone/client/src/redux/store.js",[],["388","389"],"/home/rinku/codes/instaclone/client/src/redux/rootReducer.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsActions.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userActions.js",[],"/home/rinku/codes/instaclone/client/src/utilities/overflowToggler.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsReducer.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userReducer.js",[],"/home/rinku/codes/instaclone/client/src/utilities/lazyLoadImage.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/profileReducer.js",[],"/home/rinku/codes/instaclone/client/src/utilities/notificationPusher.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/profileActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/services/commentServices.js",[],"/home/rinku/codes/instaclone/client/src/services/userServices.js",[],"/home/rinku/codes/instaclone/client/src/services/authServices.js",[],"/home/rinku/codes/instaclone/client/src/services/postsServices.js",[],"/home/rinku/codes/instaclone/client/src/services/profileServices.js",[],"/home/rinku/codes/instaclone/client/src/firebase/storage.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/ProfileActions.js",[],"/home/rinku/codes/instaclone/client/src/Icons/CustomIcons.js",[],["390","391"],"/home/rinku/codes/instaclone/client/src/firebase/firestore.js",[],"/home/rinku/codes/instaclone/client/src/firebase/firebase.js",[],"/home/rinku/codes/instaclone/client/src/utilities/clearNotification.js",[],"/home/rinku/codes/instaclone/client/src/pages/LandingPage/LandingPage.tsx",[],["392","393"],"/home/rinku/codes/instaclone/client/src/pages/LandingPage/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Logo/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Logo/Logo.tsx",[],"/home/rinku/codes/instaclone/client/src/components/Form/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Form/Form.tsx",["394"],"import { ReactEventHandler } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Logo from \"../Logo\";\nimport Loader from \"../Loader\";\nimport styles from \"./Form.module.scss\";\n\ntype Form = {\n  username: string;\n  onUsernameChange: Function;\n  email?: string;\n  onEmailChange: Function;\n  password: string;\n  onPasswordChange: Function;\n  repeatPassword?: string;\n  onRepeatPasswordChange: Function;\n  formType: \"Login\" | \"Register\";\n  errorMessage: String;\n  onFormSubmit: ReactEventHandler;\n  loading: boolean;\n};\n\nexport default function Form({\n  username,\n  onUsernameChange,\n  email,\n  onEmailChange,\n  password,\n  onPasswordChange,\n  repeatPassword,\n  onRepeatPasswordChange,\n  formType,\n  errorMessage,\n  onFormSubmit,\n  loading,\n}: Form) {\n  return (\n    <div className={styles.formWrapper}>\n      <Logo />\n\n      <form className={styles.form} onSubmit={onFormSubmit}>\n        {formType === \"Register\" && (\n          <>\n            <label>Email</label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => onEmailChange(e.target.value)}\n            />\n          </>\n        )}\n        <label>Username</label>\n        <input\n          type=\"text\"\n          value={username}\n          onChange={(e) => onUsernameChange(e.target.value)}\n        />\n        <label>Password</label>\n        <input\n          type=\"password\"\n          value={password}\n          onChange={(e) => onPasswordChange(e.target.value)}\n        />\n        {formType === \"Register\" && (\n          <>\n            <label>Repeat Password</label>\n            <input\n              type=\"password\"\n              value={repeatPassword}\n              onChange={(e) => onRepeatPasswordChange(e.target.value)}\n            />\n          </>\n        )}\n        <button type=\"submit\" disabled={loading}>\n          {!loading ? (\n            <>{formType === \"Login\" ? \"Login\" : \"Register\"}</>\n          ) : (\n            <span\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Loader />\n            </span>\n          )}\n        </button>\n        {formType === \"Register\" && (\n          <p style={{ fontSize: \"13px\", color: \"gray\" }}>\n            By signing up, you agree to our terms and policies.\n          </p>\n        )}\n        <p style={{ color: \"red\", fontSize: \"13px\" }}>{errorMessage}</p>\n        <div>\n          <p>\n            {formType === \"Register\"\n              ? \"Already have an account?\"\n              : \"Don't have an account?\"}\n          </p>\n          <Link to={formType === \"Register\" ? \"/login\" : \"/register\"}>\n            {formType === \"Register\" ? \"Login\" : \"Register\"}\n          </Link>\n        </div>\n      </form>\n    </div>\n  );\n}\n","/home/rinku/codes/instaclone/client/src/pages/RegisterPage/index.ts",[],"/home/rinku/codes/instaclone/client/src/utilities/formValidator.ts",[],"/home/rinku/codes/instaclone/client/src/pages/RegisterPage/RegisterPage.tsx",[],"/home/rinku/codes/instaclone/client/src/pages/LoginPage/index.ts",[],"/home/rinku/codes/instaclone/client/src/pages/LoginPage/LoginPage.tsx",["395"],"import { useState, useEffect } from \"react\";\nimport Form from \"../../components/Form\";\nimport * as userActions from \"../../redux/user/userActions\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\ntype LoginPageProps = {\n  error: string;\n  loading: boolean;\n  currentUsername: String;\n  LOGIN: Function;\n};\n\nconst Loginpage = ({\n  error,\n  loading,\n  currentUsername,\n  LOGIN,\n}: LoginPageProps) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const history = useHistory();\n\n  const login = (e: any) => {\n    e.preventDefault();\n    LOGIN(username, password);\n  };\n\n  useEffect(() => {\n    if (currentUsername) {\n      history.push(\"/\");\n    }\n  }, [currentUsername]);\n\n  return (\n    <Form\n      username={username}\n      onUsernameChange={setUsername}\n      password={password}\n      onPasswordChange={setPassword}\n      formType=\"Login\"\n      errorMessage={error}\n      onFormSubmit={login}\n      onEmailChange={() => {}}\n      onRepeatPasswordChange={() => {}}\n      loading={loading}\n    />\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    error: state.user.error,\n    loading: state.user.loading,\n    currentUsername: state.user.currentUserData.username,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    LOGIN: (username: string, password: string) =>\n      dispatch(userActions.LOGIN(username, password)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loginpage);\n","/home/rinku/codes/instaclone/client/src/components/Navbar/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Navbar/Navbar.tsx",["396"],"import { Fragment, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport Badge from \"@material-ui/core/Badge\";\nimport firestore from \"../../firebase/firestore\";\nimport Logo from \"../Logo\";\nimport { FiHome, FiSearch, FiBell, FiUser } from \"react-icons/fi\";\nimport styles from \"./Navbar.module.scss\";\n\ntype NavbarTypes = {\n  currentUsername: string;\n  currentUserUid: string;\n};\n\nconst Navbar = ({ currentUsername, currentUserUid }: NavbarTypes) => {\n  const [notificationsCount, setNotificationsCount] = useState(0);\n\n  useEffect(() => {\n    if (currentUserUid) {\n      firestore\n        .collection(currentUserUid)\n        .doc(\"notifications\")\n        .onSnapshot((doc) => {\n          const data = [];\n          for (let e in doc.data()) {\n            data.push(e);\n          }\n          setNotificationsCount(data.length);\n        });\n    }\n  }, []);\n\n  return (\n    <nav className={styles.navbar}>\n      <div>\n        <ul>\n          <NavLink to=\"/\">\n            <Logo />\n          </NavLink>\n        </ul>\n\n        <ul>\n          {currentUsername && (\n            <>\n              <NavLink to=\"/\" exact activeStyle={{ color: \"tomato\" }}>\n                <FiHome />\n              </NavLink>\n\n              <NavLink to=\"/explore\" exact activeStyle={{ color: \"tomato\" }}>\n                <FiSearch />\n              </NavLink>\n\n              <NavLink\n                to=\"/notifications\"\n                exact\n                activeStyle={{ color: \"tomato\" }}\n              >\n                <Badge\n                  badgeContent={notificationsCount}\n                  color=\"error\"\n                  style={{ marginTop: \"-8px\" }}\n                >\n                  <FiBell />\n                </Badge>\n              </NavLink>\n\n              <NavLink\n                to={`/user/${currentUsername}`}\n                exact\n                activeStyle={{ color: \"tomato\" }}\n              >\n                <FiUser />\n              </NavLink>\n            </>\n          )}\n\n          {!currentUsername && (\n            <NavLink to=\"/login\" exact>\n              <FiUser />\n            </NavLink>\n          )}\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    currentUserUid: state.user.currentUserData.uid,\n    currentUsername: state.user.currentUserData.username,\n  };\n};\n\nexport default connect(mapStateToProps)(Navbar);\n","/home/rinku/codes/instaclone/client/src/components/Loader/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Loader/Loader.tsx",[],"/home/rinku/codes/instaclone/client/src/components/Layout/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Layout/Layout.tsx",[],"/home/rinku/codes/instaclone/client/src/pages/HomePage/index.ts",[],"/home/rinku/codes/instaclone/client/src/pages/HomePage/HomePage.tsx",["397"],"import Feed from \"../../components/Feed\";\nimport { connect } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport Loader from \"../../components/Loader\";\nimport * as postsActions from \"../../redux/post/postsActions\";\nimport { FiMeh } from \"react-icons/fi\";\nimport { useHistory } from \"react-router\";\nimport styles from \"./HomePage.module.scss\";\n\ntype HomePageTypes = {\n  currentUserUid: string;\n  feed: Array<object>;\n  GET_FEED: Function;\n  loading: boolean;\n  feedLoaded: boolean;\n};\n\nconst Homepage = ({\n  currentUserUid,\n  feed,\n  GET_FEED,\n  loading,\n  feedLoaded,\n}: HomePageTypes) => {\n  useEffect(() => {\n    if (!feedLoaded) {\n      GET_FEED(currentUserUid);\n    }\n  }, [currentUserUid, feedLoaded]);\n\n  const history = useHistory();\n\n  return (\n    <div className={styles.Homepage}>\n      {loading ? <Loader /> : null}\n      {feed.length > 0 && !loading ? (\n        <Feed posts={feed} />\n      ) : (\n        <div className={styles.meh}>\n          <span>\n            <FiMeh />\n          </span>\n          <p>Follow people to start seeing their posts.</p>\n          <button onClick={() => history.push(\"/explore\")}>\n            Find people to follow\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    feedLoaded: state.posts.feed_loaded,\n    loading: state.posts.loading_feed,\n    feed: state.posts.posts.filter((post: any) => post.infeed === true),\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    currentUserProfileImage: state.user.currentUserData.profile_image_url,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    GET_FEED: (user_uid: any) => dispatch(postsActions.GET_FEED(user_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);\n","/home/rinku/codes/instaclone/client/src/pages/ProfilePage/index.ts",[],"/home/rinku/codes/instaclone/client/src/pages/ProfilePage/ProfilePage.tsx",["398","399"],"import { Fragment, useEffect, useState } from \"react\";\nimport ProfileSummary from \"../../components/ProfileSummary\";\nimport * as profileActions from \"../../redux/profile/ProfileActions\";\nimport { connect } from \"react-redux\";\nimport overflowToggler from \"../../utilities/overflowToggler\";\nimport ProfileOptionsView from \"../../components/ProfileOptionsView\";\nimport Backdrop from \"../../components/Backdrop\";\nimport UnfollowPrompt from \"../../components/UnfollowPrompt\";\nimport PostsGrid from \"../../components/PostsGrid\";\nimport UserListView from \"../../components/UserListView\";\nimport Loader from \"../../components/Loader\";\nimport * as userActions from \"../../redux/user/userActions\";\nimport LoginPrompt from \"../../components/LoginPrompt\";\nimport PostUploadView from \"../../components/PostUploadView\";\nimport styles from \"./ProfilePage.module.scss\";\n\ntype ProfilePageTypes = {\n  history: any;\n  currentUserUid: string;\n  profiles: Array<any>;\n  GET_PROFILE_DATA: Function;\n  currentUsername: string;\n  FOLLOW: Function;\n  UNFOLLOW: Function;\n  FETCH_FOLLOWERS: Function;\n  FETCH_FOLLOWINGS: Function;\n  loading: boolean;\n  loading_followers_or_following: boolean;\n  LOGOUT: Function;\n};\n\nconst Profilepage = ({\n  history,\n  currentUserUid,\n  profiles,\n  GET_PROFILE_DATA,\n  currentUsername,\n  FOLLOW,\n  UNFOLLOW,\n  FETCH_FOLLOWERS,\n  FETCH_FOLLOWINGS,\n  loading,\n  loading_followers_or_following,\n  LOGOUT,\n}: ProfilePageTypes) => {\n  const profileUsername = history.location.pathname.slice(6);\n  const profileData = profiles.filter(\n    (profile) => profile?.username === profileUsername\n  );\n\n  //modal handlers\n  const [showProfileOptionsModal, setShowProfileOptionsModal] = useState(false);\n  const [showUnfollowPrompt, setShowUnfollowPrompt] = useState(false);\n  const [showFollowers, setShowFollowers] = useState(false);\n  const [showFollowings, setShowFollowings] = useState(false);\n  const [showLoginNeededPrompt, setShowLoginNeededPrompt] = useState(false);\n  const [showPostUploadModal, setShowPostUploadModal] = useState(false);\n\n  //\n  const [showSavedPosts, setShowSavedPosts] = useState(false);\n\n  //followers and following list\n  const followersList = profiles.filter(\n    (profile) => profile.username === profileUsername\n  )[0]?.followers;\n  const followingList = profiles.filter(\n    (profile) => profile.username === profileUsername\n  )[0]?.followings;\n\n  const LOAD_FOLLOWERS = () => {\n    if (!followersList) {\n      FETCH_FOLLOWERS(profileUsername);\n    }\n    toggleModal(setShowFollowers);\n  };\n\n  const LOAD_FOLLOWINGS = () => {\n    if (!followingList) {\n      FETCH_FOLLOWINGS(profileUsername);\n    }\n    toggleModal(setShowFollowings);\n  };\n\n  const toggleModal = (setModal: Function) => {\n    setModal((prev: any) => !prev);\n    overflowToggler();\n  };\n\n  const Logout = () => {\n    toggleModal(setShowProfileOptionsModal);\n    LOGOUT();\n    history.push(\"/\");\n    localStorage.removeItem(\"token\");\n  };\n\n  const follow = () => {\n    if (currentUserUid) {\n      FOLLOW(profileData[0]?.uid, currentUserUid);\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  useEffect(() => {\n    document.body.style.overflow = \"auto\";\n    //set document title\n    document.title = `${profileUsername}`;\n    if (profileData.length <= 0) {\n      GET_PROFILE_DATA(profileUsername, currentUserUid);\n    }\n\n    return () => {\n      document.title = \"unsocial\";\n    };\n  }, [profileUsername, currentUserUid]);\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Loader fullPage />\n      ) : !loading && profileData.length < 1 ? (\n        <p\n          style={{ marginTop: \"100px\", textAlign: \"center\", fontSize: \"15px\" }}\n        >\n          This link is broken\n        </p>\n      ) : (\n        <div className={styles.ProfilePage}>\n          <ProfileSummary\n            showPostUploadModal={() => toggleModal(setShowPostUploadModal)}\n            profileData={profileData[0] || []}\n            toggleProfileOptions={() => toggleModal(setShowProfileOptionsModal)}\n            toggleUnfollowPrompt={() => toggleModal(setShowUnfollowPrompt)}\n            isMyProfile={currentUsername === profileUsername}\n            FOLLOW={follow}\n            LOAD_FOLLOWERS={LOAD_FOLLOWERS}\n            LOAD_FOLLOWINGS={LOAD_FOLLOWINGS}\n          />\n\n          {profileData[0].posts.length > 0 && (\n            <section className={styles.PostsGrid}>\n              <PostsGrid\n                userPosts={\n                  showSavedPosts\n                    ? profileData[0]?.savedPosts\n                    : profileData[0]?.posts || []\n                }\n              />\n            </section>\n          )}\n\n          {showProfileOptionsModal && (\n            <Fragment>\n              <ProfileOptionsView\n                toggle={() => toggleModal(setShowProfileOptionsModal)}\n                isMyProfile={currentUsername === profileUsername}\n                LOGOUT={Logout}\n              />\n              <Backdrop\n                show={showProfileOptionsModal}\n                toggle={() => toggleModal(setShowProfileOptionsModal)}\n              />\n            </Fragment>\n          )}\n\n          {showUnfollowPrompt && (\n            <Fragment>\n              <Backdrop\n                show={showUnfollowPrompt}\n                toggle={() => toggleModal(setShowUnfollowPrompt)}\n              />\n              <UnfollowPrompt\n                profileUsername={profileUsername}\n                profileImage={profileData[0]?.profile_image_url}\n                toggle={() => toggleModal(setShowUnfollowPrompt)}\n                UNFOLLOW={() => UNFOLLOW(profileData[0].uid, currentUserUid)}\n              />\n            </Fragment>\n          )}\n\n          {showPostUploadModal && (\n            <Fragment>\n              <Backdrop\n                show={showPostUploadModal}\n                toggle={() => toggleModal(setShowPostUploadModal)}\n              />\n              <PostUploadView\n                toggle={() => toggleModal(setShowPostUploadModal)}\n              />\n            </Fragment>\n          )}\n\n          {(showFollowers || showFollowings) && (\n            <Fragment>\n              <Backdrop\n                toggle={() =>\n                  showFollowers\n                    ? toggleModal(setShowFollowers)\n                    : toggleModal(setShowFollowings)\n                }\n                show={showFollowers || showFollowings}\n              />\n              <UserListView\n                title={showFollowers ? \"Followers\" : \"Following\"}\n                loading={loading_followers_or_following}\n                users={(showFollowers ? followersList : followingList) || []}\n                toggle={() =>\n                  showFollowers\n                    ? toggleModal(setShowFollowers)\n                    : toggleModal(setShowFollowings)\n                }\n              />\n            </Fragment>\n          )}\n        </div>\n      )}\n\n      {showLoginNeededPrompt && (\n        <Fragment>\n          <LoginPrompt\n            profilePage={true}\n            toggle={() => toggleModal(setShowLoginNeededPrompt)}\n          />\n          <Backdrop\n            show={showLoginNeededPrompt}\n            toggle={() => toggleModal(setShowLoginNeededPrompt)}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    loading: state.profile.loading,\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    profiles: state.profile.profiles,\n    loading_followers_or_following:\n      state.profile.loading_followers_or_following,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    LOGOUT: () => dispatch(userActions.LOGOUT()),\n    FETCH_FOLLOWERS: (username: string) =>\n      dispatch(profileActions.FETCH_FOLLOWERS(username)),\n    FETCH_FOLLOWINGS: (username: string) =>\n      dispatch(profileActions.FETCH_FOLLOWINGS(username)),\n    UNFOLLOW: (unfollowing_user_uid: string, unfollower_user_uid: string) =>\n      dispatch(\n        profileActions.UNFOLLOW(unfollowing_user_uid, unfollower_user_uid)\n      ),\n    FOLLOW: (following_user_uid: string, follower_user_uid: string) =>\n      dispatch(profileActions.FOLLOW(following_user_uid, follower_user_uid)),\n    GET_PROFILE_DATA: (profile_username: string, current_user_uid: string) =>\n      dispatch(\n        profileActions.GET_PROFILE_DATA(profile_username, current_user_uid)\n      ),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profilepage);\n","/home/rinku/codes/instaclone/client/src/components/ProfileSummary/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/ProfileSummary/ProfileSummary.tsx",["400","401"],"import { Fragment } from \"react\";\nimport { BiDotsHorizontal, BiUserCheck, FiPlus } from \"react-icons/all\";\nimport { useHistory } from \"react-router-dom\";\nimport ProfilePicPlaceholder from \"../../assets/avatar.jpg\";\nimport lazyLoadImage from \"../../utilities/lazyLoadImage\";\nimport Linkify from \"react-linkify\";\nimport styles from \"./ProfileSummary.module.scss\";\n\ntype ProfileSummaryTypes = {\n  profileData: any;\n  isMyProfile: boolean;\n  toggleProfileOptions: any;\n  toggleUnfollowPrompt: any;\n  showPostUploadModal: any;\n  FOLLOW: any;\n  LOAD_FOLLOWERS: any;\n  LOAD_FOLLOWINGS: any;\n};\n\nconst ProfileSummary = ({\n  profileData,\n  isMyProfile,\n  toggleProfileOptions,\n  toggleUnfollowPrompt,\n  showPostUploadModal,\n  FOLLOW,\n  LOAD_FOLLOWERS,\n  LOAD_FOLLOWINGS,\n}: ProfileSummaryTypes) => {\n  const history = useHistory();\n\n  return (\n    <Fragment>\n      <div className={styles.ProfileSummary}>\n        <img\n          src={ProfilePicPlaceholder}\n          data-src=\"https://bit.ly/3mNg7CH\"\n          alt=\"cover-image\"\n          onLoad={lazyLoadImage}\n          className={`lazy-image ${styles.CoverImage}`}\n        />\n\n        <section>\n          <img\n            src={ProfilePicPlaceholder}\n            data-src={profileData.profile_image_url}\n            alt=\"profile_image\"\n            onLoad={lazyLoadImage}\n            className=\"lazy-image\"\n          />\n\n          <p className={styles.username}>{profileData.username}</p>\n          <p style={{ fontSize: \"15px\" }}>{profileData.bio}</p>\n\n          <div className={styles.UserSummary}>\n            <button>{profileData.posts_count} posts</button>\n            &#183;\n            <button onClick={LOAD_FOLLOWERS}>\n              {profileData.followers_count || 0}{\" \"}\n              {profileData.followers_count === 1 ? \"follower\" : \"followers\"}\n            </button>\n            &#183;\n            <button onClick={LOAD_FOLLOWINGS}>\n              {profileData.following_count || 0} following\n            </button>\n          </div>\n\n          <br />\n\n          <div className={styles.ActionButtons}>\n            {isMyProfile && (\n              <button\n                onClick={() => history.push(\"/edit/profile\")}\n                className={styles[\"Profile-Edit-Button\"]}\n              >\n                Edit Profile\n              </button>\n            )}\n\n            {!isMyProfile && !profileData.followed_by_me && (\n              <button className={styles.FollowButton} onClick={FOLLOW}>\n                Follow\n              </button>\n            )}\n\n            {!isMyProfile && profileData.followed_by_me && (\n              <button\n                className={styles.UnfollowButton}\n                onClick={toggleUnfollowPrompt}\n                style={{ fontSize: \"20px\" }}\n              >\n                <BiUserCheck />\n              </button>\n            )}\n\n            {isMyProfile && (\n              <button\n                style={{ fontSize: \"20px\" }}\n                onClick={showPostUploadModal}\n              >\n                <FiPlus />\n              </button>\n            )}\n\n            <button onClick={toggleProfileOptions} style={{ fontSize: \"20px\" }}>\n              <BiDotsHorizontal />\n            </button>\n          </div>\n        </section>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default ProfileSummary;\n","/home/rinku/codes/instaclone/client/src/components/PostsGrid/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/PostsGrid/PostsGrid.tsx",["402"],"import { Link, useHistory } from \"react-router-dom\";\nimport placeholderImage from \"../../assets/placeholder.jpg\";\nimport lazyLoadImage from \"../../utilities/lazyLoadImage.js\";\nimport styles from \"./PostsGrid.module.scss\";\n\ntype PostsGridTypes = {\n  userPosts: any;\n};\n\nconst PostsGrid = ({ userPosts }: PostsGridTypes) => {\n  const history = useHistory();\n\n  return (\n    <div className={styles[\"Posts-Grid\"]}>\n      {userPosts\n        .sort((a: any, b: any) => {\n          return (\n            new Date(b.post_posted_date).valueOf() -\n            new Date(a.post_posted_date).valueOf()\n          );\n        })\n        .map((e: any) => {\n          return (\n            <div key={e.post_id}>\n              <Link to={`/p/${e.post_id}`}>\n                <img\n                  onLoad={lazyLoadImage}\n                  className=\"lazy-image\"\n                  src={placeholderImage}\n                  alt={e.status || \"post\"}\n                  data-src={e.post_image}\n                />\n              </Link>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default PostsGrid;\n","/home/rinku/codes/instaclone/client/src/pages/ExplorePage/index.ts",[],"/home/rinku/codes/instaclone/client/src/pages/ExplorePage/ExplorePage.tsx",["403"],"import { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../../components/Loader\";\nimport PostsGrid from \"../../components/PostsGrid\";\nimport * as PostsActions from \"../../redux/post/postsActions\";\nimport SearchUsers from \"../../components/SearchUsers\";\nimport styles from \"./ExplorePage.module.scss\";\n\ntype ExplorePageTypes = {\n  loading: boolean;\n  explorePosts: any;\n  loadExplorePosts: any;\n};\n\nconst ExplorePage = ({\n  loading,\n  explorePosts,\n  loadExplorePosts,\n}: ExplorePageTypes) => {\n  useEffect(() => {\n    if (explorePosts.length <= 0) {\n      loadExplorePosts();\n    }\n  }, []);\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className={styles.ExplorePage}>\n          <SearchUsers />\n          <PostsGrid userPosts={explorePosts} />\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    loading: state.posts.loading_explore_posts,\n    explorePosts: state.posts.explore_posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    loadExplorePosts: () => dispatch(PostsActions.LOAD_EXPLORE_POSTS()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorePage);\n","/home/rinku/codes/instaclone/client/src/components/SearchUsers/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/SearchUsers/SearchUsers.tsx",[],"/home/rinku/codes/instaclone/client/src/pages/NotificationsPage/index.ts",[],"/home/rinku/codes/instaclone/client/src/pages/NotificationsPage/NotificationsPage.tsx",["404"],"import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport clearNotification from \"../../utilities/clearNotification\";\nimport styles from \"./NotificationsPage.module.scss\";\nimport server_url from \"../../server_url\";\nimport { connect } from \"react-redux\";\nimport placeholderImage from \"../../assets/placeholder.jpg\";\nimport lazyLoadImage from \"../../utilities/lazyLoadImage.js\";\nimport ProfilePicPlaceholder from \"../../assets/avatar.jpg\";\n\ntype NotificationsPageTypes = {\n  currentUserUid: string;\n};\n\nconst NotificationsPage = ({ currentUserUid }: NotificationsPageTypes) => {\n  const history = useHistory();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    clearNotification(currentUserUid);\n\n    axios\n      .get(`${server_url}/user/getNotifications/${currentUserUid}`)\n      .then((res) => {\n        setNotifications(res.data);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className={styles.NotificationsPage}>\n      <div className={styles.Notifications}>\n        {notifications.length > 0 ? (\n          notifications\n            .sort((a: any, b: any) => {\n              return new Date(b.date).valueOf() - new Date(a.date).valueOf();\n            })\n            .map((noti: any) => {\n              return (\n                <div\n                  className={styles.Notification}\n                  style={loading ? { display: \"none\" } : { width: \"100%\" }}\n                  key={noti.uid}\n                  onClick={() =>\n                    noti.post_id !== null\n                      ? history.push(`/p/${noti.post_id}`)\n                      : noti.notification === \"follow\"\n                      ? history.push(`/user/${noti.username}`)\n                      : \"\"\n                  }\n                >\n                  <img\n                    data-src={noti.profile_image_url}\n                    src={ProfilePicPlaceholder}\n                    className={`lazy-image ${styles.ProfilePic}`}\n                    onLoad={lazyLoadImage}\n                    alt=\"profile-pc\"\n                  />\n                  <p>\n                    {noti.username}{\" \"}\n                    {noti.notification === \"like post\"\n                      ? \" liked your post.\"\n                      : noti.notification === \"like comment\"\n                      ? \" liked your comment.\"\n                      : noti.notification === \"comment added\"\n                      ? \" commented on your post.\"\n                      : noti.notification === \"follow\"\n                      ? \"started following you.\"\n                      : \"\"}\n                    <b style={{ color: \"grey\" }}>{noti.date}</b>\n                  </p>\n\n                  {noti.post_image && (\n                    <img\n                      data-src={noti.post_image}\n                      src={placeholderImage}\n                      className={`lazy-image ${styles.PostImage}`}\n                      onLoad={lazyLoadImage}\n                      alt=\"profile-pc\"\n                    />\n                  )}\n                </div>\n              );\n            })\n        ) : (\n          <p\n            style={\n              loading\n                ? { display: \"none\" }\n                : { textAlign: \"center\", fontSize: \"14px\" }\n            }\n          >\n            No notifications\n          </p>\n        )}\n      </div>\n      <div\n        style={\n          !loading\n            ? { display: \"none\" }\n            : { textAlign: \"center\", fontSize: \"14px\" }\n        }\n      >\n        <p>Loading...</p>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    currentUserUid: state.user.currentUserData.uid,\n  };\n};\n\nexport default connect(mapStateToProps)(NotificationsPage);\n","/home/rinku/codes/instaclone/client/src/components/PostUploadView/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/PostUploadView/PostUploadView.tsx",["405"],"import styles from \"./PostUploadView.module.scss\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useCallback } from \"react\";\nimport { FiImage } from \"react-icons/fi\";\nimport { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as postsActions from \"../../redux/post/postsActions\";\nimport Modal from \"../Modal\";\n\ntype PostUploadModalTypes = {\n  UPLOAD_POST: any;\n  toggle: any;\n  currentUserUid: any;\n  currentUsername: any;\n  currentUserProfileImage: any;\n};\n\nconst PostUploadModal = ({\n  UPLOAD_POST,\n  toggle,\n  currentUserUid,\n  currentUsername,\n  currentUserProfileImage,\n}: PostUploadModalTypes) => {\n  const [files, setFiles] = useState<any[]>([]);\n  const [status, setStatus] = useState(\"\");\n\n  const onDrop = useCallback((acceptedFiles) => {\n    setFiles(\n      acceptedFiles.map((file: any) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      )\n    );\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const thumbs = files.map((file: any) => (\n    <div key={file.name}>\n      <div>\n        <img src={file.preview} className={styles[\"Post-Image\"]} />\n      </div>\n    </div>\n  ));\n\n  const uploadPost = () => {\n    if (files) {\n      if (\n        [\"jpg\", \"png\", \"jpeg\"].includes(\n          files[0].name.slice(files[0].name.lastIndexOf(\".\") + 1)\n        )\n      ) {\n        toggle();\n        UPLOAD_POST({\n          owner_uid: currentUserUid,\n          status: status,\n          currentUsername: currentUsername,\n          image: files[0],\n          posted_date: new Date(),\n          currentUserProfileImage: currentUserProfileImage,\n        });\n      } else {\n        alert(\"Image must be on jpg,png or jpeg format.\");\n      }\n    }\n  };\n\n  return (\n    <Modal title=\"Add Post\">\n      <div className={styles[\"Post-Upload-View\"]}>\n        {files.length < 1 && (\n          <section {...getRootProps()} className={styles.Dropzone}>\n            <input {...getInputProps()} />\n            {isDragActive ? (\n              <p>Drop the files here ...</p>\n            ) : (\n              <>\n                <span style={{ fontSize: \"50px\" }}>\n                  <FiImage />\n                </span>\n                <p>Drop your Image here</p>\n                <button>Select from device</button>\n              </>\n            )}\n          </section>\n        )}\n\n        {files.length > 0 && (\n          <section className={styles.FinalStep}>\n            <span>\n              <img\n                src={currentUserProfileImage}\n                alt=\"profile_image\"\n                className={styles.UserImage}\n              />\n              <input\n                type=\"text\"\n                value={status}\n                onChange={(e) => setStatus(e.target.value)}\n                placeholder=\"Type your status here\"\n              />\n              <button onClick={uploadPost}>upload</button>\n            </span>\n\n            {thumbs}\n          </section>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    currentUserProfileImage: state.user.currentUserData.profile_image_url,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    UPLOAD_POST: (post_data: any) =>\n      dispatch(postsActions.UPLOAD_POST(post_data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostUploadModal);\n","/home/rinku/codes/instaclone/client/src/components/Modal/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Modal/Modal.tsx",[],"/home/rinku/codes/instaclone/client/src/components/UserListView/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/UserListView/UserListView.tsx",[],"/home/rinku/codes/instaclone/client/src/components/PostOptionsView/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/PostOptionsView/PostOptionsView.tsx",[],"/home/rinku/codes/instaclone/client/src/components/ProfileOptionsView/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/ProfileOptionsView/ProfileOptionsView.tsx",[],"/home/rinku/codes/instaclone/client/src/components/Post/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Post/Post.tsx",["406"],"import { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport * as postsActions from \"../../redux/post/postsActions\";\nimport UserListView from \"../UserListView\";\nimport {\n  FiThumbsUp,\n  FiThumbsDown,\n  FiMessageSquare,\n  FiMoreHorizontal,\n} from \"react-icons/fi\";\nimport Backdrop from \"../Backdrop\";\nimport overflowToggler from \"../../utilities/overflowToggler\";\nimport PostOptionsView from \"../PostOptionsView\";\nimport placeholderImage from \"../../assets/placeholder.jpg\";\nimport lazyLoadImage from \"../../utilities/lazyLoadImage.js\";\nimport ProfilePicPlaceholder from \"../../assets/avatar.jpg\";\nimport styles from \"./Post.module.scss\";\n\ntype PostTypes = {\n  post_commentsCount: number;\n  post_image: string;\n  post_likesCount: number;\n  post_postedDate: string;\n  post_status: string;\n  post_id: string;\n  post_owner_uid: string;\n  post_uid: string;\n  poster_profileImage: string;\n  poster_username: string;\n  haveISaved: boolean;\n  haveILiked: boolean;\n  currentUsername: string;\n  currentUserUid: string;\n  currentUserProfileimage: string;\n  LIKE_POST: any;\n  UNLIKE_POST: any;\n  UNSAVE_POST: any;\n  SAVE_POST: any;\n  GET_LIKERS: any;\n  feedPosts: any;\n  likersLoading: any;\n  DELETE_POST: any;\n  ADD_MESSAGE: any;\n  toggleLoginPrompt?: any;\n  fullHeightPostImage?: boolean;\n};\n\nconst Post = ({\n  post_commentsCount,\n  post_image,\n  post_likesCount,\n  post_postedDate,\n  post_status,\n  post_id,\n  post_owner_uid,\n  post_uid,\n  poster_profileImage,\n  poster_username,\n  haveISaved,\n  haveILiked,\n  currentUsername,\n  currentUserUid,\n  currentUserProfileimage,\n  LIKE_POST,\n  UNLIKE_POST,\n  UNSAVE_POST,\n  SAVE_POST,\n  GET_LIKERS,\n  feedPosts,\n  likersLoading,\n  DELETE_POST,\n  ADD_MESSAGE,\n  toggleLoginPrompt,\n  fullHeightPostImage,\n}: PostTypes) => {\n  const thisPostLikers = feedPosts.filter(\n    (post: any) => post.post_uid === post_uid\n  )[0]?.post_likers;\n  const [showLikers, setShowLikers] = useState(false);\n  const [showPostOptionsModal, setShowPostOptionsModal] = useState(false);\n\n  const history = useHistory();\n\n  const likeUnlikePost = () => {\n    if (currentUsername) {\n      if (haveILiked) {\n        UNLIKE_POST(post_uid, currentUserUid, post_owner_uid);\n      } else {\n        LIKE_POST(post_uid, currentUserUid, post_owner_uid);\n      }\n    } else {\n      toggleLoginPrompt();\n    }\n  };\n\n  /*const saveUnsavePost = () => {\n    if (haveISaved) {\n      UNSAVE_POST(post_uid, currentUsername);\n    } else {\n      SAVE_POST(post_uid, currentUsername);\n    }\n  };*/\n\n  const toggleModal = (setShowModal: any) => {\n    overflowToggler();\n    setShowModal((prev: any) => !prev);\n  };\n\n  const getLikers = () => {\n    toggleModal(setShowLikers);\n    if (!thisPostLikers) {\n      GET_LIKERS(post_uid);\n    }\n  };\n\n  const deletePost = () => {\n    toggleModal(setShowPostOptionsModal);\n    DELETE_POST(post_uid);\n  };\n\n  return (\n    <Fragment>\n      <div className={styles.Post}>\n        <section className={styles.TopSection}>\n          <span>\n            <img\n              data-src={poster_profileImage}\n              src={ProfilePicPlaceholder}\n              className=\"lazy-image\"\n              onLoad={lazyLoadImage}\n              alt=\"post_user_image\"\n            />\n            <Link to={`/user/${poster_username}`}>{poster_username}</Link>\n            &#183;\n            <p>7min</p>\n          </span>\n\n          <button onClick={() => toggleModal(setShowPostOptionsModal)}>\n            <FiMoreHorizontal />\n          </button>\n        </section>\n\n        <p className={styles.Status}>{post_status}</p>\n\n        <section className={styles.ImageSection}>\n          <Link to={`/p/${post_id}`}>\n            <img\n              className=\"lazy-image\"\n              src={placeholderImage}\n              alt=\"post_main_img\"\n              data-src={post_image}\n              onLoad={lazyLoadImage}\n              style={fullHeightPostImage ? { height: \"auto\" } : undefined}\n            />\n          </Link>\n        </section>\n\n        <section className={styles.ActionButtons}>\n          <button\n            onClick={likeUnlikePost}\n            style={haveILiked ? { color: \"tomato\" } : undefined}\n          >\n            <FiThumbsUp />\n            <p>{post_likesCount === null ? 0 : post_likesCount}</p>\n          </button>\n\n          <button>\n            <FiThumbsDown />\n            <p>0</p>\n          </button>\n\n          <button onClick={() => history.push(`/p/${post_id}`)}>\n            <FiMessageSquare />\n            <p>{post_commentsCount}</p>\n          </button>\n        </section>\n\n        {/*<p>{post_status}</p>\n      \n\n      <div>\n        <button onClick={getLikers}>\n          {post_likesCount || \"No\"} {post_likesCount === 1 ? \"like\" : \"likes\"}\n        </button>\n        <button onClick={() => history.push(`/p/${post_id}`)}>\n          {post_commentsCount}{\" \"}\n          {post_commentsCount === 1 ? \"comment\" : \"comments\"}\n        </button>\n      </div>\n\n      <div>\n       \n      </div>\n  */}\n      </div>\n\n      {showLikers && (\n        <Fragment>\n          <UserListView\n            title=\"Likes\"\n            loading={likersLoading}\n            users={thisPostLikers || []}\n            toggle={() => toggleModal(setShowLikers)}\n          />\n          <Backdrop\n            show={showLikers}\n            toggle={() => toggleModal(setShowLikers)}\n          />\n        </Fragment>\n      )}\n\n      {showPostOptionsModal && (\n        <Fragment>\n          <PostOptionsView\n            toggle={() => toggleModal(setShowPostOptionsModal)}\n            isMyPost={poster_username === currentUsername}\n            deletePost={deletePost}\n            post_id={post_id}\n            AddMessage={ADD_MESSAGE}\n          />\n          <Backdrop\n            show={showPostOptionsModal}\n            toggle={() => toggleModal(setShowPostOptionsModal)}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    likersLoading: state.posts.loading_likers,\n    feedPosts: state.posts.posts.filter((post: any) => post.infeed === true),\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    currentUserProfileimage: state.user.currentUserData.profile_image_url,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    ADD_MESSAGE: (message: any) => dispatch(postsActions.ADD_MESSAGE(message)),\n    DELETE_POST: (post_uid: any) =>\n      dispatch(postsActions.DELETE_POST(post_uid)),\n    GET_LIKERS: (post_uid: any) => dispatch(postsActions.GET_LIKERS(post_uid)),\n    SAVE_POST: (post_uid: any, saver_username: any) =>\n      dispatch(postsActions.SAVE_POST(post_uid, saver_username)),\n    UNSAVE_POST: (post_uid: any, unsaver_username: any) =>\n      dispatch(postsActions.UNSAVE_POST(post_uid, unsaver_username)),\n    LIKE_POST: (post_uid: any, liker_uid: any, post_owner_uid: any) =>\n      dispatch(postsActions.LIKE_POST(post_uid, liker_uid, post_owner_uid)),\n    UNLIKE_POST: (post_uid: any, unliker_uid: any) =>\n      dispatch(postsActions.UNLIKE_POST(post_uid, unliker_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\n","/home/rinku/codes/instaclone/client/src/components/Feed/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Feed/Feed.tsx",[],"/home/rinku/codes/instaclone/client/src/components/LoginPrompt/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/LoginPrompt/LoginPrompt.tsx",[],"/home/rinku/codes/instaclone/client/src/pages/PostViewPage/index.ts",[],"/home/rinku/codes/instaclone/client/src/pages/PostViewPage/PostViewPage.tsx",["407","408","409","410"],"import { Fragment, useEffect, useState } from \"react\";\nimport * as PostsActions from \"../../redux/post/postsActions\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../../components/Loader\";\nimport overflowToggler from \"../../utilities/overflowToggler\";\nimport Backdrop from \"../../components/Backdrop\";\nimport CommentInput from \"../../components/CommentInput\";\nimport CommentsView from \"../../components/CommentsView\";\nimport {\n  deleteComment,\n  getCommentLikers,\n} from \"../../services/commentServices\";\nimport LoginPrompt from \"../../components/LoginPrompt\";\nimport Post from \"../../components/Post\";\nimport styles from \"./PostViewPage.module.scss\";\n\ntype PostViewPageTypes = {\n  currentUsername: string;\n  currentUserUid: string;\n  posts: any;\n  match: any;\n  history: any;\n  LOAD_POST: any;\n  loading: boolean;\n  GET_COMMENTS: any;\n  LIKE_COMMENT: any;\n  UNLIKE_COMMENT: any;\n  DELETE_COMMENT: any;\n  GET_COMMENT_LIKERS: any;\n  gettingCommentLikers: any;\n  userDataLoaded: boolean;\n  ADD_MESSAGE: any;\n  token: string;\n};\n\nconst PostViewPage = ({\n  currentUsername,\n  currentUserUid,\n  posts,\n  match,\n  history,\n  LOAD_POST,\n  loading,\n  GET_COMMENTS,\n  LIKE_COMMENT,\n  UNLIKE_COMMENT,\n  DELETE_COMMENT,\n  GET_COMMENT_LIKERS,\n  gettingCommentLikers,\n  userDataLoaded,\n  ADD_MESSAGE,\n  token,\n}: PostViewPageTypes) => {\n  const [showLoginNeededPrompt, setShowLoginNeededPrompt] = useState(false);\n  const post_id = match.params.post_id;\n  const currentPost = posts.filter((post: any) => post.post_id === post_id);\n  const thisPostComments = currentPost[0]?.comments;\n  const post_uid = currentPost[0]?.post_uid;\n\n  const toggleModal = (setModal: any) => {\n    setModal((prev: any) => !prev);\n    overflowToggler();\n  };\n\n  const getComments = () => {\n    if (!thisPostComments) {\n      GET_COMMENTS(post_uid, currentUserUid);\n    }\n  };\n\n  const likeUnlikeComment = (likeOrUnlike: any, comment_uid: any) => {\n    if (currentUserUid) {\n      if (likeOrUnlike === \"like\") {\n        LIKE_COMMENT(comment_uid, currentUserUid, post_uid);\n      } else {\n        UNLIKE_COMMENT(comment_uid, currentUserUid, post_uid);\n      }\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  const deleteComment = (comment_uid: any) => {\n    DELETE_COMMENT(comment_uid, post_uid);\n  };\n\n  const getCommentLikers = (comment_uid: any) => {\n    GET_COMMENT_LIKERS(comment_uid, post_uid);\n  };\n\n  useEffect(() => {\n    if (post_uid) {\n      getComments();\n    }\n  }, [post_uid]);\n\n  useEffect(() => {\n    document.body.style.overflow = \"auto\";\n    if (token) {\n      if (currentUserUid && currentPost.length < 1) {\n        LOAD_POST(post_id, currentUserUid);\n      }\n    } else {\n      LOAD_POST(post_id, currentUserUid);\n    }\n  }, [token, currentUserUid, post_id]);\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Loader />\n      ) : //checking if post exiists\n      !loading && !currentPost[0]?.post_image ? (\n        <p\n          style={{ marginTop: \"100px\", textAlign: \"center\", fontSize: \"15px\" }}\n        >\n          Post deleted or something went wrong!\n        </p>\n      ) : (\n        <div className={styles.PostViewPage}>\n          <Post\n            key={currentPost[0].post_uid}\n            post_id={currentPost[0].post_id}\n            haveILiked={currentPost[0].liked_by_me}\n            post_uid={currentPost[0].post_uid}\n            poster_username={currentPost[0].poster_username}\n            poster_profileImage={currentPost[0].poster_profileimage}\n            post_image={currentPost[0].post_image}\n            post_postedDate={currentPost[0].post_posted_date}\n            post_likesCount={currentPost[0].post_likes_count}\n            post_status={currentPost[0].post_status}\n            post_owner_uid={currentPost[0].poster_uid}\n            post_commentsCount={currentPost[0].post_comments_count}\n            haveISaved={currentPost[0].i_have_saved}\n            toggleLoginPrompt={() => toggleModal(setShowLoginNeededPrompt)}\n            fullHeightPostImage\n          />\n\n          <CommentInput\n            post_uid={post_uid}\n            post_owner_uid={currentPost[0]?.poster_uid}\n            toggleLoginNeededPrompt={() =>\n              toggleModal(setShowLoginNeededPrompt)\n            }\n          />\n\n          {thisPostComments !== undefined && (\n            <CommentsView\n              comments={thisPostComments || []}\n              likeUnlikeComment={likeUnlikeComment}\n              currentUserUid={currentUserUid}\n              deleteComment={deleteComment}\n              currentUsername={currentUsername}\n              getCommentLikers={getCommentLikers}\n              gettingCommentLikers={gettingCommentLikers}\n            />\n          )}\n        </div>\n      )}\n\n      {showLoginNeededPrompt ? (\n        <Fragment>\n          <LoginPrompt toggle={() => toggleModal(setShowLoginNeededPrompt)} />\n          <Backdrop\n            show={showLoginNeededPrompt}\n            toggle={() => toggleModal(setShowLoginNeededPrompt)}\n          />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    token: state.user.token,\n    userDataLoaded: state.user.user_data_loaded,\n    gettingCommentLikers: state.posts.getting_comment_likers,\n    loadingLikers: state.posts.loading_likers,\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    posts: state.posts.posts,\n    loading: state.posts.loading_post,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    ADD_MESSAGE: (message: any) => dispatch(PostsActions.ADD_MESSAGE(message)),\n    GET_COMMENT_LIKERS: (comment_uid: any, post_uid: any) =>\n      dispatch(PostsActions.GET_COMMENT_LIKERS(comment_uid, post_uid)),\n    DELETE_COMMENT: (comment_uid: any, post_uid: any) =>\n      dispatch(PostsActions.DELETE_COMMENT(comment_uid, post_uid)),\n    LIKE_COMMENT: (comment_uid: any, liker_uid: any, post_uid: any) =>\n      dispatch(PostsActions.LIKE_COMMENT(comment_uid, liker_uid, post_uid)),\n    UNLIKE_COMMENT: (comment_uid: any, unliker_uid: any, post_uid: any) =>\n      dispatch(PostsActions.UNLIKE_COMMENT(comment_uid, unliker_uid, post_uid)),\n    GET_COMMENTS: (post_uid: any, currentUserUid: any) =>\n      dispatch(PostsActions.GET_COMMENTS(post_uid, currentUserUid)),\n    LOAD_POST: (post_id: any, current_user_uid: any) =>\n      dispatch(PostsActions.GET_POST(post_id, current_user_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostViewPage);\n","/home/rinku/codes/instaclone/client/src/components/CommentInput/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/CommentInput/CommentInput.tsx",[],"/home/rinku/codes/instaclone/client/src/components/CommentsView/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/CommentsView/CommentsView.tsx",[],"/home/rinku/codes/instaclone/client/src/components/Comment/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Comment/Comment.tsx",["411"],"import { Fragment, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport overflowToggler from \"../../utilities/overflowToggler\";\nimport Backdrop from \"./../Backdrop\";\nimport UserListView from \"./../UserListView\";\nimport lazyLoadImage from \"../../utilities/lazyLoadImage.js\";\nimport ProfilePicPlaceholder from \"../../assets/avatar.jpg\";\nimport styles from \"./Comment.module.scss\";\n\ntype CommentTypes = {\n  comments: any;\n  comment: any;\n  likeUnlikeComment: any;\n  currentUserUid: string;\n  currentUsername: string;\n  deleteComment: any;\n  getCommentLikers: any;\n  gettingCommentLikers: boolean;\n};\n\nconst Comment = ({\n  comments,\n  comment,\n  likeUnlikeComment,\n  currentUserUid,\n  currentUsername,\n  deleteComment,\n  getCommentLikers,\n  gettingCommentLikers,\n}: CommentTypes) => {\n  const [showCommentLikers, setShowCommentLikers] = useState(false);\n  const commentLikers = comments.filter(\n    (cmt: any) => cmt.comment_uid === comment.comment_uid\n  )[0]?.likers;\n\n  const toggleModal = (setModal: any) => {\n    setModal((prev: any) => !prev);\n    overflowToggler();\n  };\n\n  const loadCommentLikers = () => {\n    toggleModal(setShowCommentLikers);\n    if (!commentLikers) {\n      getCommentLikers(comment.comment_uid);\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className={styles.Comment}>\n        <img\n          data-src={comment.poster_profile_image}\n          src={ProfilePicPlaceholder}\n          className=\"lazy-image\"\n          onLoad={lazyLoadImage}\n          alt=\"profile-image\"\n        />\n\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <div>\n            <p className={styles.Username}>\n              <NavLink to={`/${comment.poster_username}`}>\n                {comment.poster_username}\n              </NavLink>{\" \"}\n              {comment.comment}\n            </p>\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              marginTop: \"-15px\",\n            }}\n          >\n            <p>1h</p>\n            <button onClick={loadCommentLikers}>\n              {comment.comment_likes_count || 0}{\" \"}\n              {comment.comment_likes_count === 1 ? \"like\" : \"likes\"}\n            </button>\n            <button\n              onClick={() =>\n                likeUnlikeComment(\n                  comment.liked_by_me ? \"unlike\" : \"like\",\n                  comment.comment_uid\n                )\n              }\n            >\n              {comment.liked_by_me ? \"unlike\" : \"like\"}\n            </button>\n            <button\n              style={\n                currentUserUid === comment.post_owner_uid ||\n                currentUsername === comment.poster_username\n                  ? { color: \"red\" }\n                  : { display: \"none\" }\n              }\n              onClick={() => deleteComment(comment.comment_uid)}\n            >\n              delete\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {showCommentLikers ? (\n        <Fragment>\n          <UserListView\n            title=\"Likes\"\n            loading={gettingCommentLikers}\n            toggle={() => toggleModal(setShowCommentLikers)}\n            users={commentLikers || []}\n          />\n          <Backdrop\n            show={showCommentLikers}\n            toggle={() => toggleModal(setShowCommentLikers)}\n          />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nexport default Comment;\n","/home/rinku/codes/instaclone/client/src/index.tsx",[],"/home/rinku/codes/instaclone/client/src/components/App.tsx",["412","413"],"import React, { useEffect, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport ExplorePage from \"../pages/ExplorePage\";\nimport HomePage from \"../pages/HomePage\";\nimport PostViewPage from \"../pages/PostViewPage\";\nimport ProfilePage from \"../pages/ProfilePage\";\nimport LandingPage from \"../pages/LandingPage\";\nimport LoginPage from \"../pages/LoginPage\";\nimport RegisterPage from \"../pages/RegisterPage\";\nimport Layout from \"./Layout\";\nimport * as userActions from \"../redux/user/userActions\";\nimport * as postActions from \"../redux/post/postsActions\";\nimport Logo from \"./Logo\";\nimport EditProfilePage from \"../pages/EditProfilePage\";\nimport MessageView from \"./MessageView\";\nimport EditPasswordPage from \"../pages/EditPasswordPage\";\nimport NotificationsPage from \"../pages/NotificationsPage\";\n\ntype AppTypes = {\n  currentUsername: string;\n  uploadingPost: boolean;\n  LOGIN_WITH_UID: any;\n  token: string;\n  userDataLoaded: boolean;\n  feedLoaded: boolean;\n  ADD_MESSAGE: any;\n  message: string;\n};\n\nconst App = ({\n  currentUsername,\n  uploadingPost,\n  LOGIN_WITH_UID,\n  token,\n  userDataLoaded,\n  feedLoaded,\n  ADD_MESSAGE,\n  message,\n}: AppTypes) => {\n  useEffect(() => {\n    if (feedLoaded) {\n      if (uploadingPost) {\n        ADD_MESSAGE(\"Uploading your post. it may take couple of seconds.\");\n      } else {\n        ADD_MESSAGE(\"Successfully uploaded a post.\");\n        setTimeout(() => {\n          ADD_MESSAGE(null);\n        }, 3000);\n      }\n    }\n  }, [uploadingPost]);\n\n  useEffect(() => {\n    if (token) {\n      LOGIN_WITH_UID(token);\n    }\n  }, [token]);\n\n  return (\n    <BrowserRouter>\n      {token && !userDataLoaded ? (\n        <div\n          style={{\n            width: \"100vw\",\n            height: \"100vh\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            fontSize: \"75px\",\n          }}\n        >\n          <Logo />\n        </div>\n      ) : (\n        <Fragment>\n          {message ? <MessageView message={message} /> : null}\n\n          <Switch>\n            {!currentUsername && (\n              <Route path=\"/\" exact component={LandingPage} />\n            )}\n            <Route path=\"/login\" exact component={LoginPage} />\n            <Route path=\"/register\" exact component={RegisterPage} />\n\n            <Layout>\n              <>\n                {currentUsername && (\n                  <Route path=\"/\" exact component={HomePage} />\n                )}\n                <Route path=\"/edit/profile\" exact component={EditProfilePage} />\n                <Route path=\"/explore\" exact component={ExplorePage} />\n                <Route path=\"/user/:username\" exact component={ProfilePage} />\n                <Route path=\"/p/:post_id\" exact component={PostViewPage} />\n                <Route\n                  path=\"/edit/password\"\n                  exact\n                  component={EditPasswordPage}\n                />\n                <Route\n                  path=\"/notifications\"\n                  exact\n                  component={NotificationsPage}\n                />\n              </>\n            </Layout>\n          </Switch>\n        </Fragment>\n      )}\n    </BrowserRouter>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    message: state.posts.message,\n    feedLoaded: state.posts.feed_loaded,\n    uploadingPost: state.posts.uploadingPost,\n    userDataLoaded: state.user.user_data_loaded,\n    token: state.user.token,\n    currentUsername: state.user.currentUserData.username,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    ADD_MESSAGE: (message: string) =>\n      dispatch(postActions.ADD_MESSAGE(message)),\n    LOGIN_WITH_UID: (uid: string) => dispatch(userActions.LOGIN_WITH_UID(uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/home/rinku/codes/instaclone/client/src/components/MessageView/index.ts",[],"/home/rinku/codes/instaclone/client/src/pages/EditProfilePage/index.ts",[],"/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage/index.ts",[],"/home/rinku/codes/instaclone/client/src/server_url.tsx",[],"/home/rinku/codes/instaclone/client/src/components/MessageView/MessageView.tsx",[],"/home/rinku/codes/instaclone/client/src/pages/EditProfilePage/EditProfilePage.tsx",["414"],"import { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  updateUserData,\n  updateProfilePicture,\n} from \"../../services/userServices\";\nimport storage from \"../../firebase/storage\";\nimport Compressor from \"compressorjs\";\nimport { Link } from \"react-router-dom\";\nimport * as postActions from \"../../redux/post/postsActions\";\nimport * as userActions from \"../../redux/user/userActions\";\nimport styles from \"./EditProfilePage.module.scss\";\n\ntype EditProfilePageTypes = {\n  currentUserProfileImage: string;\n  currentUserName: string;\n  currentUserUid: string;\n  currentUserBio: string;\n  currentUserEmail: string;\n  ADD_MESSAGE: any;\n  UPDATE_PROFILE_LOCALLY: any;\n};\n\nconst EditProfilePage = ({\n  currentUserProfileImage,\n  currentUserName,\n  currentUserUid,\n  currentUserBio,\n  currentUserEmail,\n  ADD_MESSAGE,\n  UPDATE_PROFILE_LOCALLY,\n}: EditProfilePageTypes) => {\n  const [username, setUsername] = useState(currentUserName);\n  const [email, setEmail] = useState(currentUserEmail);\n  const [bio, setBio] = useState(currentUserBio);\n  const [updating, setUpdating] = useState(false);\n  const [updatingProfilePicture, setUpdatingProfilePicture] = useState(false);\n\n  //image file\n  const [selectedImage, setSelectedImage] = useState(null);\n  const newImage = selectedImage ? URL.createObjectURL(selectedImage) : null;\n\n  const updateImage = (e: any) => {\n    const file = e.target.files[0];\n    if (file) {\n      if (\n        file.name\n          .slice(file.name.slice(file.name.lastIndexOf(\".\")))\n          .includes(\"jpg\", \"png\", \"jpeg\")\n      ) {\n        setSelectedImage(e.target.files[0]);\n      } else {\n        ADD_MESSAGE(\"Image must be on jpg,png or jpeg format.\");\n      }\n    }\n\n    setTimeout(() => {\n      ADD_MESSAGE(null);\n    }, 3000);\n  };\n\n  const updateProfilePictureFinal = () => {\n    if (selectedImage && !updatingProfilePicture) {\n      setUpdatingProfilePicture(true);\n      new Compressor(selectedImage, {\n        quality: 0.6,\n        success(result: any) {\n          const uploadedImage = storage\n            .ref(`/profilePics/${currentUserUid}/${result.name}`)\n            .put(result);\n          uploadedImage.on(\n            \"state_changed\",\n            (snapshot) => {},\n            (err) => console.log(err),\n            () => {\n              storage\n                .ref(`/profilePics/${currentUserUid}`)\n                .child(result.name)\n                .getDownloadURL()\n                .then((url) => {\n                  updateProfilePicture(currentUserUid, url)\n                    .then((res) => {\n                      if (res === \"done\") {\n                        ADD_MESSAGE(\"Successfully updated the profile picture\");\n                      } else {\n                        ADD_MESSAGE(res);\n                      }\n                      setUpdating(false);\n                    })\n                    .catch((err) => ADD_MESSAGE(err.message));\n                });\n            }\n          );\n        },\n      });\n    }\n  };\n\n  const updateProfile = (e: any) => {\n    e.preventDefault();\n    setUpdating(true);\n\n    if (\n      username === currentUserName &&\n      email === currentUserEmail &&\n      bio === currentUserBio\n    ) {\n      ADD_MESSAGE(\"Nothing to Update.\");\n      setUpdating(false);\n    } else {\n      if (\n        !username.trim().includes(\" \") &&\n        username.trim().length >= 5 &&\n        username.trim().length <= 25\n      ) {\n        updateUserData(\n          username.trim().toLowerCase(),\n          email || \"\",\n          bio || \"\",\n          currentUserName\n        ).then((res) => {\n          if (res !== \"success\") {\n            ADD_MESSAGE(res);\n          } else {\n            ADD_MESSAGE(\"Successfully updated the profile.\");\n            UPDATE_PROFILE_LOCALLY({ bio, username, email });\n          }\n          setUpdating(false);\n        });\n      } else {\n        setUpdating(false);\n        ADD_MESSAGE(\"Username must be spaceless between 5 and 25 characters.\");\n      }\n    }\n\n    setTimeout(() => {\n      ADD_MESSAGE(null);\n    }, 3000);\n  };\n\n  return (\n    <div className={styles.EditProfilePage}>\n      <section className={styles.SectionOne}>\n        <img src={newImage || currentUserProfileImage} alt=\"profile-image\" />\n\n        <div>\n          <p>{currentUserName}</p>\n          <label\n            htmlFor=\"image\"\n            style={newImage ? { display: \"none\" } : undefined}\n          >\n            Change Profile Photo\n          </label>\n          <label\n            htmlFor=\"u-btn\"\n            style={!newImage ? { display: \"none\" } : undefined}\n          >\n            {updatingProfilePicture\n              ? \"Updating Profile Picture..\"\n              : \"Confirm New Profile Photo\"}\n          </label>\n          <button\n            style={{ display: \"none\" }}\n            id=\"u-btn\"\n            onClick={updateProfilePictureFinal}\n          >\n            Update Profile Photo\n          </button>\n          <input\n            type=\"file\"\n            style={{ display: \"none\" }}\n            id=\"image\"\n            onChange={updateImage}\n            accept=\"image/*\"\n          />\n        </div>\n      </section>\n\n      <section>\n        <form onSubmit={updateProfile}>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            type=\"text\"\n            value={username.toLowerCase()}\n            id=\"username\"\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"text\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n          <label htmlFor=\"Bio\">Bio</label>\n          <textarea onChange={(e) => setBio(e.target.value)}>{bio}</textarea>\n\n          <button\n            disabled={updating}\n            className={styles.SubmitButton}\n            onClick={updateProfile}\n          >\n            Submit\n          </button>\n          <Link to=\"/edit/password\">Change Password</Link>\n        </form>\n      </section>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    currentUserEmail: state.user.currentUserData.email,\n    currentUserBio: state.user.currentUserData.bio,\n    currentUserProfileImage: state.user.currentUserData.profile_image_url,\n    currentUserName: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    UPDATE_PROFILE_LOCALLY: (data: any) =>\n      dispatch(userActions.UPDATE_PROFILE_LOCALLY(data)),\n    ADD_MESSAGE: (message: any) => dispatch(postActions.ADD_MESSAGE(message)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProfilePage);\n","/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage/EditPasswordPage.tsx",[],"/home/rinku/codes/instaclone/client/src/components/Backdrop/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt/index.ts",[],"/home/rinku/codes/instaclone/client/src/components/Backdrop/Backdrop.tsx",[],"/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt/UnfollowPrompt.tsx",[],{"ruleId":"415","replacedBy":"416"},{"ruleId":"417","replacedBy":"418"},{"ruleId":"415","replacedBy":"419"},{"ruleId":"417","replacedBy":"420"},{"ruleId":"415","replacedBy":"416"},{"ruleId":"417","replacedBy":"418"},{"ruleId":"421","severity":1,"message":"422","line":22,"column":25,"nodeType":"423","messageId":"424","endLine":22,"endColumn":29},{"ruleId":"425","severity":1,"message":"426","line":34,"column":6,"nodeType":"427","endLine":34,"endColumn":23,"suggestions":"428"},{"ruleId":"425","severity":1,"message":"429","line":31,"column":6,"nodeType":"427","endLine":31,"endColumn":8,"suggestions":"430"},{"ruleId":"425","severity":1,"message":"431","line":29,"column":6,"nodeType":"427","endLine":29,"endColumn":34,"suggestions":"432"},{"ruleId":"433","severity":1,"message":"434","line":60,"column":26,"nodeType":"423","messageId":"435","endLine":60,"endColumn":43},{"ruleId":"425","severity":1,"message":"436","line":115,"column":6,"nodeType":"427","endLine":115,"endColumn":39,"suggestions":"437"},{"ruleId":"433","severity":1,"message":"438","line":6,"column":8,"nodeType":"423","messageId":"435","endLine":6,"endColumn":15},{"ruleId":"439","severity":1,"message":"440","line":35,"column":9,"nodeType":"441","endLine":41,"endColumn":11},{"ruleId":"433","severity":1,"message":"442","line":11,"column":9,"nodeType":"423","messageId":"435","endLine":11,"endColumn":16},{"ruleId":"425","severity":1,"message":"443","line":24,"column":6,"nodeType":"427","endLine":24,"endColumn":8,"suggestions":"444"},{"ruleId":"425","severity":1,"message":"429","line":30,"column":6,"nodeType":"427","endLine":30,"endColumn":8,"suggestions":"445"},{"ruleId":"446","severity":1,"message":"447","line":43,"column":9,"nodeType":"441","endLine":43,"endColumn":68},{"ruleId":"433","severity":1,"message":"448","line":110,"column":9,"nodeType":"423","messageId":"435","endLine":110,"endColumn":18},{"ruleId":"433","severity":1,"message":"449","line":10,"column":3,"nodeType":"423","messageId":"435","endLine":10,"endColumn":16},{"ruleId":"433","severity":1,"message":"450","line":11,"column":3,"nodeType":"423","messageId":"435","endLine":11,"endColumn":19},{"ruleId":"425","severity":1,"message":"451","line":95,"column":6,"nodeType":"427","endLine":95,"endColumn":16,"suggestions":"452"},{"ruleId":"425","severity":1,"message":"453","line":106,"column":6,"nodeType":"427","endLine":106,"endColumn":38,"suggestions":"454"},{"ruleId":"439","severity":1,"message":"440","line":51,"column":9,"nodeType":"441","endLine":57,"endColumn":11},{"ruleId":"425","severity":1,"message":"455","line":52,"column":6,"nodeType":"427","endLine":52,"endColumn":21,"suggestions":"456"},{"ruleId":"425","severity":1,"message":"457","line":58,"column":6,"nodeType":"427","endLine":58,"endColumn":13,"suggestions":"458"},{"ruleId":"439","severity":1,"message":"440","line":144,"column":9,"nodeType":"441","endLine":144,"endColumn":78},"no-native-reassign",["459"],"no-negated-in-lhs",["460"],["459"],["460"],"@typescript-eslint/no-redeclare","'Form' is already defined.","Identifier","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["461"],"React Hook useEffect has a missing dependency: 'currentUserUid'. Either include it or remove the dependency array.",["462"],"React Hook useEffect has a missing dependency: 'GET_FEED'. Either include it or remove the dependency array. If 'GET_FEED' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["463"],"@typescript-eslint/no-unused-vars","'setShowSavedPosts' is assigned a value but never used.","unusedVar","React Hook useEffect has missing dependencies: 'GET_PROFILE_DATA' and 'profileData.length'. Either include them or remove the dependency array. If 'GET_PROFILE_DATA' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["464"],"'Linkify' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'explorePosts.length' and 'loadExplorePosts'. Either include them or remove the dependency array. If 'loadExplorePosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["465"],["466"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'getLikers' is assigned a value but never used.","'deleteComment' is defined but never used.","'getCommentLikers' is defined but never used.","React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["467"],"React Hook useEffect has missing dependencies: 'LOAD_POST' and 'currentPost.length'. Either include them or remove the dependency array. If 'LOAD_POST' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["468"],"React Hook useEffect has missing dependencies: 'ADD_MESSAGE' and 'feedLoaded'. Either include them or remove the dependency array. If 'ADD_MESSAGE' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["469"],"React Hook useEffect has a missing dependency: 'LOGIN_WITH_UID'. Either include it or remove the dependency array. If 'LOGIN_WITH_UID' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["470"],"no-global-assign","no-unsafe-negation",{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"473","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},"Update the dependencies array to be: [currentUsername, history]",{"range":"490","text":"491"},"Update the dependencies array to be: [currentUserUid]",{"range":"492","text":"493"},"Update the dependencies array to be: [GET_FEED, currentUserUid, feedLoaded]",{"range":"494","text":"495"},"Update the dependencies array to be: [profileUsername, currentUserUid, profileData.length, GET_PROFILE_DATA]",{"range":"496","text":"497"},"Update the dependencies array to be: [explorePosts.length, loadExplorePosts]",{"range":"498","text":"499"},{"range":"500","text":"493"},"Update the dependencies array to be: [getComments, post_uid]",{"range":"501","text":"502"},"Update the dependencies array to be: [token, currentUserUid, post_id, currentPost.length, LOAD_POST]",{"range":"503","text":"504"},"Update the dependencies array to be: [ADD_MESSAGE, feedLoaded, uploadingPost]",{"range":"505","text":"506"},"Update the dependencies array to be: [LOGIN_WITH_UID, token]",{"range":"507","text":"508"},[739,756],"[currentUsername, history]",[920,922],"[currentUserUid]",[687,715],"[GET_FEED, currentUserUid, feedLoaded]",[3404,3437],"[profileUsername, currentUserUid, profileData.length, GET_PROFILE_DATA]",[635,637],"[explorePosts.length, loadExplorePosts]",[1023,1025],[2480,2490],"[getComments, post_uid]",[2746,2778],"[token, currentUserUid, post_id, currentPost.length, LOAD_POST]",[1542,1557],"[ADD_MESSAGE, feedLoaded, uploadingPost]",[1638,1645],"[LOGIN_WITH_UID, token]"]