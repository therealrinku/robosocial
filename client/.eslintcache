[{"/home/rinku/codes/instaclone/client/src/index.js":"1","/home/rinku/codes/instaclone/client/src/components/App.js":"2","/home/rinku/codes/instaclone/client/src/redux/store.js":"3","/home/rinku/codes/instaclone/client/src/components/PostButton.js":"4","/home/rinku/codes/instaclone/client/src/components/AddPostModal.js":"5","/home/rinku/codes/instaclone/client/src/components/Backdrop.js":"6","/home/rinku/codes/instaclone/client/src/components/MessageViewer.js":"7","/home/rinku/codes/instaclone/client/src/redux/rootReducer.js":"8","/home/rinku/codes/instaclone/client/src/pages/ExplorePage.js":"9","/home/rinku/codes/instaclone/client/src/pages/Homepage.js":"10","/home/rinku/codes/instaclone/client/src/pages/Landingpage.js":"11","/home/rinku/codes/instaclone/client/src/pages/PostView.js":"12","/home/rinku/codes/instaclone/client/src/pages/Loginpage.js":"13","/home/rinku/codes/instaclone/client/src/pages/Profilepage.js":"14","/home/rinku/codes/instaclone/client/src/pages/Signuppage.js":"15","/home/rinku/codes/instaclone/client/src/pages/EditProfilePage.js":"16","/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage.js":"17","/home/rinku/codes/instaclone/client/src/redux/user/userActions.js":"18","/home/rinku/codes/instaclone/client/src/redux/post/postsActions.js":"19","/home/rinku/codes/instaclone/client/src/utilities/overflowToggler.js":"20","/home/rinku/codes/instaclone/client/src/components/Loader.js":"21","/home/rinku/codes/instaclone/client/src/redux/post/postsReducer.js":"22","/home/rinku/codes/instaclone/client/src/components/PostsGrid.js":"23","/home/rinku/codes/instaclone/client/src/redux/user/userReducer.js":"24","/home/rinku/codes/instaclone/client/src/components/SearchView.js":"25","/home/rinku/codes/instaclone/client/src/components/Recommended.js":"26","/home/rinku/codes/instaclone/client/src/components/Feed.js":"27","/home/rinku/codes/instaclone/client/src/components/PostOptModal.js":"28","/home/rinku/codes/instaclone/client/src/components/UserListModal.js":"29","/home/rinku/codes/instaclone/client/src/components/CommentBox.js":"30","/home/rinku/codes/instaclone/client/src/components/CommentsView.js":"31","/home/rinku/codes/instaclone/client/src/components/LoginNeededPrompt.js":"32","/home/rinku/codes/instaclone/client/src/components/ProfileOptModal.js":"33","/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt.js":"34","/home/rinku/codes/instaclone/client/src/utilities/notificationPusher.js":"35","/home/rinku/codes/instaclone/client/src/redux/post/postsActionTypes.js":"36","/home/rinku/codes/instaclone/client/src/components/ProfileButtonLine.js":"37","/home/rinku/codes/instaclone/client/src/components/ProfileSummary.js":"38","/home/rinku/codes/instaclone/client/src/redux/user/userActionTypes.js":"39","/home/rinku/codes/instaclone/client/src/redux/profile/profileReducer.js":"40","/home/rinku/codes/instaclone/client/src/redux/profile/ProfileActions.js":"41","/home/rinku/codes/instaclone/client/src/redux/profile/profileActionTypes.js":"42","/home/rinku/codes/instaclone/client/src/Icons/CustomIcons.js":"43","/home/rinku/codes/instaclone/client/src/services/userServices.js":"44","/home/rinku/codes/instaclone/client/src/services/authServices.js":"45","/home/rinku/codes/instaclone/client/src/services/postsServices.js":"46","/home/rinku/codes/instaclone/client/src/services/commentServices.js":"47","/home/rinku/codes/instaclone/client/src/services/profileServices.js":"48","/home/rinku/codes/instaclone/client/src/firebase/storage.js":"49","/home/rinku/codes/instaclone/client/src/firebase/firestore.js":"50","/home/rinku/codes/instaclone/client/src/components/Post.js":"51","/home/rinku/codes/instaclone/client/src/components/Comment.js":"52","/home/rinku/codes/instaclone/client/src/firebase/firebase.js":"53","/home/rinku/codes/instaclone/client/src/server_url.js":"54","/home/rinku/codes/instaclone/client/src/utilities/clearNotification.js":"55","/home/rinku/codes/instaclone/client/src/components/Sidebar.js":"56","/home/rinku/codes/instaclone/client/src/components/Topbar.js":"57","/home/rinku/codes/instaclone/client/src/components/Layout.js":"58","/home/rinku/codes/instaclone/client/src/pages/ActivityPage.js":"59"},{"size":358,"mtime":1625832904820,"results":"60","hashOfConfig":"61"},{"size":4269,"mtime":1626004667059,"results":"62","hashOfConfig":"61"},{"size":407,"mtime":1625733920243,"results":"63","hashOfConfig":"61"},{"size":895,"mtime":1625733920239,"results":"64","hashOfConfig":"61"},{"size":1863,"mtime":1625733920239,"results":"65","hashOfConfig":"61"},{"size":344,"mtime":1625848128594,"results":"66","hashOfConfig":"61"},{"size":163,"mtime":1625733920239,"results":"67","hashOfConfig":"61"},{"size":333,"mtime":1625733920243,"results":"68","hashOfConfig":"61"},{"size":988,"mtime":1625832728617,"results":"69","hashOfConfig":"61"},{"size":1187,"mtime":1625921651870,"results":"70","hashOfConfig":"61"},{"size":149,"mtime":1625733920243,"results":"71","hashOfConfig":"61"},{"size":5470,"mtime":1625982396957,"results":"72","hashOfConfig":"61"},{"size":1593,"mtime":1625986051419,"results":"73","hashOfConfig":"61"},{"size":7730,"mtime":1626004824551,"results":"74","hashOfConfig":"61"},{"size":2430,"mtime":1625985839651,"results":"75","hashOfConfig":"61"},{"size":5861,"mtime":1625832763416,"results":"76","hashOfConfig":"61"},{"size":2570,"mtime":1625832775831,"results":"77","hashOfConfig":"61"},{"size":2885,"mtime":1625733920243,"results":"78","hashOfConfig":"61"},{"size":8397,"mtime":1625733920243,"results":"79","hashOfConfig":"61"},{"size":222,"mtime":1625733920259,"results":"80","hashOfConfig":"61"},{"size":395,"mtime":1625733920239,"results":"81","hashOfConfig":"61"},{"size":8144,"mtime":1625976632370,"results":"82","hashOfConfig":"61"},{"size":504,"mtime":1626004273815,"results":"83","hashOfConfig":"61"},{"size":2142,"mtime":1625733920243,"results":"84","hashOfConfig":"61"},{"size":1575,"mtime":1626092084805,"results":"85","hashOfConfig":"61"},{"size":2368,"mtime":1626004636095,"results":"86","hashOfConfig":"61"},{"size":994,"mtime":1625921626593,"results":"87","hashOfConfig":"61"},{"size":2605,"mtime":1626101373968,"results":"88","hashOfConfig":"61"},{"size":898,"mtime":1626004627027,"results":"89","hashOfConfig":"61"},{"size":2036,"mtime":1625733920239,"results":"90","hashOfConfig":"61"},{"size":966,"mtime":1625976469326,"results":"91","hashOfConfig":"61"},{"size":590,"mtime":1625733920239,"results":"92","hashOfConfig":"61"},{"size":1246,"mtime":1625921908155,"results":"93","hashOfConfig":"61"},{"size":713,"mtime":1625821766154,"results":"94","hashOfConfig":"61"},{"size":307,"mtime":1625733920259,"results":"95","hashOfConfig":"61"},{"size":994,"mtime":1625733920243,"results":"96","hashOfConfig":"61"},{"size":759,"mtime":1625820342667,"results":"97","hashOfConfig":"61"},{"size":2312,"mtime":1626005152275,"results":"98","hashOfConfig":"61"},{"size":418,"mtime":1625733920243,"results":"99","hashOfConfig":"61"},{"size":2906,"mtime":1625733920243,"results":"100","hashOfConfig":"61"},{"size":2909,"mtime":1625733920243,"results":"101","hashOfConfig":"61"},{"size":472,"mtime":1625733920243,"results":"102","hashOfConfig":"61"},{"size":10091,"mtime":1625733920231,"results":"103","hashOfConfig":"61"},{"size":1793,"mtime":1625982926783,"results":"104","hashOfConfig":"61"},{"size":943,"mtime":1625733920259,"results":"105","hashOfConfig":"61"},{"size":3650,"mtime":1625733920259,"results":"106","hashOfConfig":"61"},{"size":1676,"mtime":1625982938087,"results":"107","hashOfConfig":"61"},{"size":2327,"mtime":1625733920259,"results":"108","hashOfConfig":"61"},{"size":124,"mtime":1625733920243,"results":"109","hashOfConfig":"61"},{"size":362,"mtime":1625733920243,"results":"110","hashOfConfig":"61"},{"size":8390,"mtime":1626005367135,"results":"111","hashOfConfig":"61"},{"size":4310,"mtime":1625975684398,"results":"112","hashOfConfig":"61"},{"size":438,"mtime":1625733920243,"results":"113","hashOfConfig":"61"},{"size":84,"mtime":1625733920247,"results":"114","hashOfConfig":"61"},{"size":194,"mtime":1625733920259,"results":"115","hashOfConfig":"61"},{"size":2263,"mtime":1626091967347,"results":"116","hashOfConfig":"61"},{"size":484,"mtime":1626092070308,"results":"117","hashOfConfig":"61"},{"size":432,"mtime":1626092383900,"results":"118","hashOfConfig":"61"},{"size":2902,"mtime":1626004615203,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"1o123u4",{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"122"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"122"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"122"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"122"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"122"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"122"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"122"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"122"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"122"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"122"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"122"},"/home/rinku/codes/instaclone/client/src/index.js",[],["251","252"],"/home/rinku/codes/instaclone/client/src/components/App.js",["253","254"],"import React, { useEffect, useState, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport ExplorePage from \"../pages/ExplorePage\";\nimport Homepage from \"../pages/Homepage\";\nimport PostView from \"../pages/PostView\";\nimport Profilepage from \"../pages/Profilepage\";\nimport Landingpage from \"../pages/Landingpage\";\nimport Loginpage from \"../pages/Loginpage\";\nimport Signuppage from \"../pages/Signuppage\";\nimport * as userActions from \"../redux/user/userActions\";\nimport * as postActions from \"../redux/post/postsActions\";\nimport { SiInstagram } from \"react-icons/all\";\nimport PostButton from \"../components/PostButton\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport AddPostModal from \"../components/AddPostModal\";\nimport Backdrop from \"../components/Backdrop\";\nimport EditProfilePage from \"../pages/EditProfilePage\";\nimport MessageViewer from \"./MessageViewer\";\nimport EditPasswordPage from \"../pages/EditPasswordPage\";\nimport Layout from \"./Layout\";\nimport ActivityPage from \"../pages/ActivityPage\";\n\nconst App = ({\n  currentUsername,\n  uploadingPost,\n  LOGIN_WITH_UID,\n  token,\n  userDataLoaded,\n  feedLoaded,\n  ADD_MESSAGE,\n  message,\n}) => {\n  const [selectedImage, setSelectedImage] = useState(\"\");\n  const [showAddPostModal, setShowAddPostModal] = useState(false);\n  //msg\n\n  const toggleAddPostModal = () => {\n    setShowAddPostModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  useEffect(() => {\n    if (feedLoaded) {\n      if (uploadingPost) {\n        ADD_MESSAGE(\"Uploading your post. it may take couple of seconds.\");\n      } else {\n        ADD_MESSAGE(\"Successfully uploaded a post.\");\n        setTimeout(() => {\n          ADD_MESSAGE(null);\n        }, 3000);\n      }\n    }\n  }, [uploadingPost]);\n\n  useEffect(() => {\n    if (token) {\n      LOGIN_WITH_UID(token);\n    }\n  }, [token]);\n\n  return (\n    <BrowserRouter>\n      {token && !userDataLoaded ? (\n        <div\n          style={{\n            width: \"100vw\",\n            height: \"100vh\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            fontSize: \"45px\",\n            color: \"rgba(0,0,0,0.5)\",\n          }}\n        >\n          <SiInstagram />\n        </div>\n      ) : (\n        <Fragment>\n          {showAddPostModal ? (\n            <Fragment>\n              <Backdrop show={showAddPostModal} toggle={toggleAddPostModal} />\n              <AddPostModal toggle={toggleAddPostModal} selectedImage={selectedImage} />\n            </Fragment>\n          ) : null}\n\n          {message ? <MessageViewer message={message} /> : null}\n\n          <PostButton setSelectedImage={setSelectedImage} toggleAddPostModal={toggleAddPostModal} />\n\n          <Switch>\n            {!currentUsername && <Route path=\"/\" exact component={Landingpage} />}\n            <Route path=\"/edit/profile\" exact component={EditProfilePage} />\n            <Route path=\"/edit/password\" exact component={EditPasswordPage} />\n            <Route path=\"/login\" exact component={Loginpage} />\n            <Route path=\"/signup\" exact component={Signuppage} />\n            <Layout>\n              {currentUsername && <Route path=\"/\" exact component={Homepage} />}\n              <Route path=\"/notifications\" exact component={ActivityPage} />\n              <Route path=\"/explore\" exact component={ExplorePage} />\n              <Route path=\"/user/:username\" exact component={Profilepage} />\n              <Route path=\"/p/:post_id\" exact component={PostView} />\n            </Layout>\n          </Switch>\n        </Fragment>\n      )}\n    </BrowserRouter>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    message: state.posts.message,\n    feedLoaded: state.posts.feed_loaded,\n    uploadingPost: state.posts.uploadingPost,\n    userDataLoaded: state.user.user_data_loaded,\n    token: state.user.token,\n    currentUsername: state.user.currentUserData.username,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    ADD_MESSAGE: (message) => dispatch(postActions.ADD_MESSAGE(message)),\n    LOGIN_WITH_UID: (uid) => dispatch(userActions.LOGIN_WITH_UID(uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/home/rinku/codes/instaclone/client/src/redux/store.js",[],"/home/rinku/codes/instaclone/client/src/components/PostButton.js",[],"/home/rinku/codes/instaclone/client/src/components/AddPostModal.js",[],"/home/rinku/codes/instaclone/client/src/components/Backdrop.js",[],"/home/rinku/codes/instaclone/client/src/components/MessageViewer.js",[],"/home/rinku/codes/instaclone/client/src/redux/rootReducer.js",[],"/home/rinku/codes/instaclone/client/src/pages/ExplorePage.js",["255"],"import React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport PostsGrid from \"../components/PostsGrid\";\nimport * as PostsActions from \"../redux/post/postsActions\";\n\nconst ExplorePage = ({ loading, explorePosts, loadExplorePosts }) => {\n  useEffect(() => {\n    if (explorePosts.length <= 0) {\n      loadExplorePosts();\n    }\n  }, []);\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"explore--page\">\n          <PostsGrid userPosts={explorePosts} />\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.posts.loading_explore_posts,\n    explorePosts: state.posts.explore_posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    loadExplorePosts: () => dispatch(PostsActions.LOAD_EXPLORE_POSTS()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExplorePage);\n","/home/rinku/codes/instaclone/client/src/pages/Homepage.js",["256"],"import Feed from \"../components/Feed\";\nimport { connect } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport Loader from \"../components/Loader\";\nimport * as postsActions from \"../redux/post/postsActions\";\n\nconst Homepage = ({ currentUserUid, feed, GET_FEED, loading, feedLoaded }) => {\n  useEffect(() => {\n    if (!feedLoaded) {\n      GET_FEED(currentUserUid);\n    }\n  }, [currentUserUid, feedLoaded]);\n\n  return (\n    <div style={{ paddingBottom: \"30px\" }}>\n      {loading ? <Loader /> : null}\n      {feed.length > 0 && !loading ? <Feed feed={feed} /> : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    feedLoaded: state.posts.feed_loaded,\n    loading: state.posts.loading_feed,\n    feed: state.posts.posts.filter((post) => post.infeed === true),\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    currentUserProfileImage: state.user.currentUserData.profile_image_url,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    GET_FEED: (user_uid) => dispatch(postsActions.GET_FEED(user_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);\n","/home/rinku/codes/instaclone/client/src/pages/Landingpage.js",[],"/home/rinku/codes/instaclone/client/src/pages/PostView.js",["257","258"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport * as PostsActions from \"../redux/post/postsActions\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport Backdrop from \"../components/Backdrop\";\nimport CommentBox from \"../components/CommentBox\";\nimport CommentsView from \"../components/CommentsView\";\nimport LoginNeededPrompt from \"../components/LoginNeededPrompt\";\nimport Post from \"../components/Post\";\n\nconst PostView = ({\n  currentUsername,\n  currentUserUid,\n  posts,\n  match,\n  LOAD_POST,\n  loading,\n  loadingLikers,\n  GET_COMMENTS,\n  LIKE_COMMENT,\n  UNLIKE_COMMENT,\n  DELETE_COMMENT,\n  GET_COMMENT_LIKERS,\n  gettingCommentLikers,\n  token,\n}) => {\n  //modal\n  const [showLoginNeededPrompt, setShowLoginNeededPrompt] = useState(false);\n\n  const toggleModal = (setModal) => {\n    setModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  const post_id = match.params.post_id;\n  const currentPost = posts.filter((post) => post.post_id === post_id);\n  const thisPostComments = currentPost[0]?.comments;\n\n  const post_uid = currentPost[0]?.post_uid;\n  const haveILiked = currentPost[0]?.liked_by_me;\n  const haveISaved = currentPost[0]?.i_have_saved;\n\n  const getComments = () => {\n    if (!thisPostComments) {\n      GET_COMMENTS(post_uid, currentUserUid);\n    }\n  };\n\n  const likeUnlikeComment = (likeOrUnlike, comment_uid) => {\n    if (currentUserUid) {\n      if (likeOrUnlike === \"like\") {\n        LIKE_COMMENT(comment_uid, currentUserUid, post_uid);\n      } else {\n        UNLIKE_COMMENT(comment_uid, currentUserUid, post_uid);\n      }\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  const deleteComment = (comment_uid) => {\n    DELETE_COMMENT(comment_uid, post_uid);\n  };\n\n  const getCommentLikers = (comment_uid) => {\n    GET_COMMENT_LIKERS(comment_uid, post_uid);\n  };\n\n  useEffect(() => {\n    if (post_uid) {\n      getComments();\n    }\n  }, [post_uid]);\n\n  useEffect(() => {\n    document.body.style.overflow = \"auto\";\n    if (token) {\n      if (currentUserUid && currentPost.length < 1) {\n        LOAD_POST(post_id, currentUserUid);\n      }\n    } else {\n      LOAD_POST(post_id, currentUserUid);\n    }\n  }, [token, currentUserUid, post_id]);\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Loader />\n      ) : //checking if post exiists\n      !loading && !currentPost[0]?.post_image ? (\n        <p style={{ textAlign: \"center\", fontSize: \"15px\" }}>Post deleted or something went wrong!</p>\n      ) : (\n        <Fragment>\n          <Post\n            post_commentsCount={currentPost[0].post_comments_count}\n            post_image={currentPost[0]?.post_image}\n            post_likesCount={currentPost[0]?.post_likes_count}\n            post_postedDate={currentPost[0]?.post_posted_date}\n            post_status={currentPost[0]?.post_status}\n            post_id={post_id}\n            post_owner_uid={currentPost[0]?.poster_uid}\n            post_uid={post_uid}\n            poster_profileImage={currentPost[0]?.poster_profileimage}\n            poster_username={currentPost[0].poster_username}\n            haveISaved={haveISaved}\n            haveILiked={haveILiked}\n            fullHeightImage={true}\n          />\n\n          <CommentBox\n            post_uid={post_uid}\n            post_owner_uid={currentPost[0]?.poster_uid}\n            toggleLoginNeededPrompt={() => toggleModal(setShowLoginNeededPrompt)}\n          />\n\n          <CommentsView\n            mobile={true}\n            comments={thisPostComments || []}\n            likeUnlikeComment={likeUnlikeComment}\n            currentUserUid={currentUserUid}\n            deleteComment={deleteComment}\n            currentUsername={currentUsername}\n            getCommentLikers={getCommentLikers}\n            gettingCommentLikers={gettingCommentLikers}\n          />\n        </Fragment>\n      )}\n\n      {showLoginNeededPrompt ? (\n        <Fragment>\n          <LoginNeededPrompt toggle={() => toggleModal(setShowLoginNeededPrompt)} />\n          <Backdrop show={showLoginNeededPrompt} toggle={() => toggleModal(setShowLoginNeededPrompt)} />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.user.token,\n    userDataLoaded: state.user.user_data_loaded,\n    gettingCommentLikers: state.posts.getting_comment_likers,\n    loadingLikers: state.posts.loading_likers,\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    posts: state.posts.posts,\n    loading: state.posts.loading_post,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    GET_COMMENT_LIKERS: (comment_uid, post_uid) => dispatch(PostsActions.GET_COMMENT_LIKERS(comment_uid, post_uid)),\n    DELETE_COMMENT: (comment_uid, post_uid) => dispatch(PostsActions.DELETE_COMMENT(comment_uid, post_uid)),\n    LIKE_COMMENT: (comment_uid, liker_uid, post_uid) =>\n      dispatch(PostsActions.LIKE_COMMENT(comment_uid, liker_uid, post_uid)),\n    UNLIKE_COMMENT: (comment_uid, unliker_uid, post_uid) =>\n      dispatch(PostsActions.UNLIKE_COMMENT(comment_uid, unliker_uid, post_uid)),\n    GET_COMMENTS: (post_uid, currentUserUid) => dispatch(PostsActions.GET_COMMENTS(post_uid, currentUserUid)),\n    LOAD_POST: (post_id, current_user_uid) => dispatch(PostsActions.GET_POST(post_id, current_user_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostView);\n","/home/rinku/codes/instaclone/client/src/pages/Loginpage.js",[],"/home/rinku/codes/instaclone/client/src/pages/Profilepage.js",["259","260"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport ProfileSummary from \"../components/ProfileSummary\";\nimport * as profileActions from \"../redux/profile/ProfileActions\";\nimport { connect } from \"react-redux\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport ProfileOptModal from \"../components/ProfileOptModal\";\nimport Backdrop from \"../components/Backdrop\";\nimport UnfollowPrompt from \"../components/UnfollowPrompt\";\nimport ProfileButtonLine from \"../components/ProfileButtonLine\";\nimport PostsGrid from \"../components/PostsGrid\";\nimport UserListModal from \"../components/UserListModal\";\nimport Loader from \"../components/Loader\";\nimport * as userActions from \"../redux/user/userActions\";\nimport LoginNeededPrompt from \"../components/LoginNeededPrompt\";\n\nconst Profilepage = ({\n  history,\n  currentUserUid,\n  profiles,\n  GET_PROFILE_DATA,\n  currentUsername,\n  FOLLOW,\n  UNFOLLOW,\n  FETCH_FOLLOWERS,\n  FETCH_FOLLOWINGS,\n  loading,\n  loading_followers_or_following,\n  LOGOUT,\n}) => {\n  const profileUsername = history.location.pathname.slice(6);\n  const profileData = profiles.filter((profile) => profile?.username === profileUsername);\n\n  //modal handlers\n  const [showProfileOptionsModal, setShowProfileOptionsModal] = useState(false);\n  const [showUnfollowPrompt, setShowUnfollowPrompt] = useState(false);\n  const [showFollowers, setShowFollowers] = useState(false);\n  const [showFollowings, setShowFollowings] = useState(false);\n  const [showLoginNeededPrompt, setShowLoginNeededPrompt] = useState(false);\n\n  //\n  const [showSavedPosts, setShowSavedPosts] = useState(false);\n\n  //followers and following list\n  const followersList = profiles.filter((profile) => profile.username === profileUsername)[0]?.followers;\n  const followingList = profiles.filter((profile) => profile.username === profileUsername)[0]?.followings;\n\n  const LOAD_FOLLOWERS = () => {\n    if (!followersList) {\n      FETCH_FOLLOWERS(profileUsername);\n    }\n    toggleModal(setShowFollowers);\n  };\n\n  const LOAD_FOLLOWINGS = () => {\n    if (!followingList) {\n      FETCH_FOLLOWINGS(profileUsername);\n    }\n    toggleModal(setShowFollowings);\n  };\n\n  const toggleModal = (setModal) => {\n    setModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  const Logout = () => {\n    toggleModal(setShowProfileOptionsModal);\n    LOGOUT();\n    history.push(\"/\");\n    localStorage.removeItem(\"token\");\n  };\n\n  const follow = () => {\n    if (currentUserUid) {\n      FOLLOW(profileData[0]?.uid, currentUserUid);\n    } else {\n      toggleModal(setShowLoginNeededPrompt);\n    }\n  };\n\n  useEffect(() => {\n    document.body.style.overflow = \"auto\";\n    //set document title\n    document.title = `${profileUsername} | Instaclone`;\n    if (profileData.length <= 0) {\n      GET_PROFILE_DATA(profileUsername, currentUserUid);\n    }\n\n    return () => {\n      document.title = \"Instaclone\";\n    };\n  }, [profileUsername, currentUserUid]);\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Loader />\n      ) : !loading && profileData.length < 1 ? (\n        <p style={{ textAlign: \"center\", fontSize: \"15px\" }}>Nothing found in this route.</p>\n      ) : (\n        <div className=\"profile--page\">\n          <ProfileSummary\n            profileData={profileData[0] || []}\n            toggleProfileOptions={() => toggleModal(setShowProfileOptionsModal)}\n            toggleUnfollowPrompt={() => toggleModal(setShowUnfollowPrompt)}\n            isMyProfile={currentUsername === profileUsername}\n            FOLLOW={follow}\n            LOAD_FOLLOWERS={LOAD_FOLLOWERS}\n            LOAD_FOLLOWINGS={LOAD_FOLLOWINGS}\n          />\n          <ProfileButtonLine\n            showSavedPosts={showSavedPosts}\n            isMyProfile={currentUsername === profileUsername}\n            viewSavedPosts={() => setShowSavedPosts(true)}\n            hideSavedPosts={() => setShowSavedPosts(false)}\n            no_posts={profileData[0]?.posts.length <= 0}\n            no_saved_posts={profileData[0]?.savedPosts.length <= 0}\n          />\n\n          {(showSavedPosts && profileData[0].savedPosts.length > 0) ||\n          (!showSavedPosts && profileData[0].posts.length > 0) ? (\n            <div className=\"post--grid-box\">\n              <PostsGrid userPosts={showSavedPosts ? profileData[0]?.savedPosts : profileData[0]?.posts || []} />\n            </div>\n          ) : (\n            <p\n              style={{\n                fontSize: \"14px\",\n                textAlign: \"center\",\n                fontFamily: \"Inter\",\n              }}\n            >\n              No any {showSavedPosts ? \"saved posts.\" : \"posts.\"}\n            </p>\n          )}\n\n          {showProfileOptionsModal ? (\n            <Fragment>\n              <ProfileOptModal\n                toggle={() => toggleModal(setShowProfileOptionsModal)}\n                isMyProfile={currentUsername === profileUsername}\n                LOGOUT={Logout}\n              />\n              <Backdrop show={showProfileOptionsModal} toggle={() => toggleModal(setShowProfileOptionsModal)} />\n            </Fragment>\n          ) : null}\n\n          {showUnfollowPrompt ? (\n            <Fragment>\n              <Backdrop show={showUnfollowPrompt} toggle={() => toggleModal(setShowUnfollowPrompt)} />\n              <UnfollowPrompt\n                profileUsername={profileUsername}\n                profileImage={profileData[0]?.profile_image_url}\n                toggle={() => toggleModal(setShowUnfollowPrompt)}\n                UNFOLLOW={() => UNFOLLOW(profileData[0].uid, currentUserUid)}\n              />\n            </Fragment>\n          ) : null}\n\n          {showFollowers || showFollowings ? (\n            <Fragment>\n              <Backdrop\n                toggle={() => (showFollowers ? toggleModal(setShowFollowers) : toggleModal(setShowFollowings))}\n                show={showFollowers || showFollowings}\n              />\n              <UserListModal\n                title={showFollowers ? \"Followers\" : \"Following\"}\n                loading={loading_followers_or_following}\n                users={(showFollowers ? followersList : followingList) || []}\n                toggle={() => (showFollowers ? toggleModal(setShowFollowers) : toggleModal(setShowFollowings))}\n              />\n            </Fragment>\n          ) : null}\n        </div>\n      )}\n\n      {showLoginNeededPrompt ? (\n        <Fragment>\n          <LoginNeededPrompt profilePage={true} toggle={() => toggleModal(setShowLoginNeededPrompt)} />\n          <Backdrop show={showLoginNeededPrompt} toggle={() => toggleModal(setShowLoginNeededPrompt)} />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.profile.loading,\n    currentUsername: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n    profiles: state.profile.profiles,\n    loading: state.profile.loading,\n    loading_followers_or_following: state.profile.loading_followers_or_following,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    LOGOUT: () => dispatch(userActions.LOGOUT()),\n    FETCH_FOLLOWERS: (username) => dispatch(profileActions.FETCH_FOLLOWERS(username)),\n    FETCH_FOLLOWINGS: (username) => dispatch(profileActions.FETCH_FOLLOWINGS(username)),\n    UNFOLLOW: (unfollowing_user_uid, unfollower_user_uid) =>\n      dispatch(profileActions.UNFOLLOW(unfollowing_user_uid, unfollower_user_uid)),\n    FOLLOW: (following_user_uid, follower_user_uid) =>\n      dispatch(profileActions.FOLLOW(following_user_uid, follower_user_uid)),\n    GET_PROFILE_DATA: (profile_username, current_user_uid) =>\n      dispatch(profileActions.GET_PROFILE_DATA(profile_username, current_user_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profilepage);\n","/home/rinku/codes/instaclone/client/src/pages/Signuppage.js",["261"],"import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { signupUser } from \"../services/authServices\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Signuppage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  const history = useHistory();\n\n  const SIGNUP = async (e) => {\n    e.preventDefault();\n\n    const trimmed = {\n      email: email.trim(),\n      username: username.trim(),\n      password: password.trim(),\n    };\n\n    if (\n      trimmed.email !== \"\" &&\n      trimmed.email.length >= 8 &&\n      trimmed.email.length <= 40 &&\n      trimmed.email.includes(\"@\") &&\n      trimmed.email.includes(\".com\")\n    ) {\n      if (trimmed.username.length >= 5 && trimmed.username.length <= 25 && !trimmed.username.includes(\" \")) {\n        if (trimmed.password.length >= 8 && trimmed.password.length <= 30) {\n          const response = await signupUser(email, username.trim().toLowerCase(), password);\n          if (response !== \"success\") {\n            setError(response);\n          } else {\n            history.push(\"/login\");\n          }\n        } else {\n          setError(\"Password must be between 8 and 30 characters.\");\n        }\n      } else {\n        setError(\"Username must be spaceless between 5 and 25 characters.\");\n      }\n    } else {\n      setError(\"Please enter a valid email address.\");\n    }\n  };\n\n  return (\n    <div className=\"auth-page\">\n      <div>\n        <p>Instaclone</p>\n        <form onSubmit={SIGNUP}>\n          <label>Email</label>\n          <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} autoFocus />\n          <label>Username</label>\n          <input type=\"text\" value={username.toLowerCase()} onChange={(e) => setUsername(e.target.value)} />\n          <label>Password</label>\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n\n          <button type=\"submit\">Signup</button>\n          <p style={{ fontSize: \"14px\", color: \"gray\", textAlign: \"center\" }}>\n            By signing up, you agree to our terms and policies.\n          </p>\n        </form>\n      </div>\n\n      <div className=\"info\">\n        <p>Already have an account?</p>\n        <NavLink to=\"/login\">Login</NavLink>\n      </div>\n    </div>\n  );\n};\n\nexport default Signuppage;\n","/home/rinku/codes/instaclone/client/src/pages/EditProfilePage.js",["262"],"import { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateUserData, updateProfilePicture } from \"../services/userServices\";\nimport storage from \"../firebase/storage\";\nimport Compressor from \"compressorjs\";\nimport { Link } from \"react-router-dom\";\nimport * as postActions from \"../redux/post/postsActions\";\nimport * as userActions from \"../redux/user/userActions\";\n\nconst EditProfilePage = ({\n  currentUserProfileImage,\n  currentUserName,\n  currentUserUid,\n  currentUserBio,\n  currentUserEmail,\n  ADD_MESSAGE,\n  UPDATE_PROFILE_LOCALLY,\n}) => {\n  const [username, setUsername] = useState(currentUserName);\n  const [email, setEmail] = useState(currentUserEmail);\n  const [bio, setBio] = useState(currentUserBio);\n  const [updating, setUpdating] = useState(false);\n  const [updatingProfilePicture, setUpdatingProfilePicture] = useState(false);\n\n  //image file\n  const [selectedImage, setSelectedImage] = useState(null);\n  const newImage = selectedImage ? URL.createObjectURL(selectedImage) : null;\n\n  const updateImage = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      if (file.name.slice(file.name.slice(file.name.lastIndexOf(\".\"))).includes(\"jpg\", \"png\", \"jpeg\")) {\n        setSelectedImage(e.target.files[0]);\n      } else {\n        ADD_MESSAGE(\"Image must be on jpg,png or jpeg format.\");\n      }\n    }\n\n    setTimeout(() => {\n      ADD_MESSAGE(null);\n    }, 3000);\n  };\n\n  const updateProfilePictureFinal = () => {\n    if (selectedImage && !updatingProfilePicture) {\n      setUpdatingProfilePicture(true);\n      new Compressor(selectedImage, {\n        quality: 0.6,\n        success(result) {\n          const uploadedImage = storage.ref(`/profilePics/${currentUserUid}/${result.name}`).put(result);\n          uploadedImage.on(\n            \"state_changed\",\n            (snapshot) => {},\n            (err) => console.log(err),\n            () => {\n              storage\n                .ref(`/profilePics/${currentUserUid}`)\n                .child(result.name)\n                .getDownloadURL()\n                .then((url) => {\n                  updateProfilePicture(currentUserUid, url)\n                    .then((res) => {\n                      if (res === \"done\") {\n                        ADD_MESSAGE(\"Successfully updated the profile picture\");\n                      } else {\n                        ADD_MESSAGE(res);\n                      }\n                      setUpdating(false);\n                    })\n                    .catch((err) => ADD_MESSAGE(err.message));\n                });\n            }\n          );\n        },\n      });\n    }\n  };\n\n  const updateProfile = (e) => {\n    e.preventDefault();\n    setUpdating(true);\n\n    if (username === currentUserName && email === currentUserEmail && bio === currentUserBio) {\n      ADD_MESSAGE(\"Nothing to Update.\");\n      setUpdating(false);\n    } else {\n      if (!username.trim().includes(\" \") && username.trim().length >= 5 && username.trim().length <= 25) {\n        updateUserData(username.trim().toLowerCase(), email || \"\", bio || \"\", currentUserName).then((res) => {\n          if (res !== \"success\") {\n            ADD_MESSAGE(res);\n          } else {\n            ADD_MESSAGE(\"Successfully updated the profile.\");\n            UPDATE_PROFILE_LOCALLY({ bio, username, email });\n          }\n          setUpdating(false);\n        });\n      } else {\n        setUpdating(false);\n        ADD_MESSAGE(\"Username must be spaceless between 5 and 25 characters.\");\n      }\n    }\n\n    setTimeout(() => {\n      ADD_MESSAGE(null);\n    }, 3000);\n  };\n\n  return (\n    <div className=\"edit--profile-page\">\n      <section className=\"section-one\">\n        <img src={newImage || currentUserProfileImage} alt=\"profile-image\" />\n\n        <div>\n          <p>{currentUserName}</p>\n          <label htmlFor=\"image\" style={newImage ? { display: \"none\" } : null}>\n            Change Profile Photo\n          </label>\n          <label htmlFor=\"u-btn\" style={!newImage ? { display: \"none\" } : null}>\n            {updatingProfilePicture ? \"Updating Profile Picture..\" : \"Confirm New Profile Photo\"}\n          </label>\n          <button style={{ display: \"none\" }} id=\"u-btn\" onClick={updateProfilePictureFinal}>\n            Update Profile Photo\n          </button>\n          <input type=\"file\" style={{ display: \"none\" }} id=\"image\" onChange={updateImage} accept=\"image/*\" />\n        </div>\n      </section>\n\n      <section>\n        <form onSubmit={updateProfile}>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            type=\"text\"\n            value={username.toLowerCase()}\n            id=\"username\"\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <label htmlFor=\"email\">Email</label>\n          <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n          <label htmlFor=\"Bio\">Bio</label>\n          <textarea type=\"text\" onChange={(e) => setBio(e.target.value)}>\n            {bio}\n          </textarea>\n\n          <button disabled={updating} className=\"submit-btn\" onClick={updateProfile}>\n            Submit\n          </button>\n          <Link to=\"/edit/password\">Change Password</Link>\n        </form>\n      </section>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUserEmail: state.user.currentUserData.email,\n    currentUserBio: state.user.currentUserData.bio,\n    currentUserProfileImage: state.user.currentUserData.profile_image_url,\n    currentUserName: state.user.currentUserData.username,\n    currentUserUid: state.user.currentUserData.uid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    UPDATE_PROFILE_LOCALLY: (data) => dispatch(userActions.UPDATE_PROFILE_LOCALLY(data)),\n    ADD_MESSAGE: (message) => dispatch(postActions.ADD_MESSAGE(message)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProfilePage);\n","/home/rinku/codes/instaclone/client/src/pages/EditPasswordPage.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userActions.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsActions.js",[],"/home/rinku/codes/instaclone/client/src/utilities/overflowToggler.js",[],"/home/rinku/codes/instaclone/client/src/components/Loader.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsReducer.js",[],"/home/rinku/codes/instaclone/client/src/components/PostsGrid.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userReducer.js",[],"/home/rinku/codes/instaclone/client/src/components/SearchView.js",[],"/home/rinku/codes/instaclone/client/src/components/Recommended.js",["263"],"import { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as userActions from \"../redux/user/userActions\";\nimport { useEffect } from \"react\";\nimport { FiUserPlus, FiUserMinus } from \"react-icons/all\";\n\nconst Recommended = ({ recommendedUsers, currentUserUid, FOLLOW, UNFOLLOW, GET_RECOMMENDED_USERS }) => {\n  useEffect(() => {\n    if (recommendedUsers.length < 1 && currentUserUid) {\n      GET_RECOMMENDED_USERS(currentUserUid);\n    }\n  }, [currentUserUid]);\n\n  return (\n    <div className=\"recommended\" style={!currentUserUid ? { display: \"none\" } : null}>\n      <p style={{ fontSize: \"15px\" }}>People you may like to follow</p>\n      {recommendedUsers.length > 0 &&\n        recommendedUsers.slice(3, 6).map((user) => {\n          return (\n            <div className=\"recommended--user\" key={user.username}>\n              <div>\n                <img src={user.profile_image_url} alt=\"profile_image\" />\n                <NavLink to={`/user/${user.username}`}>{user.username}</NavLink>\n              </div>\n\n              <button\n                className=\"follow--button\"\n                onClick={() => FOLLOW(currentUserUid, user.uid)}\n                style={user.i_am_following ? { display: \"none\" } : null}\n              >\n                <FiUserPlus />\n                <p>Follow</p>\n              </button>\n              <button\n                className=\"unfollow--btn\"\n                style={!user.i_am_following ? { display: \"none\" } : { border: \"solid 1px tomato\" }}\n                onClick={() => UNFOLLOW(currentUserUid, user.uid)}\n              >\n                <FiUserMinus />\n                <p>Unfollow</p>\n              </button>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUserUid: state.user.currentUserData.uid,\n    recommendedUsers: state.user.recommendedUsers,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    GET_RECOMMENDED_USERS: (uid) => dispatch(userActions.GET_RECOMMENDED(uid)),\n    FOLLOW: (follower_uid, following_uid) => dispatch(userActions.FOLLOW_RECOMMENDED(follower_uid, following_uid)),\n    UNFOLLOW: (unfollower_uid, unfollowing_uid) =>\n      dispatch(userActions.UNFOLLOW_RECOMMENDED(unfollower_uid, unfollowing_uid)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Recommended);\n","/home/rinku/codes/instaclone/client/src/components/Feed.js",[],"/home/rinku/codes/instaclone/client/src/components/PostOptModal.js",[],"/home/rinku/codes/instaclone/client/src/components/UserListModal.js",[],"/home/rinku/codes/instaclone/client/src/components/CommentBox.js",[],"/home/rinku/codes/instaclone/client/src/components/CommentsView.js",[],"/home/rinku/codes/instaclone/client/src/components/LoginNeededPrompt.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileOptModal.js",[],"/home/rinku/codes/instaclone/client/src/components/UnfollowPrompt.js",[],"/home/rinku/codes/instaclone/client/src/utilities/notificationPusher.js",[],"/home/rinku/codes/instaclone/client/src/redux/post/postsActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileButtonLine.js",[],"/home/rinku/codes/instaclone/client/src/components/ProfileSummary.js",[],"/home/rinku/codes/instaclone/client/src/redux/user/userActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/profileReducer.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/ProfileActions.js",[],"/home/rinku/codes/instaclone/client/src/redux/profile/profileActionTypes.js",[],"/home/rinku/codes/instaclone/client/src/Icons/CustomIcons.js",[],["264","265"],"/home/rinku/codes/instaclone/client/src/services/userServices.js",[],"/home/rinku/codes/instaclone/client/src/services/authServices.js",[],"/home/rinku/codes/instaclone/client/src/services/postsServices.js",[],"/home/rinku/codes/instaclone/client/src/services/commentServices.js",[],"/home/rinku/codes/instaclone/client/src/services/profileServices.js",[],"/home/rinku/codes/instaclone/client/src/firebase/storage.js",[],"/home/rinku/codes/instaclone/client/src/firebase/firestore.js",[],"/home/rinku/codes/instaclone/client/src/components/Post.js",[],"/home/rinku/codes/instaclone/client/src/components/Comment.js",["266"],"import { Tooltip } from \"@material-ui/core\";\nimport { Fragment, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport overflowToggler from \"../utilities/overflowToggler\";\nimport Backdrop from \"./Backdrop\";\nimport UserListModal from \"./UserListModal\";\nimport moment from \"moment\";\n\nconst Comment = ({\n  comments,\n  comment,\n  likeUnlikeComment,\n  currentUserUid,\n  currentUsername,\n  deleteComment,\n  getCommentLikers,\n  gettingCommentLikers,\n}) => {\n  const [showCommentLikers, setShowCommentLikers] = useState(false);\n  const commentLikers = comments.filter((cmt) => cmt.comment_uid === comment.comment_uid)[0]?.likers;\n\n  const toggleModal = (setModal) => {\n    setModal((prev) => !prev);\n    overflowToggler();\n  };\n\n  const loadCommentLikers = () => {\n    toggleModal(setShowCommentLikers);\n    if (!commentLikers) {\n      getCommentLikers(comment.comment_uid);\n    }\n  };\n\n  let differenceInDate;\n  //formatted posted date\n  const formattedPostedDate = moment(comment.posted_date).format(\"dddd, MMMM Do YYYY, h:mm a\");\n  //finding difference of date\n  const todaysDate = moment(new Date());\n  const secondsDifference = moment(todaysDate).diff(moment(comment.posted_date), \"seconds\");\n  const minutesDifference = moment(todaysDate).diff(moment(comment.posted_date), \"minutes\");\n  const hoursDifference = moment(todaysDate).diff(moment(comment.posted_date), \"hours\");\n  const daysDifference = moment(todaysDate).diff(moment(comment.posted_date), \"days\");\n  const weeksDifference = moment(todaysDate).diff(moment(comment.posted_date), \"weeks\");\n  const monthsDifference = moment(todaysDate).diff(moment(comment.posted_date), \"months\");\n  const yearsDifference = moment(todaysDate).diff(moment(comment.posted_date), \"years\");\n\n  if (yearsDifference >= 1) {\n    differenceInDate = yearsDifference + \"y\";\n  }\n  if (monthsDifference <= 11) {\n    differenceInDate = monthsDifference + \"mo\";\n  }\n  if (weeksDifference <= 3) {\n    differenceInDate = weeksDifference + \"w\";\n  }\n  if (daysDifference <= 7) {\n    differenceInDate = daysDifference + \"d\";\n  }\n  if (hoursDifference <= 23) {\n    differenceInDate = hoursDifference + \"h\";\n  }\n  if (minutesDifference <= 59 && minutesDifference >= 1) {\n    differenceInDate = minutesDifference + \"m\";\n  }\n  if (secondsDifference <= 59) {\n    differenceInDate = secondsDifference + \"s\";\n  }\n\n  return (\n    <Fragment>\n      <div className=\"comment\">\n        <img src={comment.poster_profile_image} alt=\"profile-image\" />\n\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <div>\n            <p className=\"username--comment\">\n              <NavLink to={`/${comment.poster_username}`}>{comment.poster_username}</NavLink> {comment.comment}\n            </p>\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              marginTop: \"-15px\",\n            }}\n          >\n            <Tooltip title={<span style={{ fontSize: \"13px\" }}>{formattedPostedDate}</span>}>\n              <p className=\"date\">{differenceInDate}</p>\n            </Tooltip>\n            <button onClick={loadCommentLikers}>\n              {comment.comment_likes_count || 0} {comment.comment_likes_count === 1 ? \"like\" : \"likes\"}\n            </button>\n            <button onClick={() => likeUnlikeComment(comment.liked_by_me ? \"unlike\" : \"like\", comment.comment_uid)}>\n              {comment.liked_by_me ? \"unlike\" : \"like\"}\n            </button>\n            <button\n              style={\n                currentUserUid === comment.post_owner_uid || currentUsername === comment.poster_username\n                  ? { color: \"red\" }\n                  : { display: \"none\" }\n              }\n              onClick={() => deleteComment(comment.comment_uid)}\n            >\n              delete\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {showCommentLikers ? (\n        <Fragment>\n          <UserListModal\n            title=\"Likes\"\n            loading={gettingCommentLikers}\n            toggle={() => toggleModal(setShowCommentLikers)}\n            users={commentLikers || []}\n          />\n          <Backdrop show={showCommentLikers} toggle={() => toggleModal(setShowCommentLikers)} />\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n};\n\nexport default Comment;\n","/home/rinku/codes/instaclone/client/src/firebase/firebase.js",[],"/home/rinku/codes/instaclone/client/src/server_url.js",[],"/home/rinku/codes/instaclone/client/src/utilities/clearNotification.js",[],"/home/rinku/codes/instaclone/client/src/components/Sidebar.js",["267"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport firestore from \"../firebase/firestore\";\nimport { FiHome, FiBell, FiUser, FiSearch, FiUpload } from \"react-icons/fi\";\nimport { Tooltip, Badge } from \"@material-ui/core\";\n\nconst Sidebar = ({ currentUsername, currentUserUid }) => {\n  const history = useHistory();\n  const pathname = history.location.pathname;\n  const [notificationCount, setNotificationCount] = useState(0);\n\n  useEffect(() => {\n    if (currentUserUid) {\n      firestore\n        .collection(currentUserUid)\n        .doc(\"notifications\")\n        .onSnapshot((doc) => {\n          const data = [];\n          for (let e in doc.data()) {\n            data.push(e);\n          }\n          setNotificationCount(data.length);\n        });\n    }\n  }, []);\n\n  const navButtons = [\n    { buttonIcon: <FiHome />, buttonTarget: \"/\", title: \"Home\" },\n    { buttonIcon: <FiSearch />, buttonTarget: \"/explore\", title: \"Explore\" },\n  ];\n\n  if (currentUserUid) {\n    navButtons.push(\n      { buttonIcon: <FiUpload />, buttonTarget: `/newPost`, title: \"Add New Post\" },\n      {\n        buttonIcon: (\n          <Badge badgeContent={notificationCount} color=\"primary\">\n            <FiBell />\n          </Badge>\n        ),\n        buttonTarget: \"/notifications\",\n        title: \"Notifications\",\n      },\n      { buttonIcon: <FiUser />, buttonTarget: `/user/${currentUsername}`, title: \"My Profile\" }\n    );\n  }\n\n  return (\n    <nav className=\"sidebar\">\n      <div>\n        {navButtons.map((button, i) => {\n          return (\n            <Tooltip title={<p className=\"tooltipText\">{button.title}</p>} arrow key={i} placement=\"left\">\n              <button\n                onClick={() => history.push(button.buttonTarget)}\n                className={pathname === button.buttonTarget ? \"activeButton\" : null}\n              >\n                {button.buttonIcon}\n              </button>\n            </Tooltip>\n          );\n        })}\n      </div>\n    </nav>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUserUid: state.user.currentUserData.uid,\n    currentUsername: state.user.currentUserData.username,\n  };\n};\n\nexport default connect(mapStateToProps)(Sidebar);\n","/home/rinku/codes/instaclone/client/src/components/Topbar.js",[],"/home/rinku/codes/instaclone/client/src/components/Layout.js",[],"/home/rinku/codes/instaclone/client/src/pages/ActivityPage.js",["268"],"import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport clearNotification from \"../utilities/clearNotification\";\nimport { connect } from \"react-redux\";\n\nconst ActivityPage = ({ currentUserUid }) => {\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    clearNotification(currentUserUid);\n\n    axios.get(`https://instacloone.herokuapp.com/user/getNotifications/${currentUserUid}`).then((res) => {\n      setNotifications(res.data);\n      setLoading(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"notification-list\">\n      <div className=\"top\">Notifications</div>\n\n      <div className=\"notifications\">\n        {notifications.length > 0 ? (\n          notifications\n            .sort((a, b) => {\n              return new Date(b.date) - new Date(a.date);\n            })\n            .map((noti) => {\n              return (\n                <Link\n                  className=\"notification\"\n                  style={loading ? { display: \"none\" } : { width: \"100%\" }}\n                  key={noti.uid}\n                  to={() =>\n                    noti.post_id !== null\n                      ? `/p/${noti.post_id}`\n                      : noti.notification === \"follow\"\n                      ? `/user/${noti.username}`\n                      : \"\"\n                  }\n                >\n                  <img src={noti.profile_image_url} alt=\"profile-pc\" className=\"profile-pic\" />\n                  <p>\n                    {noti.username}{\" \"}\n                    {noti.notification === \"like post\"\n                      ? \" liked your post.\"\n                      : noti.notification === \"like comment\"\n                      ? \" liked your comment.\"\n                      : noti.notification === \"comment added\"\n                      ? \" commented on your post.\"\n                      : noti.notification === \"follow\"\n                      ? \"started following you.\"\n                      : \"\"}\n                    <b style={{ color: \"grey\" }}>{noti.date}</b>\n                  </p>\n\n                  <img\n                    style={noti.post_image === null ? { display: \"none\" } : null}\n                    src={noti.post_image}\n                    alt=\"profile-pc\"\n                    className=\"post-img\"\n                  />\n                </Link>\n              );\n            })\n        ) : (\n          <p style={loading ? { display: \"none\" } : { textAlign: \"center\", fontSize: \"14px\" }}>No notifications</p>\n        )}\n      </div>\n      <div style={!loading ? { display: \"none\" } : { textAlign: \"center\", fontSize: \"14px\" }}>\n        <p>Loading...</p>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUserUid: state.user.currentUserData.uid,\n  };\n};\n\nexport default connect(mapStateToProps)(ActivityPage);\n",{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","severity":1,"message":"274","line":54,"column":6,"nodeType":"275","endLine":54,"endColumn":21,"suggestions":"276"},{"ruleId":"273","severity":1,"message":"277","line":60,"column":6,"nodeType":"275","endLine":60,"endColumn":13,"suggestions":"278"},{"ruleId":"273","severity":1,"message":"279","line":12,"column":6,"nodeType":"275","endLine":12,"endColumn":8,"suggestions":"280"},{"ruleId":"273","severity":1,"message":"281","line":12,"column":6,"nodeType":"275","endLine":12,"endColumn":34,"suggestions":"282"},{"ruleId":"273","severity":1,"message":"283","line":74,"column":6,"nodeType":"275","endLine":74,"endColumn":16,"suggestions":"284"},{"ruleId":"273","severity":1,"message":"285","line":85,"column":6,"nodeType":"275","endLine":85,"endColumn":38,"suggestions":"286"},{"ruleId":"273","severity":1,"message":"287","line":92,"column":6,"nodeType":"275","endLine":92,"endColumn":39,"suggestions":"288"},{"ruleId":"289","severity":1,"message":"290","line":193,"column":5,"nodeType":"291","messageId":"292","endLine":193,"endColumn":12},{"ruleId":"293","severity":1,"message":"294","line":10,"column":10,"nodeType":"295","messageId":"296","endLine":10,"endColumn":15},{"ruleId":"297","severity":1,"message":"298","line":111,"column":9,"nodeType":"299","endLine":111,"endColumn":78},{"ruleId":"273","severity":1,"message":"300","line":12,"column":6,"nodeType":"275","endLine":12,"endColumn":22,"suggestions":"301"},{"ruleId":"269","replacedBy":"302"},{"ruleId":"271","replacedBy":"303"},{"ruleId":"297","severity":1,"message":"298","line":72,"column":9,"nodeType":"299","endLine":72,"endColumn":71},{"ruleId":"273","severity":1,"message":"304","line":26,"column":6,"nodeType":"275","endLine":26,"endColumn":8,"suggestions":"305"},{"ruleId":"273","severity":1,"message":"304","line":18,"column":6,"nodeType":"275","endLine":18,"endColumn":8,"suggestions":"306"},"no-native-reassign",["307"],"no-negated-in-lhs",["308"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ADD_MESSAGE' and 'feedLoaded'. Either include them or remove the dependency array. If 'ADD_MESSAGE' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["309"],"React Hook useEffect has a missing dependency: 'LOGIN_WITH_UID'. Either include it or remove the dependency array. If 'LOGIN_WITH_UID' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["310"],"React Hook useEffect has missing dependencies: 'explorePosts.length' and 'loadExplorePosts'. Either include them or remove the dependency array. If 'loadExplorePosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["311"],"React Hook useEffect has a missing dependency: 'GET_FEED'. Either include it or remove the dependency array. If 'GET_FEED' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["312"],"React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["313"],"React Hook useEffect has missing dependencies: 'LOAD_POST' and 'currentPost.length'. Either include them or remove the dependency array. If 'LOAD_POST' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["314"],"React Hook useEffect has missing dependencies: 'GET_PROFILE_DATA' and 'profileData.length'. Either include them or remove the dependency array. If 'GET_PROFILE_DATA' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["315"],"no-dupe-keys","Duplicate key 'loading'.","ObjectExpression","unexpected","no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'GET_RECOMMENDED_USERS' and 'recommendedUsers.length'. Either include them or remove the dependency array. If 'GET_RECOMMENDED_USERS' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["316"],["307"],["308"],"React Hook useEffect has a missing dependency: 'currentUserUid'. Either include it or remove the dependency array.",["317"],["318"],"no-global-assign","no-unsafe-negation",{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"335","fix":"337"},"Update the dependencies array to be: [ADD_MESSAGE, feedLoaded, uploadingPost]",{"range":"338","text":"339"},"Update the dependencies array to be: [LOGIN_WITH_UID, token]",{"range":"340","text":"341"},"Update the dependencies array to be: [explorePosts.length, loadExplorePosts]",{"range":"342","text":"343"},"Update the dependencies array to be: [GET_FEED, currentUserUid, feedLoaded]",{"range":"344","text":"345"},"Update the dependencies array to be: [getComments, post_uid]",{"range":"346","text":"347"},"Update the dependencies array to be: [token, currentUserUid, post_id, currentPost.length, LOAD_POST]",{"range":"348","text":"349"},"Update the dependencies array to be: [profileUsername, currentUserUid, profileData.length, GET_PROFILE_DATA]",{"range":"350","text":"351"},"Update the dependencies array to be: [GET_RECOMMENDED_USERS, currentUserUid, recommendedUsers.length]",{"range":"352","text":"353"},"Update the dependencies array to be: [currentUserUid]",{"range":"354","text":"355"},{"range":"356","text":"355"},[1795,1810],"[ADD_MESSAGE, feedLoaded, uploadingPost]",[1891,1898],"[LOGIN_WITH_UID, token]",[408,410],"[explorePosts.length, loadExplorePosts]",[383,411],"[GET_FEED, currentUserUid, feedLoaded]",[1989,1999],"[getComments, post_uid]",[2255,2287],"[token, currentUserUid, post_id, currentPost.length, LOAD_POST]",[2889,2922],"[profileUsername, currentUserUid, profileData.length, GET_PROFILE_DATA]",[474,490],"[GET_RECOMMENDED_USERS, currentUserUid, recommendedUsers.length]",[848,850],"[currentUserUid]",[610,612]]